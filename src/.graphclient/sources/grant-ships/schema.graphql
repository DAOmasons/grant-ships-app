schema {
  query: query_root
  subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60
  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "FeedCard"
"""
type FeedCard {
  """An object relationship"""
  content: RawMetadata
  content_id: String
  db_write_timestamp: timestamp
  """An object relationship"""
  domain: GameManager
  domain_id: String
  """An object relationship"""
  embed: FeedItemEmbed
  embed_id: String
  externalLink: String
  id: String!
  internalLink: String
  message: String
  """An object relationship"""
  object: FeedItemEntity
  object_id: String
  sender: String
  """An object relationship"""
  subject: FeedItemEntity
  subjectMetadataPointer: String!
  subject_id: String!
  tag: String!
  timestamp: Int!
}

"""
Boolean expression to filter rows from the table "FeedCard". All fields are combined with a logical 'AND'.
"""
input FeedCard_bool_exp {
  _and: [FeedCard_bool_exp!]
  _not: FeedCard_bool_exp
  _or: [FeedCard_bool_exp!]
  content: RawMetadata_bool_exp
  content_id: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  domain: GameManager_bool_exp
  domain_id: String_comparison_exp
  embed: FeedItemEmbed_bool_exp
  embed_id: String_comparison_exp
  externalLink: String_comparison_exp
  id: String_comparison_exp
  internalLink: String_comparison_exp
  message: String_comparison_exp
  object: FeedItemEntity_bool_exp
  object_id: String_comparison_exp
  sender: String_comparison_exp
  subject: FeedItemEntity_bool_exp
  subjectMetadataPointer: String_comparison_exp
  subject_id: String_comparison_exp
  tag: String_comparison_exp
  timestamp: Int_comparison_exp
}

"""Ordering options when selecting data from "FeedCard"."""
input FeedCard_order_by {
  content: RawMetadata_order_by
  content_id: order_by
  db_write_timestamp: order_by
  domain: GameManager_order_by
  domain_id: order_by
  embed: FeedItemEmbed_order_by
  embed_id: order_by
  externalLink: order_by
  id: order_by
  internalLink: order_by
  message: order_by
  object: FeedItemEntity_order_by
  object_id: order_by
  sender: order_by
  subject: FeedItemEntity_order_by
  subjectMetadataPointer: order_by
  subject_id: order_by
  tag: order_by
  timestamp: order_by
}

"""
select columns of table "FeedCard"
"""
enum FeedCard_select_column {
  """column name"""
  content_id
  """column name"""
  db_write_timestamp
  """column name"""
  domain_id
  """column name"""
  embed_id
  """column name"""
  externalLink
  """column name"""
  id
  """column name"""
  internalLink
  """column name"""
  message
  """column name"""
  object_id
  """column name"""
  sender
  """column name"""
  subjectMetadataPointer
  """column name"""
  subject_id
  """column name"""
  tag
  """column name"""
  timestamp
}

"""
Streaming cursor of the table "FeedCard"
"""
input FeedCard_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: FeedCard_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input FeedCard_stream_cursor_value_input {
  content_id: String
  db_write_timestamp: timestamp
  domain_id: String
  embed_id: String
  externalLink: String
  id: String
  internalLink: String
  message: String
  object_id: String
  sender: String
  subjectMetadataPointer: String
  subject_id: String
  tag: String
  timestamp: Int
}

"""
columns and relationships of "FeedItemEmbed"
"""
type FeedItemEmbed {
  content: String
  db_write_timestamp: timestamp
  id: String!
  key: String
  pointer: String
  protocol: numeric
}

"""
Boolean expression to filter rows from the table "FeedItemEmbed". All fields are combined with a logical 'AND'.
"""
input FeedItemEmbed_bool_exp {
  _and: [FeedItemEmbed_bool_exp!]
  _not: FeedItemEmbed_bool_exp
  _or: [FeedItemEmbed_bool_exp!]
  content: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  key: String_comparison_exp
  pointer: String_comparison_exp
  protocol: numeric_comparison_exp
}

"""Ordering options when selecting data from "FeedItemEmbed"."""
input FeedItemEmbed_order_by {
  content: order_by
  db_write_timestamp: order_by
  id: order_by
  key: order_by
  pointer: order_by
  protocol: order_by
}

"""
select columns of table "FeedItemEmbed"
"""
enum FeedItemEmbed_select_column {
  """column name"""
  content
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  key
  """column name"""
  pointer
  """column name"""
  protocol
}

"""
Streaming cursor of the table "FeedItemEmbed"
"""
input FeedItemEmbed_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: FeedItemEmbed_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input FeedItemEmbed_stream_cursor_value_input {
  content: String
  db_write_timestamp: timestamp
  id: String
  key: String
  pointer: String
  protocol: numeric
}

"""
columns and relationships of "FeedItemEntity"
"""
type FeedItemEntity {
  db_write_timestamp: timestamp
  entityType: String!
  id: String!
  name: String!
}

"""
Boolean expression to filter rows from the table "FeedItemEntity". All fields are combined with a logical 'AND'.
"""
input FeedItemEntity_bool_exp {
  _and: [FeedItemEntity_bool_exp!]
  _not: FeedItemEntity_bool_exp
  _or: [FeedItemEntity_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  entityType: String_comparison_exp
  id: String_comparison_exp
  name: String_comparison_exp
}

"""Ordering options when selecting data from "FeedItemEntity"."""
input FeedItemEntity_order_by {
  db_write_timestamp: order_by
  entityType: order_by
  id: order_by
  name: order_by
}

"""
select columns of table "FeedItemEntity"
"""
enum FeedItemEntity_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  entityType
  """column name"""
  id
  """column name"""
  name
}

"""
Streaming cursor of the table "FeedItemEntity"
"""
input FeedItemEntity_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: FeedItemEntity_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input FeedItemEntity_stream_cursor_value_input {
  db_write_timestamp: timestamp
  entityType: String
  id: String
  name: String
}

"""
columns and relationships of "GMInitParams"
"""
type GMInitParams {
  db_write_timestamp: timestamp
  gameFacilitatorId: numeric
  gmRootAccount: String
  id: String!
}

"""
Boolean expression to filter rows from the table "GMInitParams". All fields are combined with a logical 'AND'.
"""
input GMInitParams_bool_exp {
  _and: [GMInitParams_bool_exp!]
  _not: GMInitParams_bool_exp
  _or: [GMInitParams_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  gameFacilitatorId: numeric_comparison_exp
  gmRootAccount: String_comparison_exp
  id: String_comparison_exp
}

"""Ordering options when selecting data from "GMInitParams"."""
input GMInitParams_order_by {
  db_write_timestamp: order_by
  gameFacilitatorId: order_by
  gmRootAccount: order_by
  id: order_by
}

"""
select columns of table "GMInitParams"
"""
enum GMInitParams_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  gameFacilitatorId
  """column name"""
  gmRootAccount
  """column name"""
  id
}

"""
Streaming cursor of the table "GMInitParams"
"""
input GMInitParams_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: GMInitParams_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input GMInitParams_stream_cursor_value_input {
  db_write_timestamp: timestamp
  gameFacilitatorId: numeric
  gmRootAccount: String
  id: String
}

"""
columns and relationships of "GameManager"
"""
type GameManager {
  chainId: Int!
  createdAt: Int!
  """An object relationship"""
  currentRound: GameRound
  currentRoundNumber: numeric!
  currentRound_id: String
  db_write_timestamp: timestamp
  gameFacilitatorId: numeric
  """An array relationship"""
  gameRounds(
    """distinct select on columns"""
    distinct_on: [GameRound_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GameRound_order_by!]
    """filter the rows returned"""
    where: GameRound_bool_exp
  ): [GameRound!]!
  gmRootAccount: String
  id: String!
  initData: String!
  poolFunds: numeric
  poolId: numeric!
  poolMetadataPointer: String!
  poolMetadataProtocol: numeric!
  profileId: String!
  profileMetadataPointer: String!
  profileMetadataProtocol: numeric!
  """An object relationship"""
  template: GameManagerTemplate
  template_id: String!
  tokenAddress: String!
}

"""
columns and relationships of "GameManagerFactory"
"""
type GameManagerFactory {
  chainId: Int!
  createdAt: Int!
  db_write_timestamp: timestamp
  id: String!
  rootAccount: String!
}

"""
Boolean expression to filter rows from the table "GameManagerFactory". All fields are combined with a logical 'AND'.
"""
input GameManagerFactory_bool_exp {
  _and: [GameManagerFactory_bool_exp!]
  _not: GameManagerFactory_bool_exp
  _or: [GameManagerFactory_bool_exp!]
  chainId: Int_comparison_exp
  createdAt: Int_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  rootAccount: String_comparison_exp
}

"""Ordering options when selecting data from "GameManagerFactory"."""
input GameManagerFactory_order_by {
  chainId: order_by
  createdAt: order_by
  db_write_timestamp: order_by
  id: order_by
  rootAccount: order_by
}

"""
select columns of table "GameManagerFactory"
"""
enum GameManagerFactory_select_column {
  """column name"""
  chainId
  """column name"""
  createdAt
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  rootAccount
}

"""
Streaming cursor of the table "GameManagerFactory"
"""
input GameManagerFactory_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: GameManagerFactory_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input GameManagerFactory_stream_cursor_value_input {
  chainId: Int
  createdAt: Int
  db_write_timestamp: timestamp
  id: String
  rootAccount: String
}

"""
columns and relationships of "GameManagerTemplate"
"""
type GameManagerTemplate {
  address: String!
  chainId: Int!
  createdAt: Int!
  db_write_timestamp: timestamp
  id: String!
  name: String!
}

"""
Boolean expression to filter rows from the table "GameManagerTemplate". All fields are combined with a logical 'AND'.
"""
input GameManagerTemplate_bool_exp {
  _and: [GameManagerTemplate_bool_exp!]
  _not: GameManagerTemplate_bool_exp
  _or: [GameManagerTemplate_bool_exp!]
  address: String_comparison_exp
  chainId: Int_comparison_exp
  createdAt: Int_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  name: String_comparison_exp
}

"""Ordering options when selecting data from "GameManagerTemplate"."""
input GameManagerTemplate_order_by {
  address: order_by
  chainId: order_by
  createdAt: order_by
  db_write_timestamp: order_by
  id: order_by
  name: order_by
}

"""
select columns of table "GameManagerTemplate"
"""
enum GameManagerTemplate_select_column {
  """column name"""
  address
  """column name"""
  chainId
  """column name"""
  createdAt
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  name
}

"""
Streaming cursor of the table "GameManagerTemplate"
"""
input GameManagerTemplate_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: GameManagerTemplate_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input GameManagerTemplate_stream_cursor_value_input {
  address: String
  chainId: Int
  createdAt: Int
  db_write_timestamp: timestamp
  id: String
  name: String
}

"""
Boolean expression to filter rows from the table "GameManager". All fields are combined with a logical 'AND'.
"""
input GameManager_bool_exp {
  _and: [GameManager_bool_exp!]
  _not: GameManager_bool_exp
  _or: [GameManager_bool_exp!]
  chainId: Int_comparison_exp
  createdAt: Int_comparison_exp
  currentRound: GameRound_bool_exp
  currentRoundNumber: numeric_comparison_exp
  currentRound_id: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  gameFacilitatorId: numeric_comparison_exp
  gameRounds: GameRound_bool_exp
  gmRootAccount: String_comparison_exp
  id: String_comparison_exp
  initData: String_comparison_exp
  poolFunds: numeric_comparison_exp
  poolId: numeric_comparison_exp
  poolMetadataPointer: String_comparison_exp
  poolMetadataProtocol: numeric_comparison_exp
  profileId: String_comparison_exp
  profileMetadataPointer: String_comparison_exp
  profileMetadataProtocol: numeric_comparison_exp
  template: GameManagerTemplate_bool_exp
  template_id: String_comparison_exp
  tokenAddress: String_comparison_exp
}

"""Ordering options when selecting data from "GameManager"."""
input GameManager_order_by {
  chainId: order_by
  createdAt: order_by
  currentRound: GameRound_order_by
  currentRoundNumber: order_by
  currentRound_id: order_by
  db_write_timestamp: order_by
  gameFacilitatorId: order_by
  gameRounds_aggregate: GameRound_aggregate_order_by
  gmRootAccount: order_by
  id: order_by
  initData: order_by
  poolFunds: order_by
  poolId: order_by
  poolMetadataPointer: order_by
  poolMetadataProtocol: order_by
  profileId: order_by
  profileMetadataPointer: order_by
  profileMetadataProtocol: order_by
  template: GameManagerTemplate_order_by
  template_id: order_by
  tokenAddress: order_by
}

"""
select columns of table "GameManager"
"""
enum GameManager_select_column {
  """column name"""
  chainId
  """column name"""
  createdAt
  """column name"""
  currentRoundNumber
  """column name"""
  currentRound_id
  """column name"""
  db_write_timestamp
  """column name"""
  gameFacilitatorId
  """column name"""
  gmRootAccount
  """column name"""
  id
  """column name"""
  initData
  """column name"""
  poolFunds
  """column name"""
  poolId
  """column name"""
  poolMetadataPointer
  """column name"""
  poolMetadataProtocol
  """column name"""
  profileId
  """column name"""
  profileMetadataPointer
  """column name"""
  profileMetadataProtocol
  """column name"""
  template_id
  """column name"""
  tokenAddress
}

"""
Streaming cursor of the table "GameManager"
"""
input GameManager_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: GameManager_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input GameManager_stream_cursor_value_input {
  chainId: Int
  createdAt: Int
  currentRoundNumber: numeric
  currentRound_id: String
  db_write_timestamp: timestamp
  gameFacilitatorId: numeric
  gmRootAccount: String
  id: String
  initData: String
  poolFunds: numeric
  poolId: numeric
  poolMetadataPointer: String
  poolMetadataProtocol: numeric
  profileId: String
  profileMetadataPointer: String
  profileMetadataProtocol: numeric
  template_id: String
  tokenAddress: String
}

"""
columns and relationships of "GameRound"
"""
type GameRound {
  db_write_timestamp: timestamp
  endTime: numeric!
  """An object relationship"""
  gameManager: GameManager
  gameManager_id: String!
  gameStatus: Int!
  id: String!
  isGameActive: Boolean!
  realEndTime: Int
  realStartTime: Int
  """An array relationship"""
  ships(
    """distinct select on columns"""
    distinct_on: [GrantShip_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GrantShip_order_by!]
    """filter the rows returned"""
    where: GrantShip_bool_exp
  ): [GrantShip!]!
  startTime: numeric!
  totalAllocatedAmount: numeric!
  totalDistributedAmount: numeric!
  totalRoundAmount: numeric!
}

"""
order by aggregate values of table "GameRound"
"""
input GameRound_aggregate_order_by {
  avg: GameRound_avg_order_by
  count: order_by
  max: GameRound_max_order_by
  min: GameRound_min_order_by
  stddev: GameRound_stddev_order_by
  stddev_pop: GameRound_stddev_pop_order_by
  stddev_samp: GameRound_stddev_samp_order_by
  sum: GameRound_sum_order_by
  var_pop: GameRound_var_pop_order_by
  var_samp: GameRound_var_samp_order_by
  variance: GameRound_variance_order_by
}

"""
order by avg() on columns of table "GameRound"
"""
input GameRound_avg_order_by {
  endTime: order_by
  gameStatus: order_by
  realEndTime: order_by
  realStartTime: order_by
  startTime: order_by
  totalAllocatedAmount: order_by
  totalDistributedAmount: order_by
  totalRoundAmount: order_by
}

"""
Boolean expression to filter rows from the table "GameRound". All fields are combined with a logical 'AND'.
"""
input GameRound_bool_exp {
  _and: [GameRound_bool_exp!]
  _not: GameRound_bool_exp
  _or: [GameRound_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  endTime: numeric_comparison_exp
  gameManager: GameManager_bool_exp
  gameManager_id: String_comparison_exp
  gameStatus: Int_comparison_exp
  id: String_comparison_exp
  isGameActive: Boolean_comparison_exp
  realEndTime: Int_comparison_exp
  realStartTime: Int_comparison_exp
  ships: GrantShip_bool_exp
  startTime: numeric_comparison_exp
  totalAllocatedAmount: numeric_comparison_exp
  totalDistributedAmount: numeric_comparison_exp
  totalRoundAmount: numeric_comparison_exp
}

"""
order by max() on columns of table "GameRound"
"""
input GameRound_max_order_by {
  db_write_timestamp: order_by
  endTime: order_by
  gameManager_id: order_by
  gameStatus: order_by
  id: order_by
  realEndTime: order_by
  realStartTime: order_by
  startTime: order_by
  totalAllocatedAmount: order_by
  totalDistributedAmount: order_by
  totalRoundAmount: order_by
}

"""
order by min() on columns of table "GameRound"
"""
input GameRound_min_order_by {
  db_write_timestamp: order_by
  endTime: order_by
  gameManager_id: order_by
  gameStatus: order_by
  id: order_by
  realEndTime: order_by
  realStartTime: order_by
  startTime: order_by
  totalAllocatedAmount: order_by
  totalDistributedAmount: order_by
  totalRoundAmount: order_by
}

"""Ordering options when selecting data from "GameRound"."""
input GameRound_order_by {
  db_write_timestamp: order_by
  endTime: order_by
  gameManager: GameManager_order_by
  gameManager_id: order_by
  gameStatus: order_by
  id: order_by
  isGameActive: order_by
  realEndTime: order_by
  realStartTime: order_by
  ships_aggregate: GrantShip_aggregate_order_by
  startTime: order_by
  totalAllocatedAmount: order_by
  totalDistributedAmount: order_by
  totalRoundAmount: order_by
}

"""
select columns of table "GameRound"
"""
enum GameRound_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  endTime
  """column name"""
  gameManager_id
  """column name"""
  gameStatus
  """column name"""
  id
  """column name"""
  isGameActive
  """column name"""
  realEndTime
  """column name"""
  realStartTime
  """column name"""
  startTime
  """column name"""
  totalAllocatedAmount
  """column name"""
  totalDistributedAmount
  """column name"""
  totalRoundAmount
}

"""
order by stddev() on columns of table "GameRound"
"""
input GameRound_stddev_order_by {
  endTime: order_by
  gameStatus: order_by
  realEndTime: order_by
  realStartTime: order_by
  startTime: order_by
  totalAllocatedAmount: order_by
  totalDistributedAmount: order_by
  totalRoundAmount: order_by
}

"""
order by stddev_pop() on columns of table "GameRound"
"""
input GameRound_stddev_pop_order_by {
  endTime: order_by
  gameStatus: order_by
  realEndTime: order_by
  realStartTime: order_by
  startTime: order_by
  totalAllocatedAmount: order_by
  totalDistributedAmount: order_by
  totalRoundAmount: order_by
}

"""
order by stddev_samp() on columns of table "GameRound"
"""
input GameRound_stddev_samp_order_by {
  endTime: order_by
  gameStatus: order_by
  realEndTime: order_by
  realStartTime: order_by
  startTime: order_by
  totalAllocatedAmount: order_by
  totalDistributedAmount: order_by
  totalRoundAmount: order_by
}

"""
Streaming cursor of the table "GameRound"
"""
input GameRound_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: GameRound_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input GameRound_stream_cursor_value_input {
  db_write_timestamp: timestamp
  endTime: numeric
  gameManager_id: String
  gameStatus: Int
  id: String
  isGameActive: Boolean
  realEndTime: Int
  realStartTime: Int
  startTime: numeric
  totalAllocatedAmount: numeric
  totalDistributedAmount: numeric
  totalRoundAmount: numeric
}

"""
order by sum() on columns of table "GameRound"
"""
input GameRound_sum_order_by {
  endTime: order_by
  gameStatus: order_by
  realEndTime: order_by
  realStartTime: order_by
  startTime: order_by
  totalAllocatedAmount: order_by
  totalDistributedAmount: order_by
  totalRoundAmount: order_by
}

"""
order by var_pop() on columns of table "GameRound"
"""
input GameRound_var_pop_order_by {
  endTime: order_by
  gameStatus: order_by
  realEndTime: order_by
  realStartTime: order_by
  startTime: order_by
  totalAllocatedAmount: order_by
  totalDistributedAmount: order_by
  totalRoundAmount: order_by
}

"""
order by var_samp() on columns of table "GameRound"
"""
input GameRound_var_samp_order_by {
  endTime: order_by
  gameStatus: order_by
  realEndTime: order_by
  realStartTime: order_by
  startTime: order_by
  totalAllocatedAmount: order_by
  totalDistributedAmount: order_by
  totalRoundAmount: order_by
}

"""
order by variance() on columns of table "GameRound"
"""
input GameRound_variance_order_by {
  endTime: order_by
  gameStatus: order_by
  realEndTime: order_by
  realStartTime: order_by
  startTime: order_by
  totalAllocatedAmount: order_by
  totalDistributedAmount: order_by
  totalRoundAmount: order_by
}

"""
columns and relationships of "Grant"
"""
type Grant {
  db_write_timestamp: timestamp
  id: String!
  """An object relationship"""
  project: Project
  project_id: String!
  """An object relationship"""
  ship: GrantShip
  ship_id: String!
}

"""
columns and relationships of "GrantShip"
"""
type GrantShip {
  """An object relationship"""
  alloProfileMembers: ProfileMemberGroup
  alloProfileMembers_id: String
  anchor: String!
  """An object relationship"""
  applicationReviewReason: RawMetadata
  applicationReviewReason_id: String
  applicationSubmittedTime: Int
  approvedTime: Int
  balance: numeric!
  chainId: Int!
  db_write_timestamp: timestamp
  """An object relationship"""
  gameManager: GameManager
  gameManager_id: String
  """An object relationship"""
  gameRound: GameRound
  gameRound_id: String
  """An array relationship"""
  grants(
    """distinct select on columns"""
    distinct_on: [Grant_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Grant_order_by!]
    """filter the rows returned"""
    where: Grant_bool_exp
  ): [Grant!]!
  hasEditedProfile: Boolean!
  hasSubmittedApplication: Boolean
  hatId: String
  id: String!
  isAllocated: Boolean
  isApproved: Boolean
  isAwaitingApproval: Boolean
  isDistributed: Boolean
  isRejected: Boolean
  name: String!
  nonce: numeric!
  owner: String!
  pastNames: _text!
  pastProfileIds: _text!
  poolActive: Boolean
  poolFunded: Boolean!
  poolId: numeric
  profileId: String!
  """An object relationship"""
  profileMetadata: RawMetadata
  profileMetadata_id: String!
  rejectedTime: Int
  shipAllocation: numeric!
  shipApplicationBytesData: String
  shipContractAddress: String
  shipLaunched: Boolean
  status: Int!
  totalAllocated: numeric!
  totalAvailableFunds: numeric!
  totalDistributed: numeric!
  totalRoundAmount: numeric!
}

"""
order by aggregate values of table "GrantShip"
"""
input GrantShip_aggregate_order_by {
  avg: GrantShip_avg_order_by
  count: order_by
  max: GrantShip_max_order_by
  min: GrantShip_min_order_by
  stddev: GrantShip_stddev_order_by
  stddev_pop: GrantShip_stddev_pop_order_by
  stddev_samp: GrantShip_stddev_samp_order_by
  sum: GrantShip_sum_order_by
  var_pop: GrantShip_var_pop_order_by
  var_samp: GrantShip_var_samp_order_by
  variance: GrantShip_variance_order_by
}

"""
order by avg() on columns of table "GrantShip"
"""
input GrantShip_avg_order_by {
  applicationSubmittedTime: order_by
  approvedTime: order_by
  balance: order_by
  chainId: order_by
  nonce: order_by
  poolId: order_by
  rejectedTime: order_by
  shipAllocation: order_by
  status: order_by
  totalAllocated: order_by
  totalAvailableFunds: order_by
  totalDistributed: order_by
  totalRoundAmount: order_by
}

"""
Boolean expression to filter rows from the table "GrantShip". All fields are combined with a logical 'AND'.
"""
input GrantShip_bool_exp {
  _and: [GrantShip_bool_exp!]
  _not: GrantShip_bool_exp
  _or: [GrantShip_bool_exp!]
  alloProfileMembers: ProfileMemberGroup_bool_exp
  alloProfileMembers_id: String_comparison_exp
  anchor: String_comparison_exp
  applicationReviewReason: RawMetadata_bool_exp
  applicationReviewReason_id: String_comparison_exp
  applicationSubmittedTime: Int_comparison_exp
  approvedTime: Int_comparison_exp
  balance: numeric_comparison_exp
  chainId: Int_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  gameManager: GameManager_bool_exp
  gameManager_id: String_comparison_exp
  gameRound: GameRound_bool_exp
  gameRound_id: String_comparison_exp
  grants: Grant_bool_exp
  hasEditedProfile: Boolean_comparison_exp
  hasSubmittedApplication: Boolean_comparison_exp
  hatId: String_comparison_exp
  id: String_comparison_exp
  isAllocated: Boolean_comparison_exp
  isApproved: Boolean_comparison_exp
  isAwaitingApproval: Boolean_comparison_exp
  isDistributed: Boolean_comparison_exp
  isRejected: Boolean_comparison_exp
  name: String_comparison_exp
  nonce: numeric_comparison_exp
  owner: String_comparison_exp
  pastNames: _text_comparison_exp
  pastProfileIds: _text_comparison_exp
  poolActive: Boolean_comparison_exp
  poolFunded: Boolean_comparison_exp
  poolId: numeric_comparison_exp
  profileId: String_comparison_exp
  profileMetadata: RawMetadata_bool_exp
  profileMetadata_id: String_comparison_exp
  rejectedTime: Int_comparison_exp
  shipAllocation: numeric_comparison_exp
  shipApplicationBytesData: String_comparison_exp
  shipContractAddress: String_comparison_exp
  shipLaunched: Boolean_comparison_exp
  status: Int_comparison_exp
  totalAllocated: numeric_comparison_exp
  totalAvailableFunds: numeric_comparison_exp
  totalDistributed: numeric_comparison_exp
  totalRoundAmount: numeric_comparison_exp
}

"""
order by max() on columns of table "GrantShip"
"""
input GrantShip_max_order_by {
  alloProfileMembers_id: order_by
  anchor: order_by
  applicationReviewReason_id: order_by
  applicationSubmittedTime: order_by
  approvedTime: order_by
  balance: order_by
  chainId: order_by
  db_write_timestamp: order_by
  gameManager_id: order_by
  gameRound_id: order_by
  hatId: order_by
  id: order_by
  name: order_by
  nonce: order_by
  owner: order_by
  poolId: order_by
  profileId: order_by
  profileMetadata_id: order_by
  rejectedTime: order_by
  shipAllocation: order_by
  shipApplicationBytesData: order_by
  shipContractAddress: order_by
  status: order_by
  totalAllocated: order_by
  totalAvailableFunds: order_by
  totalDistributed: order_by
  totalRoundAmount: order_by
}

"""
order by min() on columns of table "GrantShip"
"""
input GrantShip_min_order_by {
  alloProfileMembers_id: order_by
  anchor: order_by
  applicationReviewReason_id: order_by
  applicationSubmittedTime: order_by
  approvedTime: order_by
  balance: order_by
  chainId: order_by
  db_write_timestamp: order_by
  gameManager_id: order_by
  gameRound_id: order_by
  hatId: order_by
  id: order_by
  name: order_by
  nonce: order_by
  owner: order_by
  poolId: order_by
  profileId: order_by
  profileMetadata_id: order_by
  rejectedTime: order_by
  shipAllocation: order_by
  shipApplicationBytesData: order_by
  shipContractAddress: order_by
  status: order_by
  totalAllocated: order_by
  totalAvailableFunds: order_by
  totalDistributed: order_by
  totalRoundAmount: order_by
}

"""Ordering options when selecting data from "GrantShip"."""
input GrantShip_order_by {
  alloProfileMembers: ProfileMemberGroup_order_by
  alloProfileMembers_id: order_by
  anchor: order_by
  applicationReviewReason: RawMetadata_order_by
  applicationReviewReason_id: order_by
  applicationSubmittedTime: order_by
  approvedTime: order_by
  balance: order_by
  chainId: order_by
  db_write_timestamp: order_by
  gameManager: GameManager_order_by
  gameManager_id: order_by
  gameRound: GameRound_order_by
  gameRound_id: order_by
  grants_aggregate: Grant_aggregate_order_by
  hasEditedProfile: order_by
  hasSubmittedApplication: order_by
  hatId: order_by
  id: order_by
  isAllocated: order_by
  isApproved: order_by
  isAwaitingApproval: order_by
  isDistributed: order_by
  isRejected: order_by
  name: order_by
  nonce: order_by
  owner: order_by
  pastNames: order_by
  pastProfileIds: order_by
  poolActive: order_by
  poolFunded: order_by
  poolId: order_by
  profileId: order_by
  profileMetadata: RawMetadata_order_by
  profileMetadata_id: order_by
  rejectedTime: order_by
  shipAllocation: order_by
  shipApplicationBytesData: order_by
  shipContractAddress: order_by
  shipLaunched: order_by
  status: order_by
  totalAllocated: order_by
  totalAvailableFunds: order_by
  totalDistributed: order_by
  totalRoundAmount: order_by
}

"""
select columns of table "GrantShip"
"""
enum GrantShip_select_column {
  """column name"""
  alloProfileMembers_id
  """column name"""
  anchor
  """column name"""
  applicationReviewReason_id
  """column name"""
  applicationSubmittedTime
  """column name"""
  approvedTime
  """column name"""
  balance
  """column name"""
  chainId
  """column name"""
  db_write_timestamp
  """column name"""
  gameManager_id
  """column name"""
  gameRound_id
  """column name"""
  hasEditedProfile
  """column name"""
  hasSubmittedApplication
  """column name"""
  hatId
  """column name"""
  id
  """column name"""
  isAllocated
  """column name"""
  isApproved
  """column name"""
  isAwaitingApproval
  """column name"""
  isDistributed
  """column name"""
  isRejected
  """column name"""
  name
  """column name"""
  nonce
  """column name"""
  owner
  """column name"""
  pastNames
  """column name"""
  pastProfileIds
  """column name"""
  poolActive
  """column name"""
  poolFunded
  """column name"""
  poolId
  """column name"""
  profileId
  """column name"""
  profileMetadata_id
  """column name"""
  rejectedTime
  """column name"""
  shipAllocation
  """column name"""
  shipApplicationBytesData
  """column name"""
  shipContractAddress
  """column name"""
  shipLaunched
  """column name"""
  status
  """column name"""
  totalAllocated
  """column name"""
  totalAvailableFunds
  """column name"""
  totalDistributed
  """column name"""
  totalRoundAmount
}

"""
order by stddev() on columns of table "GrantShip"
"""
input GrantShip_stddev_order_by {
  applicationSubmittedTime: order_by
  approvedTime: order_by
  balance: order_by
  chainId: order_by
  nonce: order_by
  poolId: order_by
  rejectedTime: order_by
  shipAllocation: order_by
  status: order_by
  totalAllocated: order_by
  totalAvailableFunds: order_by
  totalDistributed: order_by
  totalRoundAmount: order_by
}

"""
order by stddev_pop() on columns of table "GrantShip"
"""
input GrantShip_stddev_pop_order_by {
  applicationSubmittedTime: order_by
  approvedTime: order_by
  balance: order_by
  chainId: order_by
  nonce: order_by
  poolId: order_by
  rejectedTime: order_by
  shipAllocation: order_by
  status: order_by
  totalAllocated: order_by
  totalAvailableFunds: order_by
  totalDistributed: order_by
  totalRoundAmount: order_by
}

"""
order by stddev_samp() on columns of table "GrantShip"
"""
input GrantShip_stddev_samp_order_by {
  applicationSubmittedTime: order_by
  approvedTime: order_by
  balance: order_by
  chainId: order_by
  nonce: order_by
  poolId: order_by
  rejectedTime: order_by
  shipAllocation: order_by
  status: order_by
  totalAllocated: order_by
  totalAvailableFunds: order_by
  totalDistributed: order_by
  totalRoundAmount: order_by
}

"""
Streaming cursor of the table "GrantShip"
"""
input GrantShip_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: GrantShip_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input GrantShip_stream_cursor_value_input {
  alloProfileMembers_id: String
  anchor: String
  applicationReviewReason_id: String
  applicationSubmittedTime: Int
  approvedTime: Int
  balance: numeric
  chainId: Int
  db_write_timestamp: timestamp
  gameManager_id: String
  gameRound_id: String
  hasEditedProfile: Boolean
  hasSubmittedApplication: Boolean
  hatId: String
  id: String
  isAllocated: Boolean
  isApproved: Boolean
  isAwaitingApproval: Boolean
  isDistributed: Boolean
  isRejected: Boolean
  name: String
  nonce: numeric
  owner: String
  pastNames: _text
  pastProfileIds: _text
  poolActive: Boolean
  poolFunded: Boolean
  poolId: numeric
  profileId: String
  profileMetadata_id: String
  rejectedTime: Int
  shipAllocation: numeric
  shipApplicationBytesData: String
  shipContractAddress: String
  shipLaunched: Boolean
  status: Int
  totalAllocated: numeric
  totalAvailableFunds: numeric
  totalDistributed: numeric
  totalRoundAmount: numeric
}

"""
order by sum() on columns of table "GrantShip"
"""
input GrantShip_sum_order_by {
  applicationSubmittedTime: order_by
  approvedTime: order_by
  balance: order_by
  chainId: order_by
  nonce: order_by
  poolId: order_by
  rejectedTime: order_by
  shipAllocation: order_by
  status: order_by
  totalAllocated: order_by
  totalAvailableFunds: order_by
  totalDistributed: order_by
  totalRoundAmount: order_by
}

"""
order by var_pop() on columns of table "GrantShip"
"""
input GrantShip_var_pop_order_by {
  applicationSubmittedTime: order_by
  approvedTime: order_by
  balance: order_by
  chainId: order_by
  nonce: order_by
  poolId: order_by
  rejectedTime: order_by
  shipAllocation: order_by
  status: order_by
  totalAllocated: order_by
  totalAvailableFunds: order_by
  totalDistributed: order_by
  totalRoundAmount: order_by
}

"""
order by var_samp() on columns of table "GrantShip"
"""
input GrantShip_var_samp_order_by {
  applicationSubmittedTime: order_by
  approvedTime: order_by
  balance: order_by
  chainId: order_by
  nonce: order_by
  poolId: order_by
  rejectedTime: order_by
  shipAllocation: order_by
  status: order_by
  totalAllocated: order_by
  totalAvailableFunds: order_by
  totalDistributed: order_by
  totalRoundAmount: order_by
}

"""
order by variance() on columns of table "GrantShip"
"""
input GrantShip_variance_order_by {
  applicationSubmittedTime: order_by
  approvedTime: order_by
  balance: order_by
  chainId: order_by
  nonce: order_by
  poolId: order_by
  rejectedTime: order_by
  shipAllocation: order_by
  status: order_by
  totalAllocated: order_by
  totalAvailableFunds: order_by
  totalDistributed: order_by
  totalRoundAmount: order_by
}

"""
order by aggregate values of table "Grant"
"""
input Grant_aggregate_order_by {
  count: order_by
  max: Grant_max_order_by
  min: Grant_min_order_by
}

"""
Boolean expression to filter rows from the table "Grant". All fields are combined with a logical 'AND'.
"""
input Grant_bool_exp {
  _and: [Grant_bool_exp!]
  _not: Grant_bool_exp
  _or: [Grant_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  project: Project_bool_exp
  project_id: String_comparison_exp
  ship: GrantShip_bool_exp
  ship_id: String_comparison_exp
}

"""
order by max() on columns of table "Grant"
"""
input Grant_max_order_by {
  db_write_timestamp: order_by
  id: order_by
  project_id: order_by
  ship_id: order_by
}

"""
order by min() on columns of table "Grant"
"""
input Grant_min_order_by {
  db_write_timestamp: order_by
  id: order_by
  project_id: order_by
  ship_id: order_by
}

"""Ordering options when selecting data from "Grant"."""
input Grant_order_by {
  db_write_timestamp: order_by
  id: order_by
  project: Project_order_by
  project_id: order_by
  ship: GrantShip_order_by
  ship_id: order_by
}

"""
select columns of table "Grant"
"""
enum Grant_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  project_id
  """column name"""
  ship_id
}

"""
Streaming cursor of the table "Grant"
"""
input Grant_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Grant_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Grant_stream_cursor_value_input {
  db_write_timestamp: timestamp
  id: String
  project_id: String
  ship_id: String
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "ProfileIdToAnchor"
"""
type ProfileIdToAnchor {
  anchor: String!
  db_write_timestamp: timestamp
  id: String!
  profileId: String!
}

"""
Boolean expression to filter rows from the table "ProfileIdToAnchor". All fields are combined with a logical 'AND'.
"""
input ProfileIdToAnchor_bool_exp {
  _and: [ProfileIdToAnchor_bool_exp!]
  _not: ProfileIdToAnchor_bool_exp
  _or: [ProfileIdToAnchor_bool_exp!]
  anchor: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  profileId: String_comparison_exp
}

"""Ordering options when selecting data from "ProfileIdToAnchor"."""
input ProfileIdToAnchor_order_by {
  anchor: order_by
  db_write_timestamp: order_by
  id: order_by
  profileId: order_by
}

"""
select columns of table "ProfileIdToAnchor"
"""
enum ProfileIdToAnchor_select_column {
  """column name"""
  anchor
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  profileId
}

"""
Streaming cursor of the table "ProfileIdToAnchor"
"""
input ProfileIdToAnchor_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ProfileIdToAnchor_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ProfileIdToAnchor_stream_cursor_value_input {
  anchor: String
  db_write_timestamp: timestamp
  id: String
  profileId: String
}

"""
columns and relationships of "ProfileMemberGroup"
"""
type ProfileMemberGroup {
  addresses: _text!
  db_write_timestamp: timestamp
  id: String!
  role: String!
}

"""
Boolean expression to filter rows from the table "ProfileMemberGroup". All fields are combined with a logical 'AND'.
"""
input ProfileMemberGroup_bool_exp {
  _and: [ProfileMemberGroup_bool_exp!]
  _not: ProfileMemberGroup_bool_exp
  _or: [ProfileMemberGroup_bool_exp!]
  addresses: _text_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  role: String_comparison_exp
}

"""Ordering options when selecting data from "ProfileMemberGroup"."""
input ProfileMemberGroup_order_by {
  addresses: order_by
  db_write_timestamp: order_by
  id: order_by
  role: order_by
}

"""
select columns of table "ProfileMemberGroup"
"""
enum ProfileMemberGroup_select_column {
  """column name"""
  addresses
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  role
}

"""
Streaming cursor of the table "ProfileMemberGroup"
"""
input ProfileMemberGroup_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ProfileMemberGroup_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ProfileMemberGroup_stream_cursor_value_input {
  addresses: _text
  db_write_timestamp: timestamp
  id: String
  role: String
}

"""
columns and relationships of "Project"
"""
type Project {
  anchor: String!
  chainId: Int!
  db_write_timestamp: timestamp
  """An array relationship"""
  grants(
    """distinct select on columns"""
    distinct_on: [Grant_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Grant_order_by!]
    """filter the rows returned"""
    where: Grant_bool_exp
  ): [Grant!]!
  hasEditedProfile: Boolean!
  id: String!
  """An object relationship"""
  members: ProfileMemberGroup
  members_id: String
  """An object relationship"""
  metadata: RawMetadata
  metadata_id: String!
  name: String!
  nonce: numeric!
  owner: String!
  pastNames: _text!
  pastProfileIds: _text!
  profileId: String!
  status: Int!
  totalAmountReceived: numeric!
}

"""
Boolean expression to filter rows from the table "Project". All fields are combined with a logical 'AND'.
"""
input Project_bool_exp {
  _and: [Project_bool_exp!]
  _not: Project_bool_exp
  _or: [Project_bool_exp!]
  anchor: String_comparison_exp
  chainId: Int_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  grants: Grant_bool_exp
  hasEditedProfile: Boolean_comparison_exp
  id: String_comparison_exp
  members: ProfileMemberGroup_bool_exp
  members_id: String_comparison_exp
  metadata: RawMetadata_bool_exp
  metadata_id: String_comparison_exp
  name: String_comparison_exp
  nonce: numeric_comparison_exp
  owner: String_comparison_exp
  pastNames: _text_comparison_exp
  pastProfileIds: _text_comparison_exp
  profileId: String_comparison_exp
  status: Int_comparison_exp
  totalAmountReceived: numeric_comparison_exp
}

"""Ordering options when selecting data from "Project"."""
input Project_order_by {
  anchor: order_by
  chainId: order_by
  db_write_timestamp: order_by
  grants_aggregate: Grant_aggregate_order_by
  hasEditedProfile: order_by
  id: order_by
  members: ProfileMemberGroup_order_by
  members_id: order_by
  metadata: RawMetadata_order_by
  metadata_id: order_by
  name: order_by
  nonce: order_by
  owner: order_by
  pastNames: order_by
  pastProfileIds: order_by
  profileId: order_by
  status: order_by
  totalAmountReceived: order_by
}

"""
select columns of table "Project"
"""
enum Project_select_column {
  """column name"""
  anchor
  """column name"""
  chainId
  """column name"""
  db_write_timestamp
  """column name"""
  hasEditedProfile
  """column name"""
  id
  """column name"""
  members_id
  """column name"""
  metadata_id
  """column name"""
  name
  """column name"""
  nonce
  """column name"""
  owner
  """column name"""
  pastNames
  """column name"""
  pastProfileIds
  """column name"""
  profileId
  """column name"""
  status
  """column name"""
  totalAmountReceived
}

"""
Streaming cursor of the table "Project"
"""
input Project_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Project_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Project_stream_cursor_value_input {
  anchor: String
  chainId: Int
  db_write_timestamp: timestamp
  hasEditedProfile: Boolean
  id: String
  members_id: String
  metadata_id: String
  name: String
  nonce: numeric
  owner: String
  pastNames: _text
  pastProfileIds: _text
  profileId: String
  status: Int
  totalAmountReceived: numeric
}

"""
columns and relationships of "RawMetadata"
"""
type RawMetadata {
  db_write_timestamp: timestamp
  id: String!
  pointer: String!
  protocol: numeric!
}

"""
Boolean expression to filter rows from the table "RawMetadata". All fields are combined with a logical 'AND'.
"""
input RawMetadata_bool_exp {
  _and: [RawMetadata_bool_exp!]
  _not: RawMetadata_bool_exp
  _or: [RawMetadata_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  pointer: String_comparison_exp
  protocol: numeric_comparison_exp
}

"""Ordering options when selecting data from "RawMetadata"."""
input RawMetadata_order_by {
  db_write_timestamp: order_by
  id: order_by
  pointer: order_by
  protocol: order_by
}

"""
select columns of table "RawMetadata"
"""
enum RawMetadata_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  pointer
  """column name"""
  protocol
}

"""
Streaming cursor of the table "RawMetadata"
"""
input RawMetadata_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: RawMetadata_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input RawMetadata_stream_cursor_value_input {
  db_write_timestamp: timestamp
  id: String
  pointer: String
  protocol: numeric
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]
  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean
  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String
  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]
  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String
  """does the column NOT match the given pattern"""
  _nlike: String
  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String
  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String
  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String
  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "Transaction"
"""
type Transaction {
  blockNumber: numeric!
  db_write_timestamp: timestamp
  id: String!
  srcAddress: String!
  txHash: String!
}

"""
Boolean expression to filter rows from the table "Transaction". All fields are combined with a logical 'AND'.
"""
input Transaction_bool_exp {
  _and: [Transaction_bool_exp!]
  _not: Transaction_bool_exp
  _or: [Transaction_bool_exp!]
  blockNumber: numeric_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  srcAddress: String_comparison_exp
  txHash: String_comparison_exp
}

"""Ordering options when selecting data from "Transaction"."""
input Transaction_order_by {
  blockNumber: order_by
  db_write_timestamp: order_by
  id: order_by
  srcAddress: order_by
  txHash: order_by
}

"""
select columns of table "Transaction"
"""
enum Transaction_select_column {
  """column name"""
  blockNumber
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  srcAddress
  """column name"""
  txHash
}

"""
Streaming cursor of the table "Transaction"
"""
input Transaction_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Transaction_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Transaction_stream_cursor_value_input {
  blockNumber: numeric
  db_write_timestamp: timestamp
  id: String
  srcAddress: String
  txHash: String
}

"""
columns and relationships of "Update"
"""
type Update {
  """An object relationship"""
  content: RawMetadata
  contentSchema: Int!
  content_id: String!
  db_write_timestamp: timestamp
  """An object relationship"""
  domain: GameManager
  domain_id: String!
  entityAddress: String!
  id: String!
  postDecorator: Int!
  postedBy: String!
  posterRole: numeric!
  scope: Int!
  tag: String!
  timestamp: Int!
}

"""
Boolean expression to filter rows from the table "Update". All fields are combined with a logical 'AND'.
"""
input Update_bool_exp {
  _and: [Update_bool_exp!]
  _not: Update_bool_exp
  _or: [Update_bool_exp!]
  content: RawMetadata_bool_exp
  contentSchema: Int_comparison_exp
  content_id: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  domain: GameManager_bool_exp
  domain_id: String_comparison_exp
  entityAddress: String_comparison_exp
  id: String_comparison_exp
  postDecorator: Int_comparison_exp
  postedBy: String_comparison_exp
  posterRole: numeric_comparison_exp
  scope: Int_comparison_exp
  tag: String_comparison_exp
  timestamp: Int_comparison_exp
}

"""Ordering options when selecting data from "Update"."""
input Update_order_by {
  content: RawMetadata_order_by
  contentSchema: order_by
  content_id: order_by
  db_write_timestamp: order_by
  domain: GameManager_order_by
  domain_id: order_by
  entityAddress: order_by
  id: order_by
  postDecorator: order_by
  postedBy: order_by
  posterRole: order_by
  scope: order_by
  tag: order_by
  timestamp: order_by
}

"""
select columns of table "Update"
"""
enum Update_select_column {
  """column name"""
  contentSchema
  """column name"""
  content_id
  """column name"""
  db_write_timestamp
  """column name"""
  domain_id
  """column name"""
  entityAddress
  """column name"""
  id
  """column name"""
  postDecorator
  """column name"""
  postedBy
  """column name"""
  posterRole
  """column name"""
  scope
  """column name"""
  tag
  """column name"""
  timestamp
}

"""
Streaming cursor of the table "Update"
"""
input Update_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Update_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Update_stream_cursor_value_input {
  contentSchema: Int
  content_id: String
  db_write_timestamp: timestamp
  domain_id: String
  entityAddress: String
  id: String
  postDecorator: Int
  postedBy: String
  posterRole: numeric
  scope: Int
  tag: String
  timestamp: Int
}

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _text_comparison_exp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _is_null: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

"""
columns and relationships of "chain_metadata"
"""
type chain_metadata {
  block_height: Int!
  chain_id: Int!
  end_block: Int
  first_event_block_number: Int
  is_hyper_sync: Boolean!
  latest_fetched_block_number: Int!
  latest_processed_block: Int
  num_batches_fetched: Int!
  num_events_processed: Int
  start_block: Int!
  timestamp_caught_up_to_head_or_endblock: timestamptz
}

"""
Boolean expression to filter rows from the table "chain_metadata". All fields are combined with a logical 'AND'.
"""
input chain_metadata_bool_exp {
  _and: [chain_metadata_bool_exp!]
  _not: chain_metadata_bool_exp
  _or: [chain_metadata_bool_exp!]
  block_height: Int_comparison_exp
  chain_id: Int_comparison_exp
  end_block: Int_comparison_exp
  first_event_block_number: Int_comparison_exp
  is_hyper_sync: Boolean_comparison_exp
  latest_fetched_block_number: Int_comparison_exp
  latest_processed_block: Int_comparison_exp
  num_batches_fetched: Int_comparison_exp
  num_events_processed: Int_comparison_exp
  start_block: Int_comparison_exp
  timestamp_caught_up_to_head_or_endblock: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "chain_metadata"."""
input chain_metadata_order_by {
  block_height: order_by
  chain_id: order_by
  end_block: order_by
  first_event_block_number: order_by
  is_hyper_sync: order_by
  latest_fetched_block_number: order_by
  latest_processed_block: order_by
  num_batches_fetched: order_by
  num_events_processed: order_by
  start_block: order_by
  timestamp_caught_up_to_head_or_endblock: order_by
}

"""
select columns of table "chain_metadata"
"""
enum chain_metadata_select_column {
  """column name"""
  block_height
  """column name"""
  chain_id
  """column name"""
  end_block
  """column name"""
  first_event_block_number
  """column name"""
  is_hyper_sync
  """column name"""
  latest_fetched_block_number
  """column name"""
  latest_processed_block
  """column name"""
  num_batches_fetched
  """column name"""
  num_events_processed
  """column name"""
  start_block
  """column name"""
  timestamp_caught_up_to_head_or_endblock
}

"""
Streaming cursor of the table "chain_metadata"
"""
input chain_metadata_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: chain_metadata_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input chain_metadata_stream_cursor_value_input {
  block_height: Int
  chain_id: Int
  end_block: Int
  first_event_block_number: Int
  is_hyper_sync: Boolean
  latest_fetched_block_number: Int
  latest_processed_block: Int
  num_batches_fetched: Int
  num_events_processed: Int
  start_block: Int
  timestamp_caught_up_to_head_or_endblock: timestamptz
}

scalar contract_type

"""
Boolean expression to compare columns of type "contract_type". All fields are combined with logical 'AND'.
"""
input contract_type_comparison_exp {
  _eq: contract_type
  _gt: contract_type
  _gte: contract_type
  _in: [contract_type!]
  _is_null: Boolean
  _lt: contract_type
  _lte: contract_type
  _neq: contract_type
  _nin: [contract_type!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC
  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "dynamic_contract_registry"
"""
type dynamic_contract_registry {
  block_timestamp: Int!
  chain_id: Int!
  contract_address: String!
  contract_type: contract_type!
  event_id: numeric!
}

"""
Boolean expression to filter rows from the table "dynamic_contract_registry". All fields are combined with a logical 'AND'.
"""
input dynamic_contract_registry_bool_exp {
  _and: [dynamic_contract_registry_bool_exp!]
  _not: dynamic_contract_registry_bool_exp
  _or: [dynamic_contract_registry_bool_exp!]
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  contract_address: String_comparison_exp
  contract_type: contract_type_comparison_exp
  event_id: numeric_comparison_exp
}

"""Ordering options when selecting data from "dynamic_contract_registry"."""
input dynamic_contract_registry_order_by {
  block_timestamp: order_by
  chain_id: order_by
  contract_address: order_by
  contract_type: order_by
  event_id: order_by
}

"""
select columns of table "dynamic_contract_registry"
"""
enum dynamic_contract_registry_select_column {
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  contract_address
  """column name"""
  contract_type
  """column name"""
  event_id
}

"""
Streaming cursor of the table "dynamic_contract_registry"
"""
input dynamic_contract_registry_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: dynamic_contract_registry_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input dynamic_contract_registry_stream_cursor_value_input {
  block_timestamp: Int
  chain_id: Int
  contract_address: String
  contract_type: contract_type
  event_id: numeric
}

"""
columns and relationships of "entity_history"
"""
type entity_history {
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  entity_id: String!
  entity_type: entity_type!
  """An object relationship"""
  event: raw_events
  log_index: Int!
  params(
    """JSON select path"""
    path: String
  ): json
  previous_block_number: Int
  previous_block_timestamp: Int
  previous_chain_id: Int
  previous_log_index: Int
}

"""
order by aggregate values of table "entity_history"
"""
input entity_history_aggregate_order_by {
  avg: entity_history_avg_order_by
  count: order_by
  max: entity_history_max_order_by
  min: entity_history_min_order_by
  stddev: entity_history_stddev_order_by
  stddev_pop: entity_history_stddev_pop_order_by
  stddev_samp: entity_history_stddev_samp_order_by
  sum: entity_history_sum_order_by
  var_pop: entity_history_var_pop_order_by
  var_samp: entity_history_var_samp_order_by
  variance: entity_history_variance_order_by
}

"""
order by avg() on columns of table "entity_history"
"""
input entity_history_avg_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
Boolean expression to filter rows from the table "entity_history". All fields are combined with a logical 'AND'.
"""
input entity_history_bool_exp {
  _and: [entity_history_bool_exp!]
  _not: entity_history_bool_exp
  _or: [entity_history_bool_exp!]
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  entity_id: String_comparison_exp
  entity_type: entity_type_comparison_exp
  event: raw_events_bool_exp
  log_index: Int_comparison_exp
  params: json_comparison_exp
  previous_block_number: Int_comparison_exp
  previous_block_timestamp: Int_comparison_exp
  previous_chain_id: Int_comparison_exp
  previous_log_index: Int_comparison_exp
}

"""
columns and relationships of "entity_history_filter"
"""
type entity_history_filter {
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  entity_id: String!
  entity_type: entity_type!
  """An object relationship"""
  event: raw_events
  log_index: Int!
  new_val(
    """JSON select path"""
    path: String
  ): json
  old_val(
    """JSON select path"""
    path: String
  ): json
  previous_block_number: Int!
  previous_log_index: Int!
}

"""
Boolean expression to filter rows from the table "entity_history_filter". All fields are combined with a logical 'AND'.
"""
input entity_history_filter_bool_exp {
  _and: [entity_history_filter_bool_exp!]
  _not: entity_history_filter_bool_exp
  _or: [entity_history_filter_bool_exp!]
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  entity_id: String_comparison_exp
  entity_type: entity_type_comparison_exp
  event: raw_events_bool_exp
  log_index: Int_comparison_exp
  new_val: json_comparison_exp
  old_val: json_comparison_exp
  previous_block_number: Int_comparison_exp
  previous_log_index: Int_comparison_exp
}

"""Ordering options when selecting data from "entity_history_filter"."""
input entity_history_filter_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  event: raw_events_order_by
  log_index: order_by
  new_val: order_by
  old_val: order_by
  previous_block_number: order_by
  previous_log_index: order_by
}

"""
select columns of table "entity_history_filter"
"""
enum entity_history_filter_select_column {
  """column name"""
  block_number
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  entity_id
  """column name"""
  entity_type
  """column name"""
  log_index
  """column name"""
  new_val
  """column name"""
  old_val
  """column name"""
  previous_block_number
  """column name"""
  previous_log_index
}

"""
Streaming cursor of the table "entity_history_filter"
"""
input entity_history_filter_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: entity_history_filter_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input entity_history_filter_stream_cursor_value_input {
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  entity_id: String
  entity_type: entity_type
  log_index: Int
  new_val: json
  old_val: json
  previous_block_number: Int
  previous_log_index: Int
}

"""
order by max() on columns of table "entity_history"
"""
input entity_history_max_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by min() on columns of table "entity_history"
"""
input entity_history_min_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""Ordering options when selecting data from "entity_history"."""
input entity_history_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  event: raw_events_order_by
  log_index: order_by
  params: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
select columns of table "entity_history"
"""
enum entity_history_select_column {
  """column name"""
  block_number
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  entity_id
  """column name"""
  entity_type
  """column name"""
  log_index
  """column name"""
  params
  """column name"""
  previous_block_number
  """column name"""
  previous_block_timestamp
  """column name"""
  previous_chain_id
  """column name"""
  previous_log_index
}

"""
order by stddev() on columns of table "entity_history"
"""
input entity_history_stddev_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by stddev_pop() on columns of table "entity_history"
"""
input entity_history_stddev_pop_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by stddev_samp() on columns of table "entity_history"
"""
input entity_history_stddev_samp_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
Streaming cursor of the table "entity_history"
"""
input entity_history_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: entity_history_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input entity_history_stream_cursor_value_input {
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  entity_id: String
  entity_type: entity_type
  log_index: Int
  params: json
  previous_block_number: Int
  previous_block_timestamp: Int
  previous_chain_id: Int
  previous_log_index: Int
}

"""
order by sum() on columns of table "entity_history"
"""
input entity_history_sum_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by var_pop() on columns of table "entity_history"
"""
input entity_history_var_pop_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by var_samp() on columns of table "entity_history"
"""
input entity_history_var_samp_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by variance() on columns of table "entity_history"
"""
input entity_history_variance_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

scalar entity_type

"""
Boolean expression to compare columns of type "entity_type". All fields are combined with logical 'AND'.
"""
input entity_type_comparison_exp {
  _eq: entity_type
  _gt: entity_type
  _gte: entity_type
  _in: [entity_type!]
  _is_null: Boolean
  _lt: entity_type
  _lte: entity_type
  _neq: entity_type
  _nin: [entity_type!]
}

"""
columns and relationships of "event_sync_state"
"""
type event_sync_state {
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  log_index: Int!
  transaction_index: Int!
}

"""
Boolean expression to filter rows from the table "event_sync_state". All fields are combined with a logical 'AND'.
"""
input event_sync_state_bool_exp {
  _and: [event_sync_state_bool_exp!]
  _not: event_sync_state_bool_exp
  _or: [event_sync_state_bool_exp!]
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  log_index: Int_comparison_exp
  transaction_index: Int_comparison_exp
}

"""Ordering options when selecting data from "event_sync_state"."""
input event_sync_state_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  transaction_index: order_by
}

"""
select columns of table "event_sync_state"
"""
enum event_sync_state_select_column {
  """column name"""
  block_number
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  log_index
  """column name"""
  transaction_index
}

"""
Streaming cursor of the table "event_sync_state"
"""
input event_sync_state_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: event_sync_state_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input event_sync_state_stream_cursor_value_input {
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  log_index: Int
  transaction_index: Int
}

scalar event_type

"""
Boolean expression to compare columns of type "event_type". All fields are combined with logical 'AND'.
"""
input event_type_comparison_exp {
  _eq: event_type
  _gt: event_type
  _gte: event_type
  _in: [event_type!]
  _is_null: Boolean
  _lt: event_type
  _lte: event_type
  _neq: event_type
  _nin: [event_type!]
}

input get_entity_history_filter_args {
  end_block: Int
  end_chain_id: Int
  end_log_index: Int
  end_timestamp: Int
  start_block: Int
  start_chain_id: Int
  start_log_index: Int
  start_timestamp: Int
}

scalar json

"""
Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc
  """in ascending order, nulls first"""
  asc_nulls_first
  """in ascending order, nulls last"""
  asc_nulls_last
  """in descending order, nulls first"""
  desc
  """in descending order, nulls first"""
  desc_nulls_first
  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "persisted_state"
"""
type persisted_state {
  abi_files_hash: String!
  config_hash: String!
  envio_version: String!
  handler_files_hash: String!
  id: Int!
  schema_hash: String!
}

"""
Boolean expression to filter rows from the table "persisted_state". All fields are combined with a logical 'AND'.
"""
input persisted_state_bool_exp {
  _and: [persisted_state_bool_exp!]
  _not: persisted_state_bool_exp
  _or: [persisted_state_bool_exp!]
  abi_files_hash: String_comparison_exp
  config_hash: String_comparison_exp
  envio_version: String_comparison_exp
  handler_files_hash: String_comparison_exp
  id: Int_comparison_exp
  schema_hash: String_comparison_exp
}

"""Ordering options when selecting data from "persisted_state"."""
input persisted_state_order_by {
  abi_files_hash: order_by
  config_hash: order_by
  envio_version: order_by
  handler_files_hash: order_by
  id: order_by
  schema_hash: order_by
}

"""
select columns of table "persisted_state"
"""
enum persisted_state_select_column {
  """column name"""
  abi_files_hash
  """column name"""
  config_hash
  """column name"""
  envio_version
  """column name"""
  handler_files_hash
  """column name"""
  id
  """column name"""
  schema_hash
}

"""
Streaming cursor of the table "persisted_state"
"""
input persisted_state_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: persisted_state_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input persisted_state_stream_cursor_value_input {
  abi_files_hash: String
  config_hash: String
  envio_version: String
  handler_files_hash: String
  id: Int
  schema_hash: String
}

type query_root {
  """
  fetch data from the table: "FeedCard"
  """
  FeedCard(
    """distinct select on columns"""
    distinct_on: [FeedCard_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FeedCard_order_by!]
    """filter the rows returned"""
    where: FeedCard_bool_exp
  ): [FeedCard!]!
  """fetch data from the table: "FeedCard" using primary key columns"""
  FeedCard_by_pk(id: String!): FeedCard
  """
  fetch data from the table: "FeedItemEmbed"
  """
  FeedItemEmbed(
    """distinct select on columns"""
    distinct_on: [FeedItemEmbed_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FeedItemEmbed_order_by!]
    """filter the rows returned"""
    where: FeedItemEmbed_bool_exp
  ): [FeedItemEmbed!]!
  """fetch data from the table: "FeedItemEmbed" using primary key columns"""
  FeedItemEmbed_by_pk(id: String!): FeedItemEmbed
  """
  fetch data from the table: "FeedItemEntity"
  """
  FeedItemEntity(
    """distinct select on columns"""
    distinct_on: [FeedItemEntity_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FeedItemEntity_order_by!]
    """filter the rows returned"""
    where: FeedItemEntity_bool_exp
  ): [FeedItemEntity!]!
  """fetch data from the table: "FeedItemEntity" using primary key columns"""
  FeedItemEntity_by_pk(id: String!): FeedItemEntity
  """
  fetch data from the table: "GMInitParams"
  """
  GMInitParams(
    """distinct select on columns"""
    distinct_on: [GMInitParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GMInitParams_order_by!]
    """filter the rows returned"""
    where: GMInitParams_bool_exp
  ): [GMInitParams!]!
  """fetch data from the table: "GMInitParams" using primary key columns"""
  GMInitParams_by_pk(id: String!): GMInitParams
  """
  fetch data from the table: "GameManager"
  """
  GameManager(
    """distinct select on columns"""
    distinct_on: [GameManager_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GameManager_order_by!]
    """filter the rows returned"""
    where: GameManager_bool_exp
  ): [GameManager!]!
  """
  fetch data from the table: "GameManagerFactory"
  """
  GameManagerFactory(
    """distinct select on columns"""
    distinct_on: [GameManagerFactory_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GameManagerFactory_order_by!]
    """filter the rows returned"""
    where: GameManagerFactory_bool_exp
  ): [GameManagerFactory!]!
  """
  fetch data from the table: "GameManagerFactory" using primary key columns
  """
  GameManagerFactory_by_pk(id: String!): GameManagerFactory
  """
  fetch data from the table: "GameManagerTemplate"
  """
  GameManagerTemplate(
    """distinct select on columns"""
    distinct_on: [GameManagerTemplate_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GameManagerTemplate_order_by!]
    """filter the rows returned"""
    where: GameManagerTemplate_bool_exp
  ): [GameManagerTemplate!]!
  """
  fetch data from the table: "GameManagerTemplate" using primary key columns
  """
  GameManagerTemplate_by_pk(id: String!): GameManagerTemplate
  """fetch data from the table: "GameManager" using primary key columns"""
  GameManager_by_pk(id: String!): GameManager
  """
  fetch data from the table: "GameRound"
  """
  GameRound(
    """distinct select on columns"""
    distinct_on: [GameRound_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GameRound_order_by!]
    """filter the rows returned"""
    where: GameRound_bool_exp
  ): [GameRound!]!
  """fetch data from the table: "GameRound" using primary key columns"""
  GameRound_by_pk(id: String!): GameRound
  """
  fetch data from the table: "Grant"
  """
  Grant(
    """distinct select on columns"""
    distinct_on: [Grant_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Grant_order_by!]
    """filter the rows returned"""
    where: Grant_bool_exp
  ): [Grant!]!
  """
  fetch data from the table: "GrantShip"
  """
  GrantShip(
    """distinct select on columns"""
    distinct_on: [GrantShip_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GrantShip_order_by!]
    """filter the rows returned"""
    where: GrantShip_bool_exp
  ): [GrantShip!]!
  """fetch data from the table: "GrantShip" using primary key columns"""
  GrantShip_by_pk(id: String!): GrantShip
  """fetch data from the table: "Grant" using primary key columns"""
  Grant_by_pk(id: String!): Grant
  """
  fetch data from the table: "ProfileIdToAnchor"
  """
  ProfileIdToAnchor(
    """distinct select on columns"""
    distinct_on: [ProfileIdToAnchor_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ProfileIdToAnchor_order_by!]
    """filter the rows returned"""
    where: ProfileIdToAnchor_bool_exp
  ): [ProfileIdToAnchor!]!
  """
  fetch data from the table: "ProfileIdToAnchor" using primary key columns
  """
  ProfileIdToAnchor_by_pk(id: String!): ProfileIdToAnchor
  """
  fetch data from the table: "ProfileMemberGroup"
  """
  ProfileMemberGroup(
    """distinct select on columns"""
    distinct_on: [ProfileMemberGroup_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ProfileMemberGroup_order_by!]
    """filter the rows returned"""
    where: ProfileMemberGroup_bool_exp
  ): [ProfileMemberGroup!]!
  """
  fetch data from the table: "ProfileMemberGroup" using primary key columns
  """
  ProfileMemberGroup_by_pk(id: String!): ProfileMemberGroup
  """
  fetch data from the table: "Project"
  """
  Project(
    """distinct select on columns"""
    distinct_on: [Project_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Project_order_by!]
    """filter the rows returned"""
    where: Project_bool_exp
  ): [Project!]!
  """fetch data from the table: "Project" using primary key columns"""
  Project_by_pk(id: String!): Project
  """
  fetch data from the table: "RawMetadata"
  """
  RawMetadata(
    """distinct select on columns"""
    distinct_on: [RawMetadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [RawMetadata_order_by!]
    """filter the rows returned"""
    where: RawMetadata_bool_exp
  ): [RawMetadata!]!
  """fetch data from the table: "RawMetadata" using primary key columns"""
  RawMetadata_by_pk(id: String!): RawMetadata
  """
  fetch data from the table: "Transaction"
  """
  Transaction(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]
    """filter the rows returned"""
    where: Transaction_bool_exp
  ): [Transaction!]!
  """fetch data from the table: "Transaction" using primary key columns"""
  Transaction_by_pk(id: String!): Transaction
  """
  fetch data from the table: "Update"
  """
  Update(
    """distinct select on columns"""
    distinct_on: [Update_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Update_order_by!]
    """filter the rows returned"""
    where: Update_bool_exp
  ): [Update!]!
  """fetch data from the table: "Update" using primary key columns"""
  Update_by_pk(id: String!): Update
  """
  fetch data from the table: "chain_metadata"
  """
  chain_metadata(
    """distinct select on columns"""
    distinct_on: [chain_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [chain_metadata_order_by!]
    """filter the rows returned"""
    where: chain_metadata_bool_exp
  ): [chain_metadata!]!
  """fetch data from the table: "chain_metadata" using primary key columns"""
  chain_metadata_by_pk(chain_id: Int!): chain_metadata
  """
  fetch data from the table: "dynamic_contract_registry"
  """
  dynamic_contract_registry(
    """distinct select on columns"""
    distinct_on: [dynamic_contract_registry_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [dynamic_contract_registry_order_by!]
    """filter the rows returned"""
    where: dynamic_contract_registry_bool_exp
  ): [dynamic_contract_registry!]!
  """
  fetch data from the table: "dynamic_contract_registry" using primary key columns
  """
  dynamic_contract_registry_by_pk(chain_id: Int!, contract_address: String!): dynamic_contract_registry
  """
  fetch data from the table: "entity_history"
  """
  entity_history(
    """distinct select on columns"""
    distinct_on: [entity_history_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_order_by!]
    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  """fetch data from the table: "entity_history" using primary key columns"""
  entity_history_by_pk(block_number: Int!, block_timestamp: Int!, chain_id: Int!, entity_id: String!, entity_type: entity_type!, log_index: Int!): entity_history
  """
  fetch data from the table: "entity_history_filter"
  """
  entity_history_filter(
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table: "entity_history_filter" using primary key columns
  """
  entity_history_filter_by_pk(block_number: Int!, chain_id: Int!, entity_id: String!, log_index: Int!, previous_block_number: Int!, previous_log_index: Int!): entity_history_filter
  """
  fetch data from the table: "event_sync_state"
  """
  event_sync_state(
    """distinct select on columns"""
    distinct_on: [event_sync_state_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [event_sync_state_order_by!]
    """filter the rows returned"""
    where: event_sync_state_bool_exp
  ): [event_sync_state!]!
  """
  fetch data from the table: "event_sync_state" using primary key columns
  """
  event_sync_state_by_pk(chain_id: Int!): event_sync_state
  """This function helps search for articles"""
  get_entity_history_filter(
    """
    input parameters for function "get_entity_history_filter"
    """
    args: get_entity_history_filter_args!
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table: "persisted_state"
  """
  persisted_state(
    """distinct select on columns"""
    distinct_on: [persisted_state_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [persisted_state_order_by!]
    """filter the rows returned"""
    where: persisted_state_bool_exp
  ): [persisted_state!]!
  """fetch data from the table: "persisted_state" using primary key columns"""
  persisted_state_by_pk(id: Int!): persisted_state
  """
  fetch data from the table: "raw_events"
  """
  raw_events(
    """distinct select on columns"""
    distinct_on: [raw_events_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [raw_events_order_by!]
    """filter the rows returned"""
    where: raw_events_bool_exp
  ): [raw_events!]!
  """fetch data from the table: "raw_events" using primary key columns"""
  raw_events_by_pk(chain_id: Int!, event_id: numeric!): raw_events
}

"""
columns and relationships of "raw_events"
"""
type raw_events {
  block_hash: String!
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  db_write_timestamp: timestamp
  """An array relationship"""
  event_history(
    """distinct select on columns"""
    distinct_on: [entity_history_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_order_by!]
    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  event_id: numeric!
  event_type: event_type!
  log_index: Int!
  params(
    """JSON select path"""
    path: String
  ): json!
  src_address: String!
  transaction_hash: String!
  transaction_index: Int!
}

"""
Boolean expression to filter rows from the table "raw_events". All fields are combined with a logical 'AND'.
"""
input raw_events_bool_exp {
  _and: [raw_events_bool_exp!]
  _not: raw_events_bool_exp
  _or: [raw_events_bool_exp!]
  block_hash: String_comparison_exp
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  event_history: entity_history_bool_exp
  event_id: numeric_comparison_exp
  event_type: event_type_comparison_exp
  log_index: Int_comparison_exp
  params: json_comparison_exp
  src_address: String_comparison_exp
  transaction_hash: String_comparison_exp
  transaction_index: Int_comparison_exp
}

"""Ordering options when selecting data from "raw_events"."""
input raw_events_order_by {
  block_hash: order_by
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  db_write_timestamp: order_by
  event_history_aggregate: entity_history_aggregate_order_by
  event_id: order_by
  event_type: order_by
  log_index: order_by
  params: order_by
  src_address: order_by
  transaction_hash: order_by
  transaction_index: order_by
}

"""
select columns of table "raw_events"
"""
enum raw_events_select_column {
  """column name"""
  block_hash
  """column name"""
  block_number
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  db_write_timestamp
  """column name"""
  event_id
  """column name"""
  event_type
  """column name"""
  log_index
  """column name"""
  params
  """column name"""
  src_address
  """column name"""
  transaction_hash
  """column name"""
  transaction_index
}

"""
Streaming cursor of the table "raw_events"
"""
input raw_events_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: raw_events_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input raw_events_stream_cursor_value_input {
  block_hash: String
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  db_write_timestamp: timestamp
  event_id: numeric
  event_type: event_type
  log_index: Int
  params: json
  src_address: String
  transaction_hash: String
  transaction_index: Int
}

type subscription_root {
  """
  fetch data from the table: "FeedCard"
  """
  FeedCard(
    """distinct select on columns"""
    distinct_on: [FeedCard_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FeedCard_order_by!]
    """filter the rows returned"""
    where: FeedCard_bool_exp
  ): [FeedCard!]!
  """fetch data from the table: "FeedCard" using primary key columns"""
  FeedCard_by_pk(id: String!): FeedCard
  """
  fetch data from the table in a streaming manner: "FeedCard"
  """
  FeedCard_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [FeedCard_stream_cursor_input]!
    """filter the rows returned"""
    where: FeedCard_bool_exp
  ): [FeedCard!]!
  """
  fetch data from the table: "FeedItemEmbed"
  """
  FeedItemEmbed(
    """distinct select on columns"""
    distinct_on: [FeedItemEmbed_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FeedItemEmbed_order_by!]
    """filter the rows returned"""
    where: FeedItemEmbed_bool_exp
  ): [FeedItemEmbed!]!
  """fetch data from the table: "FeedItemEmbed" using primary key columns"""
  FeedItemEmbed_by_pk(id: String!): FeedItemEmbed
  """
  fetch data from the table in a streaming manner: "FeedItemEmbed"
  """
  FeedItemEmbed_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [FeedItemEmbed_stream_cursor_input]!
    """filter the rows returned"""
    where: FeedItemEmbed_bool_exp
  ): [FeedItemEmbed!]!
  """
  fetch data from the table: "FeedItemEntity"
  """
  FeedItemEntity(
    """distinct select on columns"""
    distinct_on: [FeedItemEntity_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FeedItemEntity_order_by!]
    """filter the rows returned"""
    where: FeedItemEntity_bool_exp
  ): [FeedItemEntity!]!
  """fetch data from the table: "FeedItemEntity" using primary key columns"""
  FeedItemEntity_by_pk(id: String!): FeedItemEntity
  """
  fetch data from the table in a streaming manner: "FeedItemEntity"
  """
  FeedItemEntity_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [FeedItemEntity_stream_cursor_input]!
    """filter the rows returned"""
    where: FeedItemEntity_bool_exp
  ): [FeedItemEntity!]!
  """
  fetch data from the table: "GMInitParams"
  """
  GMInitParams(
    """distinct select on columns"""
    distinct_on: [GMInitParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GMInitParams_order_by!]
    """filter the rows returned"""
    where: GMInitParams_bool_exp
  ): [GMInitParams!]!
  """fetch data from the table: "GMInitParams" using primary key columns"""
  GMInitParams_by_pk(id: String!): GMInitParams
  """
  fetch data from the table in a streaming manner: "GMInitParams"
  """
  GMInitParams_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [GMInitParams_stream_cursor_input]!
    """filter the rows returned"""
    where: GMInitParams_bool_exp
  ): [GMInitParams!]!
  """
  fetch data from the table: "GameManager"
  """
  GameManager(
    """distinct select on columns"""
    distinct_on: [GameManager_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GameManager_order_by!]
    """filter the rows returned"""
    where: GameManager_bool_exp
  ): [GameManager!]!
  """
  fetch data from the table: "GameManagerFactory"
  """
  GameManagerFactory(
    """distinct select on columns"""
    distinct_on: [GameManagerFactory_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GameManagerFactory_order_by!]
    """filter the rows returned"""
    where: GameManagerFactory_bool_exp
  ): [GameManagerFactory!]!
  """
  fetch data from the table: "GameManagerFactory" using primary key columns
  """
  GameManagerFactory_by_pk(id: String!): GameManagerFactory
  """
  fetch data from the table in a streaming manner: "GameManagerFactory"
  """
  GameManagerFactory_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [GameManagerFactory_stream_cursor_input]!
    """filter the rows returned"""
    where: GameManagerFactory_bool_exp
  ): [GameManagerFactory!]!
  """
  fetch data from the table: "GameManagerTemplate"
  """
  GameManagerTemplate(
    """distinct select on columns"""
    distinct_on: [GameManagerTemplate_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GameManagerTemplate_order_by!]
    """filter the rows returned"""
    where: GameManagerTemplate_bool_exp
  ): [GameManagerTemplate!]!
  """
  fetch data from the table: "GameManagerTemplate" using primary key columns
  """
  GameManagerTemplate_by_pk(id: String!): GameManagerTemplate
  """
  fetch data from the table in a streaming manner: "GameManagerTemplate"
  """
  GameManagerTemplate_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [GameManagerTemplate_stream_cursor_input]!
    """filter the rows returned"""
    where: GameManagerTemplate_bool_exp
  ): [GameManagerTemplate!]!
  """fetch data from the table: "GameManager" using primary key columns"""
  GameManager_by_pk(id: String!): GameManager
  """
  fetch data from the table in a streaming manner: "GameManager"
  """
  GameManager_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [GameManager_stream_cursor_input]!
    """filter the rows returned"""
    where: GameManager_bool_exp
  ): [GameManager!]!
  """
  fetch data from the table: "GameRound"
  """
  GameRound(
    """distinct select on columns"""
    distinct_on: [GameRound_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GameRound_order_by!]
    """filter the rows returned"""
    where: GameRound_bool_exp
  ): [GameRound!]!
  """fetch data from the table: "GameRound" using primary key columns"""
  GameRound_by_pk(id: String!): GameRound
  """
  fetch data from the table in a streaming manner: "GameRound"
  """
  GameRound_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [GameRound_stream_cursor_input]!
    """filter the rows returned"""
    where: GameRound_bool_exp
  ): [GameRound!]!
  """
  fetch data from the table: "Grant"
  """
  Grant(
    """distinct select on columns"""
    distinct_on: [Grant_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Grant_order_by!]
    """filter the rows returned"""
    where: Grant_bool_exp
  ): [Grant!]!
  """
  fetch data from the table: "GrantShip"
  """
  GrantShip(
    """distinct select on columns"""
    distinct_on: [GrantShip_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GrantShip_order_by!]
    """filter the rows returned"""
    where: GrantShip_bool_exp
  ): [GrantShip!]!
  """fetch data from the table: "GrantShip" using primary key columns"""
  GrantShip_by_pk(id: String!): GrantShip
  """
  fetch data from the table in a streaming manner: "GrantShip"
  """
  GrantShip_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [GrantShip_stream_cursor_input]!
    """filter the rows returned"""
    where: GrantShip_bool_exp
  ): [GrantShip!]!
  """fetch data from the table: "Grant" using primary key columns"""
  Grant_by_pk(id: String!): Grant
  """
  fetch data from the table in a streaming manner: "Grant"
  """
  Grant_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Grant_stream_cursor_input]!
    """filter the rows returned"""
    where: Grant_bool_exp
  ): [Grant!]!
  """
  fetch data from the table: "ProfileIdToAnchor"
  """
  ProfileIdToAnchor(
    """distinct select on columns"""
    distinct_on: [ProfileIdToAnchor_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ProfileIdToAnchor_order_by!]
    """filter the rows returned"""
    where: ProfileIdToAnchor_bool_exp
  ): [ProfileIdToAnchor!]!
  """
  fetch data from the table: "ProfileIdToAnchor" using primary key columns
  """
  ProfileIdToAnchor_by_pk(id: String!): ProfileIdToAnchor
  """
  fetch data from the table in a streaming manner: "ProfileIdToAnchor"
  """
  ProfileIdToAnchor_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ProfileIdToAnchor_stream_cursor_input]!
    """filter the rows returned"""
    where: ProfileIdToAnchor_bool_exp
  ): [ProfileIdToAnchor!]!
  """
  fetch data from the table: "ProfileMemberGroup"
  """
  ProfileMemberGroup(
    """distinct select on columns"""
    distinct_on: [ProfileMemberGroup_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ProfileMemberGroup_order_by!]
    """filter the rows returned"""
    where: ProfileMemberGroup_bool_exp
  ): [ProfileMemberGroup!]!
  """
  fetch data from the table: "ProfileMemberGroup" using primary key columns
  """
  ProfileMemberGroup_by_pk(id: String!): ProfileMemberGroup
  """
  fetch data from the table in a streaming manner: "ProfileMemberGroup"
  """
  ProfileMemberGroup_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ProfileMemberGroup_stream_cursor_input]!
    """filter the rows returned"""
    where: ProfileMemberGroup_bool_exp
  ): [ProfileMemberGroup!]!
  """
  fetch data from the table: "Project"
  """
  Project(
    """distinct select on columns"""
    distinct_on: [Project_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Project_order_by!]
    """filter the rows returned"""
    where: Project_bool_exp
  ): [Project!]!
  """fetch data from the table: "Project" using primary key columns"""
  Project_by_pk(id: String!): Project
  """
  fetch data from the table in a streaming manner: "Project"
  """
  Project_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Project_stream_cursor_input]!
    """filter the rows returned"""
    where: Project_bool_exp
  ): [Project!]!
  """
  fetch data from the table: "RawMetadata"
  """
  RawMetadata(
    """distinct select on columns"""
    distinct_on: [RawMetadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [RawMetadata_order_by!]
    """filter the rows returned"""
    where: RawMetadata_bool_exp
  ): [RawMetadata!]!
  """fetch data from the table: "RawMetadata" using primary key columns"""
  RawMetadata_by_pk(id: String!): RawMetadata
  """
  fetch data from the table in a streaming manner: "RawMetadata"
  """
  RawMetadata_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [RawMetadata_stream_cursor_input]!
    """filter the rows returned"""
    where: RawMetadata_bool_exp
  ): [RawMetadata!]!
  """
  fetch data from the table: "Transaction"
  """
  Transaction(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]
    """filter the rows returned"""
    where: Transaction_bool_exp
  ): [Transaction!]!
  """fetch data from the table: "Transaction" using primary key columns"""
  Transaction_by_pk(id: String!): Transaction
  """
  fetch data from the table in a streaming manner: "Transaction"
  """
  Transaction_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Transaction_stream_cursor_input]!
    """filter the rows returned"""
    where: Transaction_bool_exp
  ): [Transaction!]!
  """
  fetch data from the table: "Update"
  """
  Update(
    """distinct select on columns"""
    distinct_on: [Update_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Update_order_by!]
    """filter the rows returned"""
    where: Update_bool_exp
  ): [Update!]!
  """fetch data from the table: "Update" using primary key columns"""
  Update_by_pk(id: String!): Update
  """
  fetch data from the table in a streaming manner: "Update"
  """
  Update_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Update_stream_cursor_input]!
    """filter the rows returned"""
    where: Update_bool_exp
  ): [Update!]!
  """
  fetch data from the table: "chain_metadata"
  """
  chain_metadata(
    """distinct select on columns"""
    distinct_on: [chain_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [chain_metadata_order_by!]
    """filter the rows returned"""
    where: chain_metadata_bool_exp
  ): [chain_metadata!]!
  """fetch data from the table: "chain_metadata" using primary key columns"""
  chain_metadata_by_pk(chain_id: Int!): chain_metadata
  """
  fetch data from the table in a streaming manner: "chain_metadata"
  """
  chain_metadata_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [chain_metadata_stream_cursor_input]!
    """filter the rows returned"""
    where: chain_metadata_bool_exp
  ): [chain_metadata!]!
  """
  fetch data from the table: "dynamic_contract_registry"
  """
  dynamic_contract_registry(
    """distinct select on columns"""
    distinct_on: [dynamic_contract_registry_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [dynamic_contract_registry_order_by!]
    """filter the rows returned"""
    where: dynamic_contract_registry_bool_exp
  ): [dynamic_contract_registry!]!
  """
  fetch data from the table: "dynamic_contract_registry" using primary key columns
  """
  dynamic_contract_registry_by_pk(chain_id: Int!, contract_address: String!): dynamic_contract_registry
  """
  fetch data from the table in a streaming manner: "dynamic_contract_registry"
  """
  dynamic_contract_registry_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [dynamic_contract_registry_stream_cursor_input]!
    """filter the rows returned"""
    where: dynamic_contract_registry_bool_exp
  ): [dynamic_contract_registry!]!
  """
  fetch data from the table: "entity_history"
  """
  entity_history(
    """distinct select on columns"""
    distinct_on: [entity_history_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_order_by!]
    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  """fetch data from the table: "entity_history" using primary key columns"""
  entity_history_by_pk(block_number: Int!, block_timestamp: Int!, chain_id: Int!, entity_id: String!, entity_type: entity_type!, log_index: Int!): entity_history
  """
  fetch data from the table: "entity_history_filter"
  """
  entity_history_filter(
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table: "entity_history_filter" using primary key columns
  """
  entity_history_filter_by_pk(block_number: Int!, chain_id: Int!, entity_id: String!, log_index: Int!, previous_block_number: Int!, previous_log_index: Int!): entity_history_filter
  """
  fetch data from the table in a streaming manner: "entity_history_filter"
  """
  entity_history_filter_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [entity_history_filter_stream_cursor_input]!
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table in a streaming manner: "entity_history"
  """
  entity_history_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [entity_history_stream_cursor_input]!
    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  """
  fetch data from the table: "event_sync_state"
  """
  event_sync_state(
    """distinct select on columns"""
    distinct_on: [event_sync_state_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [event_sync_state_order_by!]
    """filter the rows returned"""
    where: event_sync_state_bool_exp
  ): [event_sync_state!]!
  """
  fetch data from the table: "event_sync_state" using primary key columns
  """
  event_sync_state_by_pk(chain_id: Int!): event_sync_state
  """
  fetch data from the table in a streaming manner: "event_sync_state"
  """
  event_sync_state_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [event_sync_state_stream_cursor_input]!
    """filter the rows returned"""
    where: event_sync_state_bool_exp
  ): [event_sync_state!]!
  """This function helps search for articles"""
  get_entity_history_filter(
    """
    input parameters for function "get_entity_history_filter"
    """
    args: get_entity_history_filter_args!
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table: "persisted_state"
  """
  persisted_state(
    """distinct select on columns"""
    distinct_on: [persisted_state_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [persisted_state_order_by!]
    """filter the rows returned"""
    where: persisted_state_bool_exp
  ): [persisted_state!]!
  """fetch data from the table: "persisted_state" using primary key columns"""
  persisted_state_by_pk(id: Int!): persisted_state
  """
  fetch data from the table in a streaming manner: "persisted_state"
  """
  persisted_state_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [persisted_state_stream_cursor_input]!
    """filter the rows returned"""
    where: persisted_state_bool_exp
  ): [persisted_state!]!
  """
  fetch data from the table: "raw_events"
  """
  raw_events(
    """distinct select on columns"""
    distinct_on: [raw_events_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [raw_events_order_by!]
    """filter the rows returned"""
    where: raw_events_bool_exp
  ): [raw_events!]!
  """fetch data from the table: "raw_events" using primary key columns"""
  raw_events_by_pk(chain_id: Int!, event_id: numeric!): raw_events
  """
  fetch data from the table in a streaming manner: "raw_events"
  """
  raw_events_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [raw_events_stream_cursor_input]!
    """filter the rows returned"""
    where: raw_events_bool_exp
  ): [raw_events!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}