schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type GameManager {
  id: Bytes!
  gameFacilitatorId: BigInt!
  rootAccount: Bytes!
  tokenAddress: Bytes!
  currentRoundId: BigInt!
  currentRound: GameRound
  poolFunds: BigInt!
}

input GameManager_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  gameFacilitatorId: BigInt
  gameFacilitatorId_not: BigInt
  gameFacilitatorId_gt: BigInt
  gameFacilitatorId_lt: BigInt
  gameFacilitatorId_gte: BigInt
  gameFacilitatorId_lte: BigInt
  gameFacilitatorId_in: [BigInt!]
  gameFacilitatorId_not_in: [BigInt!]
  rootAccount: Bytes
  rootAccount_not: Bytes
  rootAccount_gt: Bytes
  rootAccount_lt: Bytes
  rootAccount_gte: Bytes
  rootAccount_lte: Bytes
  rootAccount_in: [Bytes!]
  rootAccount_not_in: [Bytes!]
  rootAccount_contains: Bytes
  rootAccount_not_contains: Bytes
  tokenAddress: Bytes
  tokenAddress_not: Bytes
  tokenAddress_gt: Bytes
  tokenAddress_lt: Bytes
  tokenAddress_gte: Bytes
  tokenAddress_lte: Bytes
  tokenAddress_in: [Bytes!]
  tokenAddress_not_in: [Bytes!]
  tokenAddress_contains: Bytes
  tokenAddress_not_contains: Bytes
  currentRoundId: BigInt
  currentRoundId_not: BigInt
  currentRoundId_gt: BigInt
  currentRoundId_lt: BigInt
  currentRoundId_gte: BigInt
  currentRoundId_lte: BigInt
  currentRoundId_in: [BigInt!]
  currentRoundId_not_in: [BigInt!]
  currentRound: String
  currentRound_not: String
  currentRound_gt: String
  currentRound_lt: String
  currentRound_gte: String
  currentRound_lte: String
  currentRound_in: [String!]
  currentRound_not_in: [String!]
  currentRound_contains: String
  currentRound_contains_nocase: String
  currentRound_not_contains: String
  currentRound_not_contains_nocase: String
  currentRound_starts_with: String
  currentRound_starts_with_nocase: String
  currentRound_not_starts_with: String
  currentRound_not_starts_with_nocase: String
  currentRound_ends_with: String
  currentRound_ends_with_nocase: String
  currentRound_not_ends_with: String
  currentRound_not_ends_with_nocase: String
  currentRound_: GameRound_filter
  poolFunds: BigInt
  poolFunds_not: BigInt
  poolFunds_gt: BigInt
  poolFunds_lt: BigInt
  poolFunds_gte: BigInt
  poolFunds_lte: BigInt
  poolFunds_in: [BigInt!]
  poolFunds_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GameManager_filter]
  or: [GameManager_filter]
}

enum GameManager_orderBy {
  id
  gameFacilitatorId
  rootAccount
  tokenAddress
  currentRoundId
  currentRound
  currentRound__id
  currentRound__startTime
  currentRound__endTime
  currentRound__totalRoundAmount
  currentRound__gameStatus
  poolFunds
}

type GameRound {
  id: ID!
  startTime: BigInt!
  endTime: BigInt!
  totalRoundAmount: BigInt!
  gameStatus: Int!
  ships(skip: Int = 0, first: Int = 100, orderBy: GrantShip_orderBy, orderDirection: OrderDirection, where: GrantShip_filter): [GrantShip!]!
}

input GameRound_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  startTime: BigInt
  startTime_not: BigInt
  startTime_gt: BigInt
  startTime_lt: BigInt
  startTime_gte: BigInt
  startTime_lte: BigInt
  startTime_in: [BigInt!]
  startTime_not_in: [BigInt!]
  endTime: BigInt
  endTime_not: BigInt
  endTime_gt: BigInt
  endTime_lt: BigInt
  endTime_gte: BigInt
  endTime_lte: BigInt
  endTime_in: [BigInt!]
  endTime_not_in: [BigInt!]
  totalRoundAmount: BigInt
  totalRoundAmount_not: BigInt
  totalRoundAmount_gt: BigInt
  totalRoundAmount_lt: BigInt
  totalRoundAmount_gte: BigInt
  totalRoundAmount_lte: BigInt
  totalRoundAmount_in: [BigInt!]
  totalRoundAmount_not_in: [BigInt!]
  gameStatus: Int
  gameStatus_not: Int
  gameStatus_gt: Int
  gameStatus_lt: Int
  gameStatus_gte: Int
  gameStatus_lte: Int
  gameStatus_in: [Int!]
  gameStatus_not_in: [Int!]
  ships: [String!]
  ships_not: [String!]
  ships_contains: [String!]
  ships_contains_nocase: [String!]
  ships_not_contains: [String!]
  ships_not_contains_nocase: [String!]
  ships_: GrantShip_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GameRound_filter]
  or: [GameRound_filter]
}

enum GameRound_orderBy {
  id
  startTime
  endTime
  totalRoundAmount
  gameStatus
  ships
}

type GrantShip {
  id: Bytes!
  profileId: Bytes!
  nonce: BigInt!
  name: String!
  profileMetadata: RawMetadata!
  owner: Bytes!
  anchor: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  status: Int!
  alloProfileMembers: ProfileMemberGroup
  shipApplicationBytesData: Bytes
  applicationSubmittedTime: BigInt
  isAwaitingApproval: Boolean
  hasSubmittedApplication: Boolean
  isApproved: Boolean
  approvedTime: BigInt
  isRejected: Boolean
  rejectedTime: BigInt
  applicationReviewReason: RawMetadata
  poolId: BigInt
  shipContractAddress: Bytes
  shipLaunched: Boolean
  isAllocated: Boolean
  allocatedAmount: BigInt
  isDistributed: Boolean
  distributedAmount: BigInt
}

type GrantShipLookup {
  id: Bytes!
  anchorAddress: Bytes!
}

input GrantShipLookup_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  anchorAddress: Bytes
  anchorAddress_not: Bytes
  anchorAddress_gt: Bytes
  anchorAddress_lt: Bytes
  anchorAddress_gte: Bytes
  anchorAddress_lte: Bytes
  anchorAddress_in: [Bytes!]
  anchorAddress_not_in: [Bytes!]
  anchorAddress_contains: Bytes
  anchorAddress_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GrantShipLookup_filter]
  or: [GrantShipLookup_filter]
}

enum GrantShipLookup_orderBy {
  id
  anchorAddress
}

input GrantShip_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  profileId: Bytes
  profileId_not: Bytes
  profileId_gt: Bytes
  profileId_lt: Bytes
  profileId_gte: Bytes
  profileId_lte: Bytes
  profileId_in: [Bytes!]
  profileId_not_in: [Bytes!]
  profileId_contains: Bytes
  profileId_not_contains: Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  profileMetadata: String
  profileMetadata_not: String
  profileMetadata_gt: String
  profileMetadata_lt: String
  profileMetadata_gte: String
  profileMetadata_lte: String
  profileMetadata_in: [String!]
  profileMetadata_not_in: [String!]
  profileMetadata_contains: String
  profileMetadata_contains_nocase: String
  profileMetadata_not_contains: String
  profileMetadata_not_contains_nocase: String
  profileMetadata_starts_with: String
  profileMetadata_starts_with_nocase: String
  profileMetadata_not_starts_with: String
  profileMetadata_not_starts_with_nocase: String
  profileMetadata_ends_with: String
  profileMetadata_ends_with_nocase: String
  profileMetadata_not_ends_with: String
  profileMetadata_not_ends_with_nocase: String
  profileMetadata_: RawMetadata_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  anchor: Bytes
  anchor_not: Bytes
  anchor_gt: Bytes
  anchor_lt: Bytes
  anchor_gte: Bytes
  anchor_lte: Bytes
  anchor_in: [Bytes!]
  anchor_not_in: [Bytes!]
  anchor_contains: Bytes
  anchor_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  alloProfileMembers: String
  alloProfileMembers_not: String
  alloProfileMembers_gt: String
  alloProfileMembers_lt: String
  alloProfileMembers_gte: String
  alloProfileMembers_lte: String
  alloProfileMembers_in: [String!]
  alloProfileMembers_not_in: [String!]
  alloProfileMembers_contains: String
  alloProfileMembers_contains_nocase: String
  alloProfileMembers_not_contains: String
  alloProfileMembers_not_contains_nocase: String
  alloProfileMembers_starts_with: String
  alloProfileMembers_starts_with_nocase: String
  alloProfileMembers_not_starts_with: String
  alloProfileMembers_not_starts_with_nocase: String
  alloProfileMembers_ends_with: String
  alloProfileMembers_ends_with_nocase: String
  alloProfileMembers_not_ends_with: String
  alloProfileMembers_not_ends_with_nocase: String
  alloProfileMembers_: ProfileMemberGroup_filter
  shipApplicationBytesData: Bytes
  shipApplicationBytesData_not: Bytes
  shipApplicationBytesData_gt: Bytes
  shipApplicationBytesData_lt: Bytes
  shipApplicationBytesData_gte: Bytes
  shipApplicationBytesData_lte: Bytes
  shipApplicationBytesData_in: [Bytes!]
  shipApplicationBytesData_not_in: [Bytes!]
  shipApplicationBytesData_contains: Bytes
  shipApplicationBytesData_not_contains: Bytes
  applicationSubmittedTime: BigInt
  applicationSubmittedTime_not: BigInt
  applicationSubmittedTime_gt: BigInt
  applicationSubmittedTime_lt: BigInt
  applicationSubmittedTime_gte: BigInt
  applicationSubmittedTime_lte: BigInt
  applicationSubmittedTime_in: [BigInt!]
  applicationSubmittedTime_not_in: [BigInt!]
  isAwaitingApproval: Boolean
  isAwaitingApproval_not: Boolean
  isAwaitingApproval_in: [Boolean!]
  isAwaitingApproval_not_in: [Boolean!]
  hasSubmittedApplication: Boolean
  hasSubmittedApplication_not: Boolean
  hasSubmittedApplication_in: [Boolean!]
  hasSubmittedApplication_not_in: [Boolean!]
  isApproved: Boolean
  isApproved_not: Boolean
  isApproved_in: [Boolean!]
  isApproved_not_in: [Boolean!]
  approvedTime: BigInt
  approvedTime_not: BigInt
  approvedTime_gt: BigInt
  approvedTime_lt: BigInt
  approvedTime_gte: BigInt
  approvedTime_lte: BigInt
  approvedTime_in: [BigInt!]
  approvedTime_not_in: [BigInt!]
  isRejected: Boolean
  isRejected_not: Boolean
  isRejected_in: [Boolean!]
  isRejected_not_in: [Boolean!]
  rejectedTime: BigInt
  rejectedTime_not: BigInt
  rejectedTime_gt: BigInt
  rejectedTime_lt: BigInt
  rejectedTime_gte: BigInt
  rejectedTime_lte: BigInt
  rejectedTime_in: [BigInt!]
  rejectedTime_not_in: [BigInt!]
  applicationReviewReason: String
  applicationReviewReason_not: String
  applicationReviewReason_gt: String
  applicationReviewReason_lt: String
  applicationReviewReason_gte: String
  applicationReviewReason_lte: String
  applicationReviewReason_in: [String!]
  applicationReviewReason_not_in: [String!]
  applicationReviewReason_contains: String
  applicationReviewReason_contains_nocase: String
  applicationReviewReason_not_contains: String
  applicationReviewReason_not_contains_nocase: String
  applicationReviewReason_starts_with: String
  applicationReviewReason_starts_with_nocase: String
  applicationReviewReason_not_starts_with: String
  applicationReviewReason_not_starts_with_nocase: String
  applicationReviewReason_ends_with: String
  applicationReviewReason_ends_with_nocase: String
  applicationReviewReason_not_ends_with: String
  applicationReviewReason_not_ends_with_nocase: String
  applicationReviewReason_: RawMetadata_filter
  poolId: BigInt
  poolId_not: BigInt
  poolId_gt: BigInt
  poolId_lt: BigInt
  poolId_gte: BigInt
  poolId_lte: BigInt
  poolId_in: [BigInt!]
  poolId_not_in: [BigInt!]
  shipContractAddress: Bytes
  shipContractAddress_not: Bytes
  shipContractAddress_gt: Bytes
  shipContractAddress_lt: Bytes
  shipContractAddress_gte: Bytes
  shipContractAddress_lte: Bytes
  shipContractAddress_in: [Bytes!]
  shipContractAddress_not_in: [Bytes!]
  shipContractAddress_contains: Bytes
  shipContractAddress_not_contains: Bytes
  shipLaunched: Boolean
  shipLaunched_not: Boolean
  shipLaunched_in: [Boolean!]
  shipLaunched_not_in: [Boolean!]
  isAllocated: Boolean
  isAllocated_not: Boolean
  isAllocated_in: [Boolean!]
  isAllocated_not_in: [Boolean!]
  allocatedAmount: BigInt
  allocatedAmount_not: BigInt
  allocatedAmount_gt: BigInt
  allocatedAmount_lt: BigInt
  allocatedAmount_gte: BigInt
  allocatedAmount_lte: BigInt
  allocatedAmount_in: [BigInt!]
  allocatedAmount_not_in: [BigInt!]
  isDistributed: Boolean
  isDistributed_not: Boolean
  isDistributed_in: [Boolean!]
  isDistributed_not_in: [Boolean!]
  distributedAmount: BigInt
  distributedAmount_not: BigInt
  distributedAmount_gt: BigInt
  distributedAmount_lt: BigInt
  distributedAmount_gte: BigInt
  distributedAmount_lte: BigInt
  distributedAmount_in: [BigInt!]
  distributedAmount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GrantShip_filter]
  or: [GrantShip_filter]
}

enum GrantShip_orderBy {
  id
  profileId
  nonce
  name
  profileMetadata
  profileMetadata__id
  profileMetadata__protocol
  profileMetadata__pointer
  owner
  anchor
  blockNumber
  blockTimestamp
  transactionHash
  status
  alloProfileMembers
  alloProfileMembers__id
  shipApplicationBytesData
  applicationSubmittedTime
  isAwaitingApproval
  hasSubmittedApplication
  isApproved
  approvedTime
  isRejected
  rejectedTime
  applicationReviewReason
  applicationReviewReason__id
  applicationReviewReason__protocol
  applicationReviewReason__pointer
  poolId
  shipContractAddress
  shipLaunched
  isAllocated
  allocatedAmount
  isDistributed
  distributedAmount
}

"""
8 bytes signed integer

"""
scalar Int8

type Log {
  id: ID!
  message: String!
  description: String
  type: String!
}

input Log_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Log_filter]
  or: [Log_filter]
}

enum Log_orderBy {
  id
  message
  description
  type
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PoolIdLookup {
  id: ID!
  entityId: Bytes!
}

input PoolIdLookup_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  entityId: Bytes
  entityId_not: Bytes
  entityId_gt: Bytes
  entityId_lt: Bytes
  entityId_gte: Bytes
  entityId_lte: Bytes
  entityId_in: [Bytes!]
  entityId_not_in: [Bytes!]
  entityId_contains: Bytes
  entityId_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolIdLookup_filter]
  or: [PoolIdLookup_filter]
}

enum PoolIdLookup_orderBy {
  id
  entityId
}

type ProfileMemberGroup {
  id: Bytes!
  addresses: [Bytes!]
}

input ProfileMemberGroup_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  addresses: [Bytes!]
  addresses_not: [Bytes!]
  addresses_contains: [Bytes!]
  addresses_contains_nocase: [Bytes!]
  addresses_not_contains: [Bytes!]
  addresses_not_contains_nocase: [Bytes!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProfileMemberGroup_filter]
  or: [ProfileMemberGroup_filter]
}

enum ProfileMemberGroup_orderBy {
  id
  addresses
}

type Project {
  id: Bytes!
  profileId: Bytes!
  nonce: BigInt!
  name: String!
  metadata: RawMetadata!
  owner: Bytes!
  anchor: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  members: ProfileMemberGroup
}

input Project_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  profileId: Bytes
  profileId_not: Bytes
  profileId_gt: Bytes
  profileId_lt: Bytes
  profileId_gte: Bytes
  profileId_lte: Bytes
  profileId_in: [Bytes!]
  profileId_not_in: [Bytes!]
  profileId_contains: Bytes
  profileId_not_contains: Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  metadata: String
  metadata_not: String
  metadata_gt: String
  metadata_lt: String
  metadata_gte: String
  metadata_lte: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  metadata_: RawMetadata_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  anchor: Bytes
  anchor_not: Bytes
  anchor_gt: Bytes
  anchor_lt: Bytes
  anchor_gte: Bytes
  anchor_lte: Bytes
  anchor_in: [Bytes!]
  anchor_not_in: [Bytes!]
  anchor_contains: Bytes
  anchor_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  members: String
  members_not: String
  members_gt: String
  members_lt: String
  members_gte: String
  members_lte: String
  members_in: [String!]
  members_not_in: [String!]
  members_contains: String
  members_contains_nocase: String
  members_not_contains: String
  members_not_contains_nocase: String
  members_starts_with: String
  members_starts_with_nocase: String
  members_not_starts_with: String
  members_not_starts_with_nocase: String
  members_ends_with: String
  members_ends_with_nocase: String
  members_not_ends_with: String
  members_not_ends_with_nocase: String
  members_: ProfileMemberGroup_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Project_filter]
  or: [Project_filter]
}

enum Project_orderBy {
  id
  profileId
  nonce
  name
  metadata
  metadata__id
  metadata__protocol
  metadata__pointer
  owner
  anchor
  blockNumber
  blockTimestamp
  transactionHash
  members
  members__id
}

type Query {
  project(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Project
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: Project_orderBy
    orderDirection: OrderDirection
    where: Project_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  grantShip(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GrantShip
  grantShips(
    skip: Int = 0
    first: Int = 100
    orderBy: GrantShip_orderBy
    orderDirection: OrderDirection
    where: GrantShip_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GrantShip!]!
  grantShipLookup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GrantShipLookup
  grantShipLookups(
    skip: Int = 0
    first: Int = 100
    orderBy: GrantShipLookup_orderBy
    orderDirection: OrderDirection
    where: GrantShipLookup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GrantShipLookup!]!
  poolIdLookup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolIdLookup
  poolIdLookups(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolIdLookup_orderBy
    orderDirection: OrderDirection
    where: PoolIdLookup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolIdLookup!]!
  gameManager(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameManager
  gameManagers(
    skip: Int = 0
    first: Int = 100
    orderBy: GameManager_orderBy
    orderDirection: OrderDirection
    where: GameManager_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameManager!]!
  gameRound(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameRound
  gameRounds(
    skip: Int = 0
    first: Int = 100
    orderBy: GameRound_orderBy
    orderDirection: OrderDirection
    where: GameRound_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameRound!]!
  profileMemberGroup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProfileMemberGroup
  profileMemberGroups(
    skip: Int = 0
    first: Int = 100
    orderBy: ProfileMemberGroup_orderBy
    orderDirection: OrderDirection
    where: ProfileMemberGroup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProfileMemberGroup!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  rawMetadata(
    skip: Int = 0
    first: Int = 100
    orderBy: RawMetadata_orderBy
    orderDirection: OrderDirection
    where: RawMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RawMetadata!]!
  log(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Log
  logs(
    skip: Int = 0
    first: Int = 100
    orderBy: Log_orderBy
    orderDirection: OrderDirection
    where: Log_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Log!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RawMetadata {
  id: String!
  protocol: BigInt!
  pointer: String!
}

input RawMetadata_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  protocol: BigInt
  protocol_not: BigInt
  protocol_gt: BigInt
  protocol_lt: BigInt
  protocol_gte: BigInt
  protocol_lte: BigInt
  protocol_in: [BigInt!]
  protocol_not_in: [BigInt!]
  pointer: String
  pointer_not: String
  pointer_gt: String
  pointer_lt: String
  pointer_gte: String
  pointer_lte: String
  pointer_in: [String!]
  pointer_not_in: [String!]
  pointer_contains: String
  pointer_contains_nocase: String
  pointer_not_contains: String
  pointer_not_contains_nocase: String
  pointer_starts_with: String
  pointer_starts_with_nocase: String
  pointer_not_starts_with: String
  pointer_not_starts_with_nocase: String
  pointer_ends_with: String
  pointer_ends_with_nocase: String
  pointer_not_ends_with: String
  pointer_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RawMetadata_filter]
  or: [RawMetadata_filter]
}

enum RawMetadata_orderBy {
  id
  protocol
  pointer
}

type Subscription {
  project(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Project
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: Project_orderBy
    orderDirection: OrderDirection
    where: Project_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  grantShip(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GrantShip
  grantShips(
    skip: Int = 0
    first: Int = 100
    orderBy: GrantShip_orderBy
    orderDirection: OrderDirection
    where: GrantShip_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GrantShip!]!
  grantShipLookup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GrantShipLookup
  grantShipLookups(
    skip: Int = 0
    first: Int = 100
    orderBy: GrantShipLookup_orderBy
    orderDirection: OrderDirection
    where: GrantShipLookup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GrantShipLookup!]!
  poolIdLookup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolIdLookup
  poolIdLookups(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolIdLookup_orderBy
    orderDirection: OrderDirection
    where: PoolIdLookup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolIdLookup!]!
  gameManager(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameManager
  gameManagers(
    skip: Int = 0
    first: Int = 100
    orderBy: GameManager_orderBy
    orderDirection: OrderDirection
    where: GameManager_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameManager!]!
  gameRound(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameRound
  gameRounds(
    skip: Int = 0
    first: Int = 100
    orderBy: GameRound_orderBy
    orderDirection: OrderDirection
    where: GameRound_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameRound!]!
  profileMemberGroup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProfileMemberGroup
  profileMemberGroups(
    skip: Int = 0
    first: Int = 100
    orderBy: ProfileMemberGroup_orderBy
    orderDirection: OrderDirection
    where: ProfileMemberGroup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProfileMemberGroup!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  rawMetadata(
    skip: Int = 0
    first: Int = 100
    orderBy: RawMetadata_orderBy
    orderDirection: OrderDirection
    where: RawMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RawMetadata!]!
  log(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Log
  logs(
    skip: Int = 0
    first: Int = 100
    orderBy: Log_orderBy
    orderDirection: OrderDirection
    where: Log_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Log!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Transaction {
  id: ID!
  blockNumber: BigInt!
  sender: Bytes!
  txHash: Bytes!
}

input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transaction_filter]
  or: [Transaction_filter]
}

enum Transaction_orderBy {
  id
  blockNumber
  sender
  txHash
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}