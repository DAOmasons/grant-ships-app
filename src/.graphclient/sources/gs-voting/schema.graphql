schema {
  query: query_root
  subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60
  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "Contest"
"""
type Contest {
  """An object relationship"""
  choicesModule: StemModule
  choicesModule_id: String!
  contestAddress: String!
  contestStatus: numeric!
  contestVersion: String!
  db_write_timestamp: timestamp
  """An object relationship"""
  executionModule: StemModule
  executionModule_id: String!
  filterTag: String!
  id: String!
  isContinuous: Boolean!
  isRetractable: Boolean!
  """An object relationship"""
  pointsModule: StemModule
  pointsModule_id: String!
  """An object relationship"""
  votesModule: StemModule
  votesModule_id: String!
}

"""
columns and relationships of "ContestClone"
"""
type ContestClone {
  contestAddress: String!
  contestVersion: String!
  db_write_timestamp: timestamp
  filterTag: String!
  id: String!
}

"""
Boolean expression to filter rows from the table "ContestClone". All fields are combined with a logical 'AND'.
"""
input ContestClone_bool_exp {
  _and: [ContestClone_bool_exp!]
  _not: ContestClone_bool_exp
  _or: [ContestClone_bool_exp!]
  contestAddress: String_comparison_exp
  contestVersion: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  filterTag: String_comparison_exp
  id: String_comparison_exp
}

"""Ordering options when selecting data from "ContestClone"."""
input ContestClone_order_by {
  contestAddress: order_by
  contestVersion: order_by
  db_write_timestamp: order_by
  filterTag: order_by
  id: order_by
}

"""
select columns of table "ContestClone"
"""
enum ContestClone_select_column {
  """column name"""
  contestAddress
  """column name"""
  contestVersion
  """column name"""
  db_write_timestamp
  """column name"""
  filterTag
  """column name"""
  id
}

"""
Streaming cursor of the table "ContestClone"
"""
input ContestClone_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ContestClone_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ContestClone_stream_cursor_value_input {
  contestAddress: String
  contestVersion: String
  db_write_timestamp: timestamp
  filterTag: String
  id: String
}

"""
columns and relationships of "ContestTemplate"
"""
type ContestTemplate {
  active: Boolean!
  contestAddress: String!
  contestVersion: String!
  db_write_timestamp: timestamp
  id: String!
  mdPointer: String!
  mdProtocol: numeric!
}

"""
Boolean expression to filter rows from the table "ContestTemplate". All fields are combined with a logical 'AND'.
"""
input ContestTemplate_bool_exp {
  _and: [ContestTemplate_bool_exp!]
  _not: ContestTemplate_bool_exp
  _or: [ContestTemplate_bool_exp!]
  active: Boolean_comparison_exp
  contestAddress: String_comparison_exp
  contestVersion: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  mdPointer: String_comparison_exp
  mdProtocol: numeric_comparison_exp
}

"""Ordering options when selecting data from "ContestTemplate"."""
input ContestTemplate_order_by {
  active: order_by
  contestAddress: order_by
  contestVersion: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
}

"""
select columns of table "ContestTemplate"
"""
enum ContestTemplate_select_column {
  """column name"""
  active
  """column name"""
  contestAddress
  """column name"""
  contestVersion
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  mdPointer
  """column name"""
  mdProtocol
}

"""
Streaming cursor of the table "ContestTemplate"
"""
input ContestTemplate_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ContestTemplate_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ContestTemplate_stream_cursor_value_input {
  active: Boolean
  contestAddress: String
  contestVersion: String
  db_write_timestamp: timestamp
  id: String
  mdPointer: String
  mdProtocol: numeric
}

"""
Boolean expression to filter rows from the table "Contest". All fields are combined with a logical 'AND'.
"""
input Contest_bool_exp {
  _and: [Contest_bool_exp!]
  _not: Contest_bool_exp
  _or: [Contest_bool_exp!]
  choicesModule: StemModule_bool_exp
  choicesModule_id: String_comparison_exp
  contestAddress: String_comparison_exp
  contestStatus: numeric_comparison_exp
  contestVersion: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  executionModule: StemModule_bool_exp
  executionModule_id: String_comparison_exp
  filterTag: String_comparison_exp
  id: String_comparison_exp
  isContinuous: Boolean_comparison_exp
  isRetractable: Boolean_comparison_exp
  pointsModule: StemModule_bool_exp
  pointsModule_id: String_comparison_exp
  votesModule: StemModule_bool_exp
  votesModule_id: String_comparison_exp
}

"""Ordering options when selecting data from "Contest"."""
input Contest_order_by {
  choicesModule: StemModule_order_by
  choicesModule_id: order_by
  contestAddress: order_by
  contestStatus: order_by
  contestVersion: order_by
  db_write_timestamp: order_by
  executionModule: StemModule_order_by
  executionModule_id: order_by
  filterTag: order_by
  id: order_by
  isContinuous: order_by
  isRetractable: order_by
  pointsModule: StemModule_order_by
  pointsModule_id: order_by
  votesModule: StemModule_order_by
  votesModule_id: order_by
}

"""
select columns of table "Contest"
"""
enum Contest_select_column {
  """column name"""
  choicesModule_id
  """column name"""
  contestAddress
  """column name"""
  contestStatus
  """column name"""
  contestVersion
  """column name"""
  db_write_timestamp
  """column name"""
  executionModule_id
  """column name"""
  filterTag
  """column name"""
  id
  """column name"""
  isContinuous
  """column name"""
  isRetractable
  """column name"""
  pointsModule_id
  """column name"""
  votesModule_id
}

"""
Streaming cursor of the table "Contest"
"""
input Contest_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Contest_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Contest_stream_cursor_value_input {
  choicesModule_id: String
  contestAddress: String
  contestStatus: numeric
  contestVersion: String
  db_write_timestamp: timestamp
  executionModule_id: String
  filterTag: String
  id: String
  isContinuous: Boolean
  isRetractable: Boolean
  pointsModule_id: String
  votesModule_id: String
}

"""
columns and relationships of "ERCPointParams"
"""
type ERCPointParams {
  db_write_timestamp: timestamp
  id: String!
  voteTokenAddress: String!
  votingCheckpoint: numeric!
}

"""
Boolean expression to filter rows from the table "ERCPointParams". All fields are combined with a logical 'AND'.
"""
input ERCPointParams_bool_exp {
  _and: [ERCPointParams_bool_exp!]
  _not: ERCPointParams_bool_exp
  _or: [ERCPointParams_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  voteTokenAddress: String_comparison_exp
  votingCheckpoint: numeric_comparison_exp
}

"""Ordering options when selecting data from "ERCPointParams"."""
input ERCPointParams_order_by {
  db_write_timestamp: order_by
  id: order_by
  voteTokenAddress: order_by
  votingCheckpoint: order_by
}

"""
select columns of table "ERCPointParams"
"""
enum ERCPointParams_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  voteTokenAddress
  """column name"""
  votingCheckpoint
}

"""
Streaming cursor of the table "ERCPointParams"
"""
input ERCPointParams_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ERCPointParams_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ERCPointParams_stream_cursor_value_input {
  db_write_timestamp: timestamp
  id: String
  voteTokenAddress: String
  votingCheckpoint: numeric
}

"""
columns and relationships of "EventPost"
"""
type EventPost {
  db_write_timestamp: timestamp
  hatId: numeric!
  """An object relationship"""
  hatsPoster: HatsPoster
  hatsPoster_id: String!
  id: String!
  mdPointer: String!
  mdProtocol: numeric!
  tag: String!
}

"""
order by aggregate values of table "EventPost"
"""
input EventPost_aggregate_order_by {
  avg: EventPost_avg_order_by
  count: order_by
  max: EventPost_max_order_by
  min: EventPost_min_order_by
  stddev: EventPost_stddev_order_by
  stddev_pop: EventPost_stddev_pop_order_by
  stddev_samp: EventPost_stddev_samp_order_by
  sum: EventPost_sum_order_by
  var_pop: EventPost_var_pop_order_by
  var_samp: EventPost_var_samp_order_by
  variance: EventPost_variance_order_by
}

"""
order by avg() on columns of table "EventPost"
"""
input EventPost_avg_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
Boolean expression to filter rows from the table "EventPost". All fields are combined with a logical 'AND'.
"""
input EventPost_bool_exp {
  _and: [EventPost_bool_exp!]
  _not: EventPost_bool_exp
  _or: [EventPost_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  hatId: numeric_comparison_exp
  hatsPoster: HatsPoster_bool_exp
  hatsPoster_id: String_comparison_exp
  id: String_comparison_exp
  mdPointer: String_comparison_exp
  mdProtocol: numeric_comparison_exp
  tag: String_comparison_exp
}

"""
order by max() on columns of table "EventPost"
"""
input EventPost_max_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsPoster_id: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  tag: order_by
}

"""
order by min() on columns of table "EventPost"
"""
input EventPost_min_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsPoster_id: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  tag: order_by
}

"""Ordering options when selecting data from "EventPost"."""
input EventPost_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsPoster: HatsPoster_order_by
  hatsPoster_id: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  tag: order_by
}

"""
select columns of table "EventPost"
"""
enum EventPost_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  hatId
  """column name"""
  hatsPoster_id
  """column name"""
  id
  """column name"""
  mdPointer
  """column name"""
  mdProtocol
  """column name"""
  tag
}

"""
order by stddev() on columns of table "EventPost"
"""
input EventPost_stddev_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by stddev_pop() on columns of table "EventPost"
"""
input EventPost_stddev_pop_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by stddev_samp() on columns of table "EventPost"
"""
input EventPost_stddev_samp_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
Streaming cursor of the table "EventPost"
"""
input EventPost_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: EventPost_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input EventPost_stream_cursor_value_input {
  db_write_timestamp: timestamp
  hatId: numeric
  hatsPoster_id: String
  id: String
  mdPointer: String
  mdProtocol: numeric
  tag: String
}

"""
order by sum() on columns of table "EventPost"
"""
input EventPost_sum_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by var_pop() on columns of table "EventPost"
"""
input EventPost_var_pop_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by var_samp() on columns of table "EventPost"
"""
input EventPost_var_samp_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by variance() on columns of table "EventPost"
"""
input EventPost_variance_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
columns and relationships of "FactoryEventsSummary"
"""
type FactoryEventsSummary {
  address: String!
  admins: _text!
  contestBuiltCount: numeric!
  contestCloneCount: numeric!
  contestTemplateCount: numeric!
  db_write_timestamp: timestamp
  id: String!
  moduleCloneCount: numeric!
  moduleTemplateCount: numeric!
}

"""
Boolean expression to filter rows from the table "FactoryEventsSummary". All fields are combined with a logical 'AND'.
"""
input FactoryEventsSummary_bool_exp {
  _and: [FactoryEventsSummary_bool_exp!]
  _not: FactoryEventsSummary_bool_exp
  _or: [FactoryEventsSummary_bool_exp!]
  address: String_comparison_exp
  admins: _text_comparison_exp
  contestBuiltCount: numeric_comparison_exp
  contestCloneCount: numeric_comparison_exp
  contestTemplateCount: numeric_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  moduleCloneCount: numeric_comparison_exp
  moduleTemplateCount: numeric_comparison_exp
}

"""Ordering options when selecting data from "FactoryEventsSummary"."""
input FactoryEventsSummary_order_by {
  address: order_by
  admins: order_by
  contestBuiltCount: order_by
  contestCloneCount: order_by
  contestTemplateCount: order_by
  db_write_timestamp: order_by
  id: order_by
  moduleCloneCount: order_by
  moduleTemplateCount: order_by
}

"""
select columns of table "FactoryEventsSummary"
"""
enum FactoryEventsSummary_select_column {
  """column name"""
  address
  """column name"""
  admins
  """column name"""
  contestBuiltCount
  """column name"""
  contestCloneCount
  """column name"""
  contestTemplateCount
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  moduleCloneCount
  """column name"""
  moduleTemplateCount
}

"""
Streaming cursor of the table "FactoryEventsSummary"
"""
input FactoryEventsSummary_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: FactoryEventsSummary_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input FactoryEventsSummary_stream_cursor_value_input {
  address: String
  admins: _text
  contestBuiltCount: numeric
  contestCloneCount: numeric
  contestTemplateCount: numeric
  db_write_timestamp: timestamp
  id: String
  moduleCloneCount: numeric
  moduleTemplateCount: numeric
}

"""
columns and relationships of "GrantShipsVoting"
"""
type GrantShipsVoting {
  """An array relationship"""
  choices(
    """distinct select on columns"""
    distinct_on: [ShipChoice_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipChoice_order_by!]
    """filter the rows returned"""
    where: ShipChoice_bool_exp
  ): [ShipChoice!]!
  """An object relationship"""
  contest: Contest
  contest_id: String!
  db_write_timestamp: timestamp
  endTime: numeric
  hatId: numeric!
  hatsAddress: String!
  id: String!
  startTime: numeric
  totalVotes: numeric!
  voteDuration: numeric!
  voteTokenAddress: String!
  """An array relationship"""
  votes(
    """distinct select on columns"""
    distinct_on: [ShipVote_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipVote_order_by!]
    """filter the rows returned"""
    where: ShipVote_bool_exp
  ): [ShipVote!]!
  votingCheckpoint: numeric!
}

"""
Boolean expression to filter rows from the table "GrantShipsVoting". All fields are combined with a logical 'AND'.
"""
input GrantShipsVoting_bool_exp {
  _and: [GrantShipsVoting_bool_exp!]
  _not: GrantShipsVoting_bool_exp
  _or: [GrantShipsVoting_bool_exp!]
  choices: ShipChoice_bool_exp
  contest: Contest_bool_exp
  contest_id: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  endTime: numeric_comparison_exp
  hatId: numeric_comparison_exp
  hatsAddress: String_comparison_exp
  id: String_comparison_exp
  startTime: numeric_comparison_exp
  totalVotes: numeric_comparison_exp
  voteDuration: numeric_comparison_exp
  voteTokenAddress: String_comparison_exp
  votes: ShipVote_bool_exp
  votingCheckpoint: numeric_comparison_exp
}

"""Ordering options when selecting data from "GrantShipsVoting"."""
input GrantShipsVoting_order_by {
  choices_aggregate: ShipChoice_aggregate_order_by
  contest: Contest_order_by
  contest_id: order_by
  db_write_timestamp: order_by
  endTime: order_by
  hatId: order_by
  hatsAddress: order_by
  id: order_by
  startTime: order_by
  totalVotes: order_by
  voteDuration: order_by
  voteTokenAddress: order_by
  votes_aggregate: ShipVote_aggregate_order_by
  votingCheckpoint: order_by
}

"""
select columns of table "GrantShipsVoting"
"""
enum GrantShipsVoting_select_column {
  """column name"""
  contest_id
  """column name"""
  db_write_timestamp
  """column name"""
  endTime
  """column name"""
  hatId
  """column name"""
  hatsAddress
  """column name"""
  id
  """column name"""
  startTime
  """column name"""
  totalVotes
  """column name"""
  voteDuration
  """column name"""
  voteTokenAddress
  """column name"""
  votingCheckpoint
}

"""
Streaming cursor of the table "GrantShipsVoting"
"""
input GrantShipsVoting_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: GrantShipsVoting_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input GrantShipsVoting_stream_cursor_value_input {
  contest_id: String
  db_write_timestamp: timestamp
  endTime: numeric
  hatId: numeric
  hatsAddress: String
  id: String
  startTime: numeric
  totalVotes: numeric
  voteDuration: numeric
  voteTokenAddress: String
  votingCheckpoint: numeric
}

"""
columns and relationships of "HALParams"
"""
type HALParams {
  db_write_timestamp: timestamp
  hatId: numeric!
  hatsAddress: String!
  id: String!
}

"""
Boolean expression to filter rows from the table "HALParams". All fields are combined with a logical 'AND'.
"""
input HALParams_bool_exp {
  _and: [HALParams_bool_exp!]
  _not: HALParams_bool_exp
  _or: [HALParams_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  hatId: numeric_comparison_exp
  hatsAddress: String_comparison_exp
  id: String_comparison_exp
}

"""Ordering options when selecting data from "HALParams"."""
input HALParams_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsAddress: order_by
  id: order_by
}

"""
select columns of table "HALParams"
"""
enum HALParams_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  hatId
  """column name"""
  hatsAddress
  """column name"""
  id
}

"""
Streaming cursor of the table "HALParams"
"""
input HALParams_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: HALParams_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input HALParams_stream_cursor_value_input {
  db_write_timestamp: timestamp
  hatId: numeric
  hatsAddress: String
  id: String
}

"""
columns and relationships of "HatsPoster"
"""
type HatsPoster {
  db_write_timestamp: timestamp
  """An array relationship"""
  eventPosts(
    """distinct select on columns"""
    distinct_on: [EventPost_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [EventPost_order_by!]
    """filter the rows returned"""
    where: EventPost_bool_exp
  ): [EventPost!]!
  hatIds: _numeric!
  hatsAddress: String!
  id: String!
  """An array relationship"""
  record(
    """distinct select on columns"""
    distinct_on: [Record_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Record_order_by!]
    """filter the rows returned"""
    where: Record_bool_exp
  ): [Record!]!
}

"""
Boolean expression to filter rows from the table "HatsPoster". All fields are combined with a logical 'AND'.
"""
input HatsPoster_bool_exp {
  _and: [HatsPoster_bool_exp!]
  _not: HatsPoster_bool_exp
  _or: [HatsPoster_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  eventPosts: EventPost_bool_exp
  hatIds: _numeric_comparison_exp
  hatsAddress: String_comparison_exp
  id: String_comparison_exp
  record: Record_bool_exp
}

"""Ordering options when selecting data from "HatsPoster"."""
input HatsPoster_order_by {
  db_write_timestamp: order_by
  eventPosts_aggregate: EventPost_aggregate_order_by
  hatIds: order_by
  hatsAddress: order_by
  id: order_by
  record_aggregate: Record_aggregate_order_by
}

"""
select columns of table "HatsPoster"
"""
enum HatsPoster_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  hatIds
  """column name"""
  hatsAddress
  """column name"""
  id
}

"""
Streaming cursor of the table "HatsPoster"
"""
input HatsPoster_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: HatsPoster_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input HatsPoster_stream_cursor_value_input {
  db_write_timestamp: timestamp
  hatIds: _numeric
  hatsAddress: String
  id: String
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "LocalLog"
"""
type LocalLog {
  db_write_timestamp: timestamp
  id: String!
  message: String
}

"""
Boolean expression to filter rows from the table "LocalLog". All fields are combined with a logical 'AND'.
"""
input LocalLog_bool_exp {
  _and: [LocalLog_bool_exp!]
  _not: LocalLog_bool_exp
  _or: [LocalLog_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  message: String_comparison_exp
}

"""Ordering options when selecting data from "LocalLog"."""
input LocalLog_order_by {
  db_write_timestamp: order_by
  id: order_by
  message: order_by
}

"""
select columns of table "LocalLog"
"""
enum LocalLog_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  message
}

"""
Streaming cursor of the table "LocalLog"
"""
input LocalLog_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: LocalLog_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input LocalLog_stream_cursor_value_input {
  db_write_timestamp: timestamp
  id: String
  message: String
}

"""
columns and relationships of "ModuleTemplate"
"""
type ModuleTemplate {
  active: Boolean!
  db_write_timestamp: timestamp
  id: String!
  mdPointer: String!
  mdProtocol: numeric!
  moduleName: String!
  templateAddress: String!
}

"""
Boolean expression to filter rows from the table "ModuleTemplate". All fields are combined with a logical 'AND'.
"""
input ModuleTemplate_bool_exp {
  _and: [ModuleTemplate_bool_exp!]
  _not: ModuleTemplate_bool_exp
  _or: [ModuleTemplate_bool_exp!]
  active: Boolean_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  mdPointer: String_comparison_exp
  mdProtocol: numeric_comparison_exp
  moduleName: String_comparison_exp
  templateAddress: String_comparison_exp
}

"""Ordering options when selecting data from "ModuleTemplate"."""
input ModuleTemplate_order_by {
  active: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  moduleName: order_by
  templateAddress: order_by
}

"""
select columns of table "ModuleTemplate"
"""
enum ModuleTemplate_select_column {
  """column name"""
  active
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  mdPointer
  """column name"""
  mdProtocol
  """column name"""
  moduleName
  """column name"""
  templateAddress
}

"""
Streaming cursor of the table "ModuleTemplate"
"""
input ModuleTemplate_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ModuleTemplate_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ModuleTemplate_stream_cursor_value_input {
  active: Boolean
  db_write_timestamp: timestamp
  id: String
  mdPointer: String
  mdProtocol: numeric
  moduleName: String
  templateAddress: String
}

"""
columns and relationships of "Record"
"""
type Record {
  db_write_timestamp: timestamp
  hatId: numeric!
  """An object relationship"""
  hatsPoster: HatsPoster
  hatsPoster_id: String!
  id: String!
  mdPointer: String!
  mdProtocol: numeric!
  nonce: String!
  tag: String!
}

"""
order by aggregate values of table "Record"
"""
input Record_aggregate_order_by {
  avg: Record_avg_order_by
  count: order_by
  max: Record_max_order_by
  min: Record_min_order_by
  stddev: Record_stddev_order_by
  stddev_pop: Record_stddev_pop_order_by
  stddev_samp: Record_stddev_samp_order_by
  sum: Record_sum_order_by
  var_pop: Record_var_pop_order_by
  var_samp: Record_var_samp_order_by
  variance: Record_variance_order_by
}

"""
order by avg() on columns of table "Record"
"""
input Record_avg_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
Boolean expression to filter rows from the table "Record". All fields are combined with a logical 'AND'.
"""
input Record_bool_exp {
  _and: [Record_bool_exp!]
  _not: Record_bool_exp
  _or: [Record_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  hatId: numeric_comparison_exp
  hatsPoster: HatsPoster_bool_exp
  hatsPoster_id: String_comparison_exp
  id: String_comparison_exp
  mdPointer: String_comparison_exp
  mdProtocol: numeric_comparison_exp
  nonce: String_comparison_exp
  tag: String_comparison_exp
}

"""
order by max() on columns of table "Record"
"""
input Record_max_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsPoster_id: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  nonce: order_by
  tag: order_by
}

"""
order by min() on columns of table "Record"
"""
input Record_min_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsPoster_id: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  nonce: order_by
  tag: order_by
}

"""Ordering options when selecting data from "Record"."""
input Record_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsPoster: HatsPoster_order_by
  hatsPoster_id: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  nonce: order_by
  tag: order_by
}

"""
select columns of table "Record"
"""
enum Record_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  hatId
  """column name"""
  hatsPoster_id
  """column name"""
  id
  """column name"""
  mdPointer
  """column name"""
  mdProtocol
  """column name"""
  nonce
  """column name"""
  tag
}

"""
order by stddev() on columns of table "Record"
"""
input Record_stddev_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by stddev_pop() on columns of table "Record"
"""
input Record_stddev_pop_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by stddev_samp() on columns of table "Record"
"""
input Record_stddev_samp_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
Streaming cursor of the table "Record"
"""
input Record_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Record_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Record_stream_cursor_value_input {
  db_write_timestamp: timestamp
  hatId: numeric
  hatsPoster_id: String
  id: String
  mdPointer: String
  mdProtocol: numeric
  nonce: String
  tag: String
}

"""
order by sum() on columns of table "Record"
"""
input Record_sum_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by var_pop() on columns of table "Record"
"""
input Record_var_pop_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by var_samp() on columns of table "Record"
"""
input Record_var_samp_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by variance() on columns of table "Record"
"""
input Record_variance_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
columns and relationships of "ShipChoice"
"""
type ShipChoice {
  active: Boolean!
  choiceData: String!
  """An object relationship"""
  contest: GrantShipsVoting
  contest_id: String!
  db_write_timestamp: timestamp
  id: String!
  mdPointer: String!
  mdProtocol: numeric!
  voteTally: numeric!
  """An array relationship"""
  votes(
    """distinct select on columns"""
    distinct_on: [ShipVote_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipVote_order_by!]
    """filter the rows returned"""
    where: ShipVote_bool_exp
  ): [ShipVote!]!
}

"""
order by aggregate values of table "ShipChoice"
"""
input ShipChoice_aggregate_order_by {
  avg: ShipChoice_avg_order_by
  count: order_by
  max: ShipChoice_max_order_by
  min: ShipChoice_min_order_by
  stddev: ShipChoice_stddev_order_by
  stddev_pop: ShipChoice_stddev_pop_order_by
  stddev_samp: ShipChoice_stddev_samp_order_by
  sum: ShipChoice_sum_order_by
  var_pop: ShipChoice_var_pop_order_by
  var_samp: ShipChoice_var_samp_order_by
  variance: ShipChoice_variance_order_by
}

"""
order by avg() on columns of table "ShipChoice"
"""
input ShipChoice_avg_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
Boolean expression to filter rows from the table "ShipChoice". All fields are combined with a logical 'AND'.
"""
input ShipChoice_bool_exp {
  _and: [ShipChoice_bool_exp!]
  _not: ShipChoice_bool_exp
  _or: [ShipChoice_bool_exp!]
  active: Boolean_comparison_exp
  choiceData: String_comparison_exp
  contest: GrantShipsVoting_bool_exp
  contest_id: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  mdPointer: String_comparison_exp
  mdProtocol: numeric_comparison_exp
  voteTally: numeric_comparison_exp
  votes: ShipVote_bool_exp
}

"""
order by max() on columns of table "ShipChoice"
"""
input ShipChoice_max_order_by {
  choiceData: order_by
  contest_id: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  voteTally: order_by
}

"""
order by min() on columns of table "ShipChoice"
"""
input ShipChoice_min_order_by {
  choiceData: order_by
  contest_id: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  voteTally: order_by
}

"""Ordering options when selecting data from "ShipChoice"."""
input ShipChoice_order_by {
  active: order_by
  choiceData: order_by
  contest: GrantShipsVoting_order_by
  contest_id: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  voteTally: order_by
  votes_aggregate: ShipVote_aggregate_order_by
}

"""
select columns of table "ShipChoice"
"""
enum ShipChoice_select_column {
  """column name"""
  active
  """column name"""
  choiceData
  """column name"""
  contest_id
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  mdPointer
  """column name"""
  mdProtocol
  """column name"""
  voteTally
}

"""
order by stddev() on columns of table "ShipChoice"
"""
input ShipChoice_stddev_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
order by stddev_pop() on columns of table "ShipChoice"
"""
input ShipChoice_stddev_pop_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
order by stddev_samp() on columns of table "ShipChoice"
"""
input ShipChoice_stddev_samp_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
Streaming cursor of the table "ShipChoice"
"""
input ShipChoice_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ShipChoice_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ShipChoice_stream_cursor_value_input {
  active: Boolean
  choiceData: String
  contest_id: String
  db_write_timestamp: timestamp
  id: String
  mdPointer: String
  mdProtocol: numeric
  voteTally: numeric
}

"""
order by sum() on columns of table "ShipChoice"
"""
input ShipChoice_sum_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
order by var_pop() on columns of table "ShipChoice"
"""
input ShipChoice_var_pop_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
order by var_samp() on columns of table "ShipChoice"
"""
input ShipChoice_var_samp_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
order by variance() on columns of table "ShipChoice"
"""
input ShipChoice_variance_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
columns and relationships of "ShipVote"
"""
type ShipVote {
  amount: numeric!
  """An object relationship"""
  choice: ShipChoice
  choice_id: String!
  """An object relationship"""
  contest: GrantShipsVoting
  contest_id: String!
  db_write_timestamp: timestamp
  id: String!
  isRectractVote: Boolean!
  mdPointer: String!
  mdProtocol: numeric!
  voter: String!
}

"""
order by aggregate values of table "ShipVote"
"""
input ShipVote_aggregate_order_by {
  avg: ShipVote_avg_order_by
  count: order_by
  max: ShipVote_max_order_by
  min: ShipVote_min_order_by
  stddev: ShipVote_stddev_order_by
  stddev_pop: ShipVote_stddev_pop_order_by
  stddev_samp: ShipVote_stddev_samp_order_by
  sum: ShipVote_sum_order_by
  var_pop: ShipVote_var_pop_order_by
  var_samp: ShipVote_var_samp_order_by
  variance: ShipVote_variance_order_by
}

"""
order by avg() on columns of table "ShipVote"
"""
input ShipVote_avg_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
Boolean expression to filter rows from the table "ShipVote". All fields are combined with a logical 'AND'.
"""
input ShipVote_bool_exp {
  _and: [ShipVote_bool_exp!]
  _not: ShipVote_bool_exp
  _or: [ShipVote_bool_exp!]
  amount: numeric_comparison_exp
  choice: ShipChoice_bool_exp
  choice_id: String_comparison_exp
  contest: GrantShipsVoting_bool_exp
  contest_id: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  isRectractVote: Boolean_comparison_exp
  mdPointer: String_comparison_exp
  mdProtocol: numeric_comparison_exp
  voter: String_comparison_exp
}

"""
order by max() on columns of table "ShipVote"
"""
input ShipVote_max_order_by {
  amount: order_by
  choice_id: order_by
  contest_id: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  voter: order_by
}

"""
order by min() on columns of table "ShipVote"
"""
input ShipVote_min_order_by {
  amount: order_by
  choice_id: order_by
  contest_id: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  voter: order_by
}

"""Ordering options when selecting data from "ShipVote"."""
input ShipVote_order_by {
  amount: order_by
  choice: ShipChoice_order_by
  choice_id: order_by
  contest: GrantShipsVoting_order_by
  contest_id: order_by
  db_write_timestamp: order_by
  id: order_by
  isRectractVote: order_by
  mdPointer: order_by
  mdProtocol: order_by
  voter: order_by
}

"""
select columns of table "ShipVote"
"""
enum ShipVote_select_column {
  """column name"""
  amount
  """column name"""
  choice_id
  """column name"""
  contest_id
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  isRectractVote
  """column name"""
  mdPointer
  """column name"""
  mdProtocol
  """column name"""
  voter
}

"""
order by stddev() on columns of table "ShipVote"
"""
input ShipVote_stddev_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
order by stddev_pop() on columns of table "ShipVote"
"""
input ShipVote_stddev_pop_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
order by stddev_samp() on columns of table "ShipVote"
"""
input ShipVote_stddev_samp_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
Streaming cursor of the table "ShipVote"
"""
input ShipVote_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ShipVote_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ShipVote_stream_cursor_value_input {
  amount: numeric
  choice_id: String
  contest_id: String
  db_write_timestamp: timestamp
  id: String
  isRectractVote: Boolean
  mdPointer: String
  mdProtocol: numeric
  voter: String
}

"""
order by sum() on columns of table "ShipVote"
"""
input ShipVote_sum_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
order by var_pop() on columns of table "ShipVote"
"""
input ShipVote_var_pop_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
order by var_samp() on columns of table "ShipVote"
"""
input ShipVote_var_samp_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
order by variance() on columns of table "ShipVote"
"""
input ShipVote_variance_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
columns and relationships of "StemModule"
"""
type StemModule {
  """An object relationship"""
  contest: Contest
  contestAddress: String
  contest_id: String
  db_write_timestamp: timestamp
  filterTag: String!
  id: String!
  moduleAddress: String!
  moduleName: String!
  """An object relationship"""
  moduleTemplate: ModuleTemplate
  moduleTemplate_id: String!
}

"""
Boolean expression to filter rows from the table "StemModule". All fields are combined with a logical 'AND'.
"""
input StemModule_bool_exp {
  _and: [StemModule_bool_exp!]
  _not: StemModule_bool_exp
  _or: [StemModule_bool_exp!]
  contest: Contest_bool_exp
  contestAddress: String_comparison_exp
  contest_id: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  filterTag: String_comparison_exp
  id: String_comparison_exp
  moduleAddress: String_comparison_exp
  moduleName: String_comparison_exp
  moduleTemplate: ModuleTemplate_bool_exp
  moduleTemplate_id: String_comparison_exp
}

"""Ordering options when selecting data from "StemModule"."""
input StemModule_order_by {
  contest: Contest_order_by
  contestAddress: order_by
  contest_id: order_by
  db_write_timestamp: order_by
  filterTag: order_by
  id: order_by
  moduleAddress: order_by
  moduleName: order_by
  moduleTemplate: ModuleTemplate_order_by
  moduleTemplate_id: order_by
}

"""
select columns of table "StemModule"
"""
enum StemModule_select_column {
  """column name"""
  contestAddress
  """column name"""
  contest_id
  """column name"""
  db_write_timestamp
  """column name"""
  filterTag
  """column name"""
  id
  """column name"""
  moduleAddress
  """column name"""
  moduleName
  """column name"""
  moduleTemplate_id
}

"""
Streaming cursor of the table "StemModule"
"""
input StemModule_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: StemModule_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input StemModule_stream_cursor_value_input {
  contestAddress: String
  contest_id: String
  db_write_timestamp: timestamp
  filterTag: String
  id: String
  moduleAddress: String
  moduleName: String
  moduleTemplate_id: String
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]
  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean
  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String
  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]
  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String
  """does the column NOT match the given pattern"""
  _nlike: String
  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String
  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String
  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String
  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "TVParams"
"""
type TVParams {
  db_write_timestamp: timestamp
  id: String!
  voteDuration: numeric!
}

"""
Boolean expression to filter rows from the table "TVParams". All fields are combined with a logical 'AND'.
"""
input TVParams_bool_exp {
  _and: [TVParams_bool_exp!]
  _not: TVParams_bool_exp
  _or: [TVParams_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  voteDuration: numeric_comparison_exp
}

"""Ordering options when selecting data from "TVParams"."""
input TVParams_order_by {
  db_write_timestamp: order_by
  id: order_by
  voteDuration: order_by
}

"""
select columns of table "TVParams"
"""
enum TVParams_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  voteDuration
}

"""
Streaming cursor of the table "TVParams"
"""
input TVParams_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: TVParams_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input TVParams_stream_cursor_value_input {
  db_write_timestamp: timestamp
  id: String
  voteDuration: numeric
}

"""
columns and relationships of "Transaction"
"""
type Transaction {
  blockNumber: numeric!
  db_write_timestamp: timestamp
  id: String!
  srcAddress: String!
  txHash: String!
  txOrigin: String
}

"""
Boolean expression to filter rows from the table "Transaction". All fields are combined with a logical 'AND'.
"""
input Transaction_bool_exp {
  _and: [Transaction_bool_exp!]
  _not: Transaction_bool_exp
  _or: [Transaction_bool_exp!]
  blockNumber: numeric_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  srcAddress: String_comparison_exp
  txHash: String_comparison_exp
  txOrigin: String_comparison_exp
}

"""Ordering options when selecting data from "Transaction"."""
input Transaction_order_by {
  blockNumber: order_by
  db_write_timestamp: order_by
  id: order_by
  srcAddress: order_by
  txHash: order_by
  txOrigin: order_by
}

"""
select columns of table "Transaction"
"""
enum Transaction_select_column {
  """column name"""
  blockNumber
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  srcAddress
  """column name"""
  txHash
  """column name"""
  txOrigin
}

"""
Streaming cursor of the table "Transaction"
"""
input Transaction_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Transaction_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Transaction_stream_cursor_value_input {
  blockNumber: numeric
  db_write_timestamp: timestamp
  id: String
  srcAddress: String
  txHash: String
  txOrigin: String
}

scalar _numeric

"""
Boolean expression to compare columns of type "_numeric". All fields are combined with logical 'AND'.
"""
input _numeric_comparison_exp {
  _eq: _numeric
  _gt: _numeric
  _gte: _numeric
  _in: [_numeric!]
  _is_null: Boolean
  _lt: _numeric
  _lte: _numeric
  _neq: _numeric
  _nin: [_numeric!]
}

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _text_comparison_exp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _is_null: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

"""
columns and relationships of "chain_metadata"
"""
type chain_metadata {
  block_height: Int!
  chain_id: Int!
  end_block: Int
  first_event_block_number: Int
  is_hyper_sync: Boolean!
  latest_fetched_block_number: Int!
  latest_processed_block: Int
  num_batches_fetched: Int!
  num_events_processed: Int
  start_block: Int!
  timestamp_caught_up_to_head_or_endblock: timestamptz
}

"""
Boolean expression to filter rows from the table "chain_metadata". All fields are combined with a logical 'AND'.
"""
input chain_metadata_bool_exp {
  _and: [chain_metadata_bool_exp!]
  _not: chain_metadata_bool_exp
  _or: [chain_metadata_bool_exp!]
  block_height: Int_comparison_exp
  chain_id: Int_comparison_exp
  end_block: Int_comparison_exp
  first_event_block_number: Int_comparison_exp
  is_hyper_sync: Boolean_comparison_exp
  latest_fetched_block_number: Int_comparison_exp
  latest_processed_block: Int_comparison_exp
  num_batches_fetched: Int_comparison_exp
  num_events_processed: Int_comparison_exp
  start_block: Int_comparison_exp
  timestamp_caught_up_to_head_or_endblock: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "chain_metadata"."""
input chain_metadata_order_by {
  block_height: order_by
  chain_id: order_by
  end_block: order_by
  first_event_block_number: order_by
  is_hyper_sync: order_by
  latest_fetched_block_number: order_by
  latest_processed_block: order_by
  num_batches_fetched: order_by
  num_events_processed: order_by
  start_block: order_by
  timestamp_caught_up_to_head_or_endblock: order_by
}

"""
select columns of table "chain_metadata"
"""
enum chain_metadata_select_column {
  """column name"""
  block_height
  """column name"""
  chain_id
  """column name"""
  end_block
  """column name"""
  first_event_block_number
  """column name"""
  is_hyper_sync
  """column name"""
  latest_fetched_block_number
  """column name"""
  latest_processed_block
  """column name"""
  num_batches_fetched
  """column name"""
  num_events_processed
  """column name"""
  start_block
  """column name"""
  timestamp_caught_up_to_head_or_endblock
}

"""
Streaming cursor of the table "chain_metadata"
"""
input chain_metadata_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: chain_metadata_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input chain_metadata_stream_cursor_value_input {
  block_height: Int
  chain_id: Int
  end_block: Int
  first_event_block_number: Int
  is_hyper_sync: Boolean
  latest_fetched_block_number: Int
  latest_processed_block: Int
  num_batches_fetched: Int
  num_events_processed: Int
  start_block: Int
  timestamp_caught_up_to_head_or_endblock: timestamptz
}

scalar contract_type

"""
Boolean expression to compare columns of type "contract_type". All fields are combined with logical 'AND'.
"""
input contract_type_comparison_exp {
  _eq: contract_type
  _gt: contract_type
  _gte: contract_type
  _in: [contract_type!]
  _is_null: Boolean
  _lt: contract_type
  _lte: contract_type
  _neq: contract_type
  _nin: [contract_type!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC
  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "dynamic_contract_registry"
"""
type dynamic_contract_registry {
  block_timestamp: Int!
  chain_id: Int!
  contract_address: String!
  contract_type: contract_type!
  event_id: numeric!
}

"""
Boolean expression to filter rows from the table "dynamic_contract_registry". All fields are combined with a logical 'AND'.
"""
input dynamic_contract_registry_bool_exp {
  _and: [dynamic_contract_registry_bool_exp!]
  _not: dynamic_contract_registry_bool_exp
  _or: [dynamic_contract_registry_bool_exp!]
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  contract_address: String_comparison_exp
  contract_type: contract_type_comparison_exp
  event_id: numeric_comparison_exp
}

"""Ordering options when selecting data from "dynamic_contract_registry"."""
input dynamic_contract_registry_order_by {
  block_timestamp: order_by
  chain_id: order_by
  contract_address: order_by
  contract_type: order_by
  event_id: order_by
}

"""
select columns of table "dynamic_contract_registry"
"""
enum dynamic_contract_registry_select_column {
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  contract_address
  """column name"""
  contract_type
  """column name"""
  event_id
}

"""
Streaming cursor of the table "dynamic_contract_registry"
"""
input dynamic_contract_registry_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: dynamic_contract_registry_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input dynamic_contract_registry_stream_cursor_value_input {
  block_timestamp: Int
  chain_id: Int
  contract_address: String
  contract_type: contract_type
  event_id: numeric
}

"""
columns and relationships of "entity_history"
"""
type entity_history {
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  entity_id: String!
  entity_type: entity_type!
  """An object relationship"""
  event: raw_events
  log_index: Int!
  params(
    """JSON select path"""
    path: String
  ): json
  previous_block_number: Int
  previous_block_timestamp: Int
  previous_chain_id: Int
  previous_log_index: Int
}

"""
order by aggregate values of table "entity_history"
"""
input entity_history_aggregate_order_by {
  avg: entity_history_avg_order_by
  count: order_by
  max: entity_history_max_order_by
  min: entity_history_min_order_by
  stddev: entity_history_stddev_order_by
  stddev_pop: entity_history_stddev_pop_order_by
  stddev_samp: entity_history_stddev_samp_order_by
  sum: entity_history_sum_order_by
  var_pop: entity_history_var_pop_order_by
  var_samp: entity_history_var_samp_order_by
  variance: entity_history_variance_order_by
}

"""
order by avg() on columns of table "entity_history"
"""
input entity_history_avg_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
Boolean expression to filter rows from the table "entity_history". All fields are combined with a logical 'AND'.
"""
input entity_history_bool_exp {
  _and: [entity_history_bool_exp!]
  _not: entity_history_bool_exp
  _or: [entity_history_bool_exp!]
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  entity_id: String_comparison_exp
  entity_type: entity_type_comparison_exp
  event: raw_events_bool_exp
  log_index: Int_comparison_exp
  params: json_comparison_exp
  previous_block_number: Int_comparison_exp
  previous_block_timestamp: Int_comparison_exp
  previous_chain_id: Int_comparison_exp
  previous_log_index: Int_comparison_exp
}

"""
columns and relationships of "entity_history_filter"
"""
type entity_history_filter {
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  entity_id: String!
  entity_type: entity_type!
  """An object relationship"""
  event: raw_events
  log_index: Int!
  new_val(
    """JSON select path"""
    path: String
  ): json
  old_val(
    """JSON select path"""
    path: String
  ): json
  previous_block_number: Int!
  previous_log_index: Int!
}

"""
Boolean expression to filter rows from the table "entity_history_filter". All fields are combined with a logical 'AND'.
"""
input entity_history_filter_bool_exp {
  _and: [entity_history_filter_bool_exp!]
  _not: entity_history_filter_bool_exp
  _or: [entity_history_filter_bool_exp!]
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  entity_id: String_comparison_exp
  entity_type: entity_type_comparison_exp
  event: raw_events_bool_exp
  log_index: Int_comparison_exp
  new_val: json_comparison_exp
  old_val: json_comparison_exp
  previous_block_number: Int_comparison_exp
  previous_log_index: Int_comparison_exp
}

"""Ordering options when selecting data from "entity_history_filter"."""
input entity_history_filter_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  event: raw_events_order_by
  log_index: order_by
  new_val: order_by
  old_val: order_by
  previous_block_number: order_by
  previous_log_index: order_by
}

"""
select columns of table "entity_history_filter"
"""
enum entity_history_filter_select_column {
  """column name"""
  block_number
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  entity_id
  """column name"""
  entity_type
  """column name"""
  log_index
  """column name"""
  new_val
  """column name"""
  old_val
  """column name"""
  previous_block_number
  """column name"""
  previous_log_index
}

"""
Streaming cursor of the table "entity_history_filter"
"""
input entity_history_filter_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: entity_history_filter_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input entity_history_filter_stream_cursor_value_input {
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  entity_id: String
  entity_type: entity_type
  log_index: Int
  new_val: json
  old_val: json
  previous_block_number: Int
  previous_log_index: Int
}

"""
order by max() on columns of table "entity_history"
"""
input entity_history_max_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by min() on columns of table "entity_history"
"""
input entity_history_min_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""Ordering options when selecting data from "entity_history"."""
input entity_history_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  event: raw_events_order_by
  log_index: order_by
  params: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
select columns of table "entity_history"
"""
enum entity_history_select_column {
  """column name"""
  block_number
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  entity_id
  """column name"""
  entity_type
  """column name"""
  log_index
  """column name"""
  params
  """column name"""
  previous_block_number
  """column name"""
  previous_block_timestamp
  """column name"""
  previous_chain_id
  """column name"""
  previous_log_index
}

"""
order by stddev() on columns of table "entity_history"
"""
input entity_history_stddev_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by stddev_pop() on columns of table "entity_history"
"""
input entity_history_stddev_pop_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by stddev_samp() on columns of table "entity_history"
"""
input entity_history_stddev_samp_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
Streaming cursor of the table "entity_history"
"""
input entity_history_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: entity_history_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input entity_history_stream_cursor_value_input {
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  entity_id: String
  entity_type: entity_type
  log_index: Int
  params: json
  previous_block_number: Int
  previous_block_timestamp: Int
  previous_chain_id: Int
  previous_log_index: Int
}

"""
order by sum() on columns of table "entity_history"
"""
input entity_history_sum_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by var_pop() on columns of table "entity_history"
"""
input entity_history_var_pop_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by var_samp() on columns of table "entity_history"
"""
input entity_history_var_samp_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by variance() on columns of table "entity_history"
"""
input entity_history_variance_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

scalar entity_type

"""
Boolean expression to compare columns of type "entity_type". All fields are combined with logical 'AND'.
"""
input entity_type_comparison_exp {
  _eq: entity_type
  _gt: entity_type
  _gte: entity_type
  _in: [entity_type!]
  _is_null: Boolean
  _lt: entity_type
  _lte: entity_type
  _neq: entity_type
  _nin: [entity_type!]
}

"""
columns and relationships of "event_sync_state"
"""
type event_sync_state {
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  log_index: Int!
  transaction_index: Int!
}

"""
Boolean expression to filter rows from the table "event_sync_state". All fields are combined with a logical 'AND'.
"""
input event_sync_state_bool_exp {
  _and: [event_sync_state_bool_exp!]
  _not: event_sync_state_bool_exp
  _or: [event_sync_state_bool_exp!]
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  log_index: Int_comparison_exp
  transaction_index: Int_comparison_exp
}

"""Ordering options when selecting data from "event_sync_state"."""
input event_sync_state_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  transaction_index: order_by
}

"""
select columns of table "event_sync_state"
"""
enum event_sync_state_select_column {
  """column name"""
  block_number
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  log_index
  """column name"""
  transaction_index
}

"""
Streaming cursor of the table "event_sync_state"
"""
input event_sync_state_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: event_sync_state_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input event_sync_state_stream_cursor_value_input {
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  log_index: Int
  transaction_index: Int
}

scalar event_type

"""
Boolean expression to compare columns of type "event_type". All fields are combined with logical 'AND'.
"""
input event_type_comparison_exp {
  _eq: event_type
  _gt: event_type
  _gte: event_type
  _in: [event_type!]
  _is_null: Boolean
  _lt: event_type
  _lte: event_type
  _neq: event_type
  _nin: [event_type!]
}

input get_entity_history_filter_args {
  end_block: Int
  end_chain_id: Int
  end_log_index: Int
  end_timestamp: Int
  start_block: Int
  start_chain_id: Int
  start_log_index: Int
  start_timestamp: Int
}

scalar json

"""
Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc
  """in ascending order, nulls first"""
  asc_nulls_first
  """in ascending order, nulls last"""
  asc_nulls_last
  """in descending order, nulls first"""
  desc
  """in descending order, nulls first"""
  desc_nulls_first
  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "persisted_state"
"""
type persisted_state {
  abi_files_hash: String!
  config_hash: String!
  envio_version: String!
  handler_files_hash: String!
  id: Int!
  schema_hash: String!
}

"""
Boolean expression to filter rows from the table "persisted_state". All fields are combined with a logical 'AND'.
"""
input persisted_state_bool_exp {
  _and: [persisted_state_bool_exp!]
  _not: persisted_state_bool_exp
  _or: [persisted_state_bool_exp!]
  abi_files_hash: String_comparison_exp
  config_hash: String_comparison_exp
  envio_version: String_comparison_exp
  handler_files_hash: String_comparison_exp
  id: Int_comparison_exp
  schema_hash: String_comparison_exp
}

"""Ordering options when selecting data from "persisted_state"."""
input persisted_state_order_by {
  abi_files_hash: order_by
  config_hash: order_by
  envio_version: order_by
  handler_files_hash: order_by
  id: order_by
  schema_hash: order_by
}

"""
select columns of table "persisted_state"
"""
enum persisted_state_select_column {
  """column name"""
  abi_files_hash
  """column name"""
  config_hash
  """column name"""
  envio_version
  """column name"""
  handler_files_hash
  """column name"""
  id
  """column name"""
  schema_hash
}

"""
Streaming cursor of the table "persisted_state"
"""
input persisted_state_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: persisted_state_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input persisted_state_stream_cursor_value_input {
  abi_files_hash: String
  config_hash: String
  envio_version: String
  handler_files_hash: String
  id: Int
  schema_hash: String
}

type query_root {
  """
  fetch data from the table: "Contest"
  """
  Contest(
    """distinct select on columns"""
    distinct_on: [Contest_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Contest_order_by!]
    """filter the rows returned"""
    where: Contest_bool_exp
  ): [Contest!]!
  """
  fetch data from the table: "ContestClone"
  """
  ContestClone(
    """distinct select on columns"""
    distinct_on: [ContestClone_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ContestClone_order_by!]
    """filter the rows returned"""
    where: ContestClone_bool_exp
  ): [ContestClone!]!
  """fetch data from the table: "ContestClone" using primary key columns"""
  ContestClone_by_pk(id: String!): ContestClone
  """
  fetch data from the table: "ContestTemplate"
  """
  ContestTemplate(
    """distinct select on columns"""
    distinct_on: [ContestTemplate_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ContestTemplate_order_by!]
    """filter the rows returned"""
    where: ContestTemplate_bool_exp
  ): [ContestTemplate!]!
  """fetch data from the table: "ContestTemplate" using primary key columns"""
  ContestTemplate_by_pk(id: String!): ContestTemplate
  """fetch data from the table: "Contest" using primary key columns"""
  Contest_by_pk(id: String!): Contest
  """
  fetch data from the table: "ERCPointParams"
  """
  ERCPointParams(
    """distinct select on columns"""
    distinct_on: [ERCPointParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ERCPointParams_order_by!]
    """filter the rows returned"""
    where: ERCPointParams_bool_exp
  ): [ERCPointParams!]!
  """fetch data from the table: "ERCPointParams" using primary key columns"""
  ERCPointParams_by_pk(id: String!): ERCPointParams
  """
  fetch data from the table: "EventPost"
  """
  EventPost(
    """distinct select on columns"""
    distinct_on: [EventPost_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [EventPost_order_by!]
    """filter the rows returned"""
    where: EventPost_bool_exp
  ): [EventPost!]!
  """fetch data from the table: "EventPost" using primary key columns"""
  EventPost_by_pk(id: String!): EventPost
  """
  fetch data from the table: "FactoryEventsSummary"
  """
  FactoryEventsSummary(
    """distinct select on columns"""
    distinct_on: [FactoryEventsSummary_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FactoryEventsSummary_order_by!]
    """filter the rows returned"""
    where: FactoryEventsSummary_bool_exp
  ): [FactoryEventsSummary!]!
  """
  fetch data from the table: "FactoryEventsSummary" using primary key columns
  """
  FactoryEventsSummary_by_pk(id: String!): FactoryEventsSummary
  """
  fetch data from the table: "GrantShipsVoting"
  """
  GrantShipsVoting(
    """distinct select on columns"""
    distinct_on: [GrantShipsVoting_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GrantShipsVoting_order_by!]
    """filter the rows returned"""
    where: GrantShipsVoting_bool_exp
  ): [GrantShipsVoting!]!
  """
  fetch data from the table: "GrantShipsVoting" using primary key columns
  """
  GrantShipsVoting_by_pk(id: String!): GrantShipsVoting
  """
  fetch data from the table: "HALParams"
  """
  HALParams(
    """distinct select on columns"""
    distinct_on: [HALParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [HALParams_order_by!]
    """filter the rows returned"""
    where: HALParams_bool_exp
  ): [HALParams!]!
  """fetch data from the table: "HALParams" using primary key columns"""
  HALParams_by_pk(id: String!): HALParams
  """
  fetch data from the table: "HatsPoster"
  """
  HatsPoster(
    """distinct select on columns"""
    distinct_on: [HatsPoster_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [HatsPoster_order_by!]
    """filter the rows returned"""
    where: HatsPoster_bool_exp
  ): [HatsPoster!]!
  """fetch data from the table: "HatsPoster" using primary key columns"""
  HatsPoster_by_pk(id: String!): HatsPoster
  """
  fetch data from the table: "LocalLog"
  """
  LocalLog(
    """distinct select on columns"""
    distinct_on: [LocalLog_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [LocalLog_order_by!]
    """filter the rows returned"""
    where: LocalLog_bool_exp
  ): [LocalLog!]!
  """fetch data from the table: "LocalLog" using primary key columns"""
  LocalLog_by_pk(id: String!): LocalLog
  """
  fetch data from the table: "ModuleTemplate"
  """
  ModuleTemplate(
    """distinct select on columns"""
    distinct_on: [ModuleTemplate_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ModuleTemplate_order_by!]
    """filter the rows returned"""
    where: ModuleTemplate_bool_exp
  ): [ModuleTemplate!]!
  """fetch data from the table: "ModuleTemplate" using primary key columns"""
  ModuleTemplate_by_pk(id: String!): ModuleTemplate
  """
  fetch data from the table: "Record"
  """
  Record(
    """distinct select on columns"""
    distinct_on: [Record_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Record_order_by!]
    """filter the rows returned"""
    where: Record_bool_exp
  ): [Record!]!
  """fetch data from the table: "Record" using primary key columns"""
  Record_by_pk(id: String!): Record
  """
  fetch data from the table: "ShipChoice"
  """
  ShipChoice(
    """distinct select on columns"""
    distinct_on: [ShipChoice_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipChoice_order_by!]
    """filter the rows returned"""
    where: ShipChoice_bool_exp
  ): [ShipChoice!]!
  """fetch data from the table: "ShipChoice" using primary key columns"""
  ShipChoice_by_pk(id: String!): ShipChoice
  """
  fetch data from the table: "ShipVote"
  """
  ShipVote(
    """distinct select on columns"""
    distinct_on: [ShipVote_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipVote_order_by!]
    """filter the rows returned"""
    where: ShipVote_bool_exp
  ): [ShipVote!]!
  """fetch data from the table: "ShipVote" using primary key columns"""
  ShipVote_by_pk(id: String!): ShipVote
  """
  fetch data from the table: "StemModule"
  """
  StemModule(
    """distinct select on columns"""
    distinct_on: [StemModule_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [StemModule_order_by!]
    """filter the rows returned"""
    where: StemModule_bool_exp
  ): [StemModule!]!
  """fetch data from the table: "StemModule" using primary key columns"""
  StemModule_by_pk(id: String!): StemModule
  """
  fetch data from the table: "TVParams"
  """
  TVParams(
    """distinct select on columns"""
    distinct_on: [TVParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [TVParams_order_by!]
    """filter the rows returned"""
    where: TVParams_bool_exp
  ): [TVParams!]!
  """fetch data from the table: "TVParams" using primary key columns"""
  TVParams_by_pk(id: String!): TVParams
  """
  fetch data from the table: "Transaction"
  """
  Transaction(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]
    """filter the rows returned"""
    where: Transaction_bool_exp
  ): [Transaction!]!
  """fetch data from the table: "Transaction" using primary key columns"""
  Transaction_by_pk(id: String!): Transaction
  """
  fetch data from the table: "chain_metadata"
  """
  chain_metadata(
    """distinct select on columns"""
    distinct_on: [chain_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [chain_metadata_order_by!]
    """filter the rows returned"""
    where: chain_metadata_bool_exp
  ): [chain_metadata!]!
  """fetch data from the table: "chain_metadata" using primary key columns"""
  chain_metadata_by_pk(chain_id: Int!): chain_metadata
  """
  fetch data from the table: "dynamic_contract_registry"
  """
  dynamic_contract_registry(
    """distinct select on columns"""
    distinct_on: [dynamic_contract_registry_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [dynamic_contract_registry_order_by!]
    """filter the rows returned"""
    where: dynamic_contract_registry_bool_exp
  ): [dynamic_contract_registry!]!
  """
  fetch data from the table: "dynamic_contract_registry" using primary key columns
  """
  dynamic_contract_registry_by_pk(chain_id: Int!, contract_address: String!): dynamic_contract_registry
  """
  fetch data from the table: "entity_history"
  """
  entity_history(
    """distinct select on columns"""
    distinct_on: [entity_history_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_order_by!]
    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  """fetch data from the table: "entity_history" using primary key columns"""
  entity_history_by_pk(block_number: Int!, block_timestamp: Int!, chain_id: Int!, entity_id: String!, entity_type: entity_type!, log_index: Int!): entity_history
  """
  fetch data from the table: "entity_history_filter"
  """
  entity_history_filter(
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table: "entity_history_filter" using primary key columns
  """
  entity_history_filter_by_pk(block_number: Int!, chain_id: Int!, entity_id: String!, log_index: Int!, previous_block_number: Int!, previous_log_index: Int!): entity_history_filter
  """
  fetch data from the table: "event_sync_state"
  """
  event_sync_state(
    """distinct select on columns"""
    distinct_on: [event_sync_state_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [event_sync_state_order_by!]
    """filter the rows returned"""
    where: event_sync_state_bool_exp
  ): [event_sync_state!]!
  """
  fetch data from the table: "event_sync_state" using primary key columns
  """
  event_sync_state_by_pk(chain_id: Int!): event_sync_state
  """This function helps search for articles"""
  get_entity_history_filter(
    """
    input parameters for function "get_entity_history_filter"
    """
    args: get_entity_history_filter_args!
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table: "persisted_state"
  """
  persisted_state(
    """distinct select on columns"""
    distinct_on: [persisted_state_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [persisted_state_order_by!]
    """filter the rows returned"""
    where: persisted_state_bool_exp
  ): [persisted_state!]!
  """fetch data from the table: "persisted_state" using primary key columns"""
  persisted_state_by_pk(id: Int!): persisted_state
  """
  fetch data from the table: "raw_events"
  """
  raw_events(
    """distinct select on columns"""
    distinct_on: [raw_events_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [raw_events_order_by!]
    """filter the rows returned"""
    where: raw_events_bool_exp
  ): [raw_events!]!
  """fetch data from the table: "raw_events" using primary key columns"""
  raw_events_by_pk(chain_id: Int!, event_id: numeric!): raw_events
}

"""
columns and relationships of "raw_events"
"""
type raw_events {
  block_hash: String!
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  db_write_timestamp: timestamp
  """An array relationship"""
  event_history(
    """distinct select on columns"""
    distinct_on: [entity_history_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_order_by!]
    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  event_id: numeric!
  event_type: event_type!
  log_index: Int!
  params(
    """JSON select path"""
    path: String
  ): json!
  src_address: String!
  transaction_hash: String!
  transaction_index: Int!
}

"""
Boolean expression to filter rows from the table "raw_events". All fields are combined with a logical 'AND'.
"""
input raw_events_bool_exp {
  _and: [raw_events_bool_exp!]
  _not: raw_events_bool_exp
  _or: [raw_events_bool_exp!]
  block_hash: String_comparison_exp
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  event_history: entity_history_bool_exp
  event_id: numeric_comparison_exp
  event_type: event_type_comparison_exp
  log_index: Int_comparison_exp
  params: json_comparison_exp
  src_address: String_comparison_exp
  transaction_hash: String_comparison_exp
  transaction_index: Int_comparison_exp
}

"""Ordering options when selecting data from "raw_events"."""
input raw_events_order_by {
  block_hash: order_by
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  db_write_timestamp: order_by
  event_history_aggregate: entity_history_aggregate_order_by
  event_id: order_by
  event_type: order_by
  log_index: order_by
  params: order_by
  src_address: order_by
  transaction_hash: order_by
  transaction_index: order_by
}

"""
select columns of table "raw_events"
"""
enum raw_events_select_column {
  """column name"""
  block_hash
  """column name"""
  block_number
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  db_write_timestamp
  """column name"""
  event_id
  """column name"""
  event_type
  """column name"""
  log_index
  """column name"""
  params
  """column name"""
  src_address
  """column name"""
  transaction_hash
  """column name"""
  transaction_index
}

"""
Streaming cursor of the table "raw_events"
"""
input raw_events_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: raw_events_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input raw_events_stream_cursor_value_input {
  block_hash: String
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  db_write_timestamp: timestamp
  event_id: numeric
  event_type: event_type
  log_index: Int
  params: json
  src_address: String
  transaction_hash: String
  transaction_index: Int
}

type subscription_root {
  """
  fetch data from the table: "Contest"
  """
  Contest(
    """distinct select on columns"""
    distinct_on: [Contest_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Contest_order_by!]
    """filter the rows returned"""
    where: Contest_bool_exp
  ): [Contest!]!
  """
  fetch data from the table: "ContestClone"
  """
  ContestClone(
    """distinct select on columns"""
    distinct_on: [ContestClone_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ContestClone_order_by!]
    """filter the rows returned"""
    where: ContestClone_bool_exp
  ): [ContestClone!]!
  """fetch data from the table: "ContestClone" using primary key columns"""
  ContestClone_by_pk(id: String!): ContestClone
  """
  fetch data from the table in a streaming manner: "ContestClone"
  """
  ContestClone_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ContestClone_stream_cursor_input]!
    """filter the rows returned"""
    where: ContestClone_bool_exp
  ): [ContestClone!]!
  """
  fetch data from the table: "ContestTemplate"
  """
  ContestTemplate(
    """distinct select on columns"""
    distinct_on: [ContestTemplate_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ContestTemplate_order_by!]
    """filter the rows returned"""
    where: ContestTemplate_bool_exp
  ): [ContestTemplate!]!
  """fetch data from the table: "ContestTemplate" using primary key columns"""
  ContestTemplate_by_pk(id: String!): ContestTemplate
  """
  fetch data from the table in a streaming manner: "ContestTemplate"
  """
  ContestTemplate_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ContestTemplate_stream_cursor_input]!
    """filter the rows returned"""
    where: ContestTemplate_bool_exp
  ): [ContestTemplate!]!
  """fetch data from the table: "Contest" using primary key columns"""
  Contest_by_pk(id: String!): Contest
  """
  fetch data from the table in a streaming manner: "Contest"
  """
  Contest_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Contest_stream_cursor_input]!
    """filter the rows returned"""
    where: Contest_bool_exp
  ): [Contest!]!
  """
  fetch data from the table: "ERCPointParams"
  """
  ERCPointParams(
    """distinct select on columns"""
    distinct_on: [ERCPointParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ERCPointParams_order_by!]
    """filter the rows returned"""
    where: ERCPointParams_bool_exp
  ): [ERCPointParams!]!
  """fetch data from the table: "ERCPointParams" using primary key columns"""
  ERCPointParams_by_pk(id: String!): ERCPointParams
  """
  fetch data from the table in a streaming manner: "ERCPointParams"
  """
  ERCPointParams_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ERCPointParams_stream_cursor_input]!
    """filter the rows returned"""
    where: ERCPointParams_bool_exp
  ): [ERCPointParams!]!
  """
  fetch data from the table: "EventPost"
  """
  EventPost(
    """distinct select on columns"""
    distinct_on: [EventPost_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [EventPost_order_by!]
    """filter the rows returned"""
    where: EventPost_bool_exp
  ): [EventPost!]!
  """fetch data from the table: "EventPost" using primary key columns"""
  EventPost_by_pk(id: String!): EventPost
  """
  fetch data from the table in a streaming manner: "EventPost"
  """
  EventPost_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [EventPost_stream_cursor_input]!
    """filter the rows returned"""
    where: EventPost_bool_exp
  ): [EventPost!]!
  """
  fetch data from the table: "FactoryEventsSummary"
  """
  FactoryEventsSummary(
    """distinct select on columns"""
    distinct_on: [FactoryEventsSummary_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FactoryEventsSummary_order_by!]
    """filter the rows returned"""
    where: FactoryEventsSummary_bool_exp
  ): [FactoryEventsSummary!]!
  """
  fetch data from the table: "FactoryEventsSummary" using primary key columns
  """
  FactoryEventsSummary_by_pk(id: String!): FactoryEventsSummary
  """
  fetch data from the table in a streaming manner: "FactoryEventsSummary"
  """
  FactoryEventsSummary_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [FactoryEventsSummary_stream_cursor_input]!
    """filter the rows returned"""
    where: FactoryEventsSummary_bool_exp
  ): [FactoryEventsSummary!]!
  """
  fetch data from the table: "GrantShipsVoting"
  """
  GrantShipsVoting(
    """distinct select on columns"""
    distinct_on: [GrantShipsVoting_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GrantShipsVoting_order_by!]
    """filter the rows returned"""
    where: GrantShipsVoting_bool_exp
  ): [GrantShipsVoting!]!
  """
  fetch data from the table: "GrantShipsVoting" using primary key columns
  """
  GrantShipsVoting_by_pk(id: String!): GrantShipsVoting
  """
  fetch data from the table in a streaming manner: "GrantShipsVoting"
  """
  GrantShipsVoting_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [GrantShipsVoting_stream_cursor_input]!
    """filter the rows returned"""
    where: GrantShipsVoting_bool_exp
  ): [GrantShipsVoting!]!
  """
  fetch data from the table: "HALParams"
  """
  HALParams(
    """distinct select on columns"""
    distinct_on: [HALParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [HALParams_order_by!]
    """filter the rows returned"""
    where: HALParams_bool_exp
  ): [HALParams!]!
  """fetch data from the table: "HALParams" using primary key columns"""
  HALParams_by_pk(id: String!): HALParams
  """
  fetch data from the table in a streaming manner: "HALParams"
  """
  HALParams_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [HALParams_stream_cursor_input]!
    """filter the rows returned"""
    where: HALParams_bool_exp
  ): [HALParams!]!
  """
  fetch data from the table: "HatsPoster"
  """
  HatsPoster(
    """distinct select on columns"""
    distinct_on: [HatsPoster_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [HatsPoster_order_by!]
    """filter the rows returned"""
    where: HatsPoster_bool_exp
  ): [HatsPoster!]!
  """fetch data from the table: "HatsPoster" using primary key columns"""
  HatsPoster_by_pk(id: String!): HatsPoster
  """
  fetch data from the table in a streaming manner: "HatsPoster"
  """
  HatsPoster_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [HatsPoster_stream_cursor_input]!
    """filter the rows returned"""
    where: HatsPoster_bool_exp
  ): [HatsPoster!]!
  """
  fetch data from the table: "LocalLog"
  """
  LocalLog(
    """distinct select on columns"""
    distinct_on: [LocalLog_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [LocalLog_order_by!]
    """filter the rows returned"""
    where: LocalLog_bool_exp
  ): [LocalLog!]!
  """fetch data from the table: "LocalLog" using primary key columns"""
  LocalLog_by_pk(id: String!): LocalLog
  """
  fetch data from the table in a streaming manner: "LocalLog"
  """
  LocalLog_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [LocalLog_stream_cursor_input]!
    """filter the rows returned"""
    where: LocalLog_bool_exp
  ): [LocalLog!]!
  """
  fetch data from the table: "ModuleTemplate"
  """
  ModuleTemplate(
    """distinct select on columns"""
    distinct_on: [ModuleTemplate_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ModuleTemplate_order_by!]
    """filter the rows returned"""
    where: ModuleTemplate_bool_exp
  ): [ModuleTemplate!]!
  """fetch data from the table: "ModuleTemplate" using primary key columns"""
  ModuleTemplate_by_pk(id: String!): ModuleTemplate
  """
  fetch data from the table in a streaming manner: "ModuleTemplate"
  """
  ModuleTemplate_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ModuleTemplate_stream_cursor_input]!
    """filter the rows returned"""
    where: ModuleTemplate_bool_exp
  ): [ModuleTemplate!]!
  """
  fetch data from the table: "Record"
  """
  Record(
    """distinct select on columns"""
    distinct_on: [Record_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Record_order_by!]
    """filter the rows returned"""
    where: Record_bool_exp
  ): [Record!]!
  """fetch data from the table: "Record" using primary key columns"""
  Record_by_pk(id: String!): Record
  """
  fetch data from the table in a streaming manner: "Record"
  """
  Record_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Record_stream_cursor_input]!
    """filter the rows returned"""
    where: Record_bool_exp
  ): [Record!]!
  """
  fetch data from the table: "ShipChoice"
  """
  ShipChoice(
    """distinct select on columns"""
    distinct_on: [ShipChoice_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipChoice_order_by!]
    """filter the rows returned"""
    where: ShipChoice_bool_exp
  ): [ShipChoice!]!
  """fetch data from the table: "ShipChoice" using primary key columns"""
  ShipChoice_by_pk(id: String!): ShipChoice
  """
  fetch data from the table in a streaming manner: "ShipChoice"
  """
  ShipChoice_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ShipChoice_stream_cursor_input]!
    """filter the rows returned"""
    where: ShipChoice_bool_exp
  ): [ShipChoice!]!
  """
  fetch data from the table: "ShipVote"
  """
  ShipVote(
    """distinct select on columns"""
    distinct_on: [ShipVote_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipVote_order_by!]
    """filter the rows returned"""
    where: ShipVote_bool_exp
  ): [ShipVote!]!
  """fetch data from the table: "ShipVote" using primary key columns"""
  ShipVote_by_pk(id: String!): ShipVote
  """
  fetch data from the table in a streaming manner: "ShipVote"
  """
  ShipVote_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ShipVote_stream_cursor_input]!
    """filter the rows returned"""
    where: ShipVote_bool_exp
  ): [ShipVote!]!
  """
  fetch data from the table: "StemModule"
  """
  StemModule(
    """distinct select on columns"""
    distinct_on: [StemModule_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [StemModule_order_by!]
    """filter the rows returned"""
    where: StemModule_bool_exp
  ): [StemModule!]!
  """fetch data from the table: "StemModule" using primary key columns"""
  StemModule_by_pk(id: String!): StemModule
  """
  fetch data from the table in a streaming manner: "StemModule"
  """
  StemModule_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [StemModule_stream_cursor_input]!
    """filter the rows returned"""
    where: StemModule_bool_exp
  ): [StemModule!]!
  """
  fetch data from the table: "TVParams"
  """
  TVParams(
    """distinct select on columns"""
    distinct_on: [TVParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [TVParams_order_by!]
    """filter the rows returned"""
    where: TVParams_bool_exp
  ): [TVParams!]!
  """fetch data from the table: "TVParams" using primary key columns"""
  TVParams_by_pk(id: String!): TVParams
  """
  fetch data from the table in a streaming manner: "TVParams"
  """
  TVParams_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [TVParams_stream_cursor_input]!
    """filter the rows returned"""
    where: TVParams_bool_exp
  ): [TVParams!]!
  """
  fetch data from the table: "Transaction"
  """
  Transaction(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]
    """filter the rows returned"""
    where: Transaction_bool_exp
  ): [Transaction!]!
  """fetch data from the table: "Transaction" using primary key columns"""
  Transaction_by_pk(id: String!): Transaction
  """
  fetch data from the table in a streaming manner: "Transaction"
  """
  Transaction_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Transaction_stream_cursor_input]!
    """filter the rows returned"""
    where: Transaction_bool_exp
  ): [Transaction!]!
  """
  fetch data from the table: "chain_metadata"
  """
  chain_metadata(
    """distinct select on columns"""
    distinct_on: [chain_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [chain_metadata_order_by!]
    """filter the rows returned"""
    where: chain_metadata_bool_exp
  ): [chain_metadata!]!
  """fetch data from the table: "chain_metadata" using primary key columns"""
  chain_metadata_by_pk(chain_id: Int!): chain_metadata
  """
  fetch data from the table in a streaming manner: "chain_metadata"
  """
  chain_metadata_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [chain_metadata_stream_cursor_input]!
    """filter the rows returned"""
    where: chain_metadata_bool_exp
  ): [chain_metadata!]!
  """
  fetch data from the table: "dynamic_contract_registry"
  """
  dynamic_contract_registry(
    """distinct select on columns"""
    distinct_on: [dynamic_contract_registry_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [dynamic_contract_registry_order_by!]
    """filter the rows returned"""
    where: dynamic_contract_registry_bool_exp
  ): [dynamic_contract_registry!]!
  """
  fetch data from the table: "dynamic_contract_registry" using primary key columns
  """
  dynamic_contract_registry_by_pk(chain_id: Int!, contract_address: String!): dynamic_contract_registry
  """
  fetch data from the table in a streaming manner: "dynamic_contract_registry"
  """
  dynamic_contract_registry_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [dynamic_contract_registry_stream_cursor_input]!
    """filter the rows returned"""
    where: dynamic_contract_registry_bool_exp
  ): [dynamic_contract_registry!]!
  """
  fetch data from the table: "entity_history"
  """
  entity_history(
    """distinct select on columns"""
    distinct_on: [entity_history_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_order_by!]
    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  """fetch data from the table: "entity_history" using primary key columns"""
  entity_history_by_pk(block_number: Int!, block_timestamp: Int!, chain_id: Int!, entity_id: String!, entity_type: entity_type!, log_index: Int!): entity_history
  """
  fetch data from the table: "entity_history_filter"
  """
  entity_history_filter(
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table: "entity_history_filter" using primary key columns
  """
  entity_history_filter_by_pk(block_number: Int!, chain_id: Int!, entity_id: String!, log_index: Int!, previous_block_number: Int!, previous_log_index: Int!): entity_history_filter
  """
  fetch data from the table in a streaming manner: "entity_history_filter"
  """
  entity_history_filter_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [entity_history_filter_stream_cursor_input]!
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table in a streaming manner: "entity_history"
  """
  entity_history_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [entity_history_stream_cursor_input]!
    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  """
  fetch data from the table: "event_sync_state"
  """
  event_sync_state(
    """distinct select on columns"""
    distinct_on: [event_sync_state_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [event_sync_state_order_by!]
    """filter the rows returned"""
    where: event_sync_state_bool_exp
  ): [event_sync_state!]!
  """
  fetch data from the table: "event_sync_state" using primary key columns
  """
  event_sync_state_by_pk(chain_id: Int!): event_sync_state
  """
  fetch data from the table in a streaming manner: "event_sync_state"
  """
  event_sync_state_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [event_sync_state_stream_cursor_input]!
    """filter the rows returned"""
    where: event_sync_state_bool_exp
  ): [event_sync_state!]!
  """This function helps search for articles"""
  get_entity_history_filter(
    """
    input parameters for function "get_entity_history_filter"
    """
    args: get_entity_history_filter_args!
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table: "persisted_state"
  """
  persisted_state(
    """distinct select on columns"""
    distinct_on: [persisted_state_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [persisted_state_order_by!]
    """filter the rows returned"""
    where: persisted_state_bool_exp
  ): [persisted_state!]!
  """fetch data from the table: "persisted_state" using primary key columns"""
  persisted_state_by_pk(id: Int!): persisted_state
  """
  fetch data from the table in a streaming manner: "persisted_state"
  """
  persisted_state_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [persisted_state_stream_cursor_input]!
    """filter the rows returned"""
    where: persisted_state_bool_exp
  ): [persisted_state!]!
  """
  fetch data from the table: "raw_events"
  """
  raw_events(
    """distinct select on columns"""
    distinct_on: [raw_events_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [raw_events_order_by!]
    """filter the rows returned"""
    where: raw_events_bool_exp
  ): [raw_events!]!
  """fetch data from the table: "raw_events" using primary key columns"""
  raw_events_by_pk(chain_id: Int!, event_id: numeric!): raw_events
  """
  fetch data from the table in a streaming manner: "raw_events"
  """
  raw_events_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [raw_events_stream_cursor_input]!
    """filter the rows returned"""
    where: raw_events_bool_exp
  ): [raw_events!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}