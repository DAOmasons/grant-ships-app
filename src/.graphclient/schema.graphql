schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type FeedItem {
  id: ID!
  timestamp: BigInt
  content: String!
  sender: Bytes!
  tag: String!
  subjectMetadataPointer: String!
  subjectId: ID!
  objectId: ID
  subject: FeedItemEntity!
  object: FeedItemEntity
  embed: FeedItemEmbed
  details: String
}

type FeedItemEmbed {
  id: ID!
  key: String
  pointer: String
  protocol: BigInt
  content: String
}

input FeedItemEmbed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  pointer: String
  pointer_not: String
  pointer_gt: String
  pointer_lt: String
  pointer_gte: String
  pointer_lte: String
  pointer_in: [String!]
  pointer_not_in: [String!]
  pointer_contains: String
  pointer_contains_nocase: String
  pointer_not_contains: String
  pointer_not_contains_nocase: String
  pointer_starts_with: String
  pointer_starts_with_nocase: String
  pointer_not_starts_with: String
  pointer_not_starts_with_nocase: String
  pointer_ends_with: String
  pointer_ends_with_nocase: String
  pointer_not_ends_with: String
  pointer_not_ends_with_nocase: String
  protocol: BigInt
  protocol_not: BigInt
  protocol_gt: BigInt
  protocol_lt: BigInt
  protocol_gte: BigInt
  protocol_lte: BigInt
  protocol_in: [BigInt!]
  protocol_not_in: [BigInt!]
  content: String
  content_not: String
  content_gt: String
  content_lt: String
  content_gte: String
  content_lte: String
  content_in: [String!]
  content_not_in: [String!]
  content_contains: String
  content_contains_nocase: String
  content_not_contains: String
  content_not_contains_nocase: String
  content_starts_with: String
  content_starts_with_nocase: String
  content_not_starts_with: String
  content_not_starts_with_nocase: String
  content_ends_with: String
  content_ends_with_nocase: String
  content_not_ends_with: String
  content_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeedItemEmbed_filter]
  or: [FeedItemEmbed_filter]
}

enum FeedItemEmbed_orderBy {
  id
  key
  pointer
  protocol
  content
}

type FeedItemEntity {
  id: ID!
  name: String!
  type: String!
}

input FeedItemEntity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeedItemEntity_filter]
  or: [FeedItemEntity_filter]
}

enum FeedItemEntity_orderBy {
  id
  name
  type
}

input FeedItem_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  content: String
  content_not: String
  content_gt: String
  content_lt: String
  content_gte: String
  content_lte: String
  content_in: [String!]
  content_not_in: [String!]
  content_contains: String
  content_contains_nocase: String
  content_not_contains: String
  content_not_contains_nocase: String
  content_starts_with: String
  content_starts_with_nocase: String
  content_not_starts_with: String
  content_not_starts_with_nocase: String
  content_ends_with: String
  content_ends_with_nocase: String
  content_not_ends_with: String
  content_not_ends_with_nocase: String
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  tag: String
  tag_not: String
  tag_gt: String
  tag_lt: String
  tag_gte: String
  tag_lte: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_contains: String
  tag_contains_nocase: String
  tag_not_contains: String
  tag_not_contains_nocase: String
  tag_starts_with: String
  tag_starts_with_nocase: String
  tag_not_starts_with: String
  tag_not_starts_with_nocase: String
  tag_ends_with: String
  tag_ends_with_nocase: String
  tag_not_ends_with: String
  tag_not_ends_with_nocase: String
  subjectMetadataPointer: String
  subjectMetadataPointer_not: String
  subjectMetadataPointer_gt: String
  subjectMetadataPointer_lt: String
  subjectMetadataPointer_gte: String
  subjectMetadataPointer_lte: String
  subjectMetadataPointer_in: [String!]
  subjectMetadataPointer_not_in: [String!]
  subjectMetadataPointer_contains: String
  subjectMetadataPointer_contains_nocase: String
  subjectMetadataPointer_not_contains: String
  subjectMetadataPointer_not_contains_nocase: String
  subjectMetadataPointer_starts_with: String
  subjectMetadataPointer_starts_with_nocase: String
  subjectMetadataPointer_not_starts_with: String
  subjectMetadataPointer_not_starts_with_nocase: String
  subjectMetadataPointer_ends_with: String
  subjectMetadataPointer_ends_with_nocase: String
  subjectMetadataPointer_not_ends_with: String
  subjectMetadataPointer_not_ends_with_nocase: String
  subjectId: ID
  subjectId_not: ID
  subjectId_gt: ID
  subjectId_lt: ID
  subjectId_gte: ID
  subjectId_lte: ID
  subjectId_in: [ID!]
  subjectId_not_in: [ID!]
  objectId: ID
  objectId_not: ID
  objectId_gt: ID
  objectId_lt: ID
  objectId_gte: ID
  objectId_lte: ID
  objectId_in: [ID!]
  objectId_not_in: [ID!]
  subject: String
  subject_not: String
  subject_gt: String
  subject_lt: String
  subject_gte: String
  subject_lte: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_contains: String
  subject_contains_nocase: String
  subject_not_contains: String
  subject_not_contains_nocase: String
  subject_starts_with: String
  subject_starts_with_nocase: String
  subject_not_starts_with: String
  subject_not_starts_with_nocase: String
  subject_ends_with: String
  subject_ends_with_nocase: String
  subject_not_ends_with: String
  subject_not_ends_with_nocase: String
  subject_: FeedItemEntity_filter
  object: String
  object_not: String
  object_gt: String
  object_lt: String
  object_gte: String
  object_lte: String
  object_in: [String!]
  object_not_in: [String!]
  object_contains: String
  object_contains_nocase: String
  object_not_contains: String
  object_not_contains_nocase: String
  object_starts_with: String
  object_starts_with_nocase: String
  object_not_starts_with: String
  object_not_starts_with_nocase: String
  object_ends_with: String
  object_ends_with_nocase: String
  object_not_ends_with: String
  object_not_ends_with_nocase: String
  object_: FeedItemEntity_filter
  embed: String
  embed_not: String
  embed_gt: String
  embed_lt: String
  embed_gte: String
  embed_lte: String
  embed_in: [String!]
  embed_not_in: [String!]
  embed_contains: String
  embed_contains_nocase: String
  embed_not_contains: String
  embed_not_contains_nocase: String
  embed_starts_with: String
  embed_starts_with_nocase: String
  embed_not_starts_with: String
  embed_not_starts_with_nocase: String
  embed_ends_with: String
  embed_ends_with_nocase: String
  embed_not_ends_with: String
  embed_not_ends_with_nocase: String
  embed_: FeedItemEmbed_filter
  details: String
  details_not: String
  details_gt: String
  details_lt: String
  details_gte: String
  details_lte: String
  details_in: [String!]
  details_not_in: [String!]
  details_contains: String
  details_contains_nocase: String
  details_not_contains: String
  details_not_contains_nocase: String
  details_starts_with: String
  details_starts_with_nocase: String
  details_not_starts_with: String
  details_not_starts_with_nocase: String
  details_ends_with: String
  details_ends_with_nocase: String
  details_not_ends_with: String
  details_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeedItem_filter]
  or: [FeedItem_filter]
}

enum FeedItem_orderBy {
  id
  timestamp
  content
  sender
  tag
  subjectMetadataPointer
  subjectId
  objectId
  subject
  subject__id
  subject__name
  subject__type
  object
  object__id
  object__name
  object__type
  embed
  embed__id
  embed__key
  embed__pointer
  embed__protocol
  embed__content
  details
}

type GameManager {
  id: Bytes!
  poolId: BigInt!
  gameFacilitatorId: BigInt!
  rootAccount: Bytes!
  tokenAddress: Bytes!
  currentRoundId: BigInt!
  currentRound: GameRound
  poolFunds: BigInt!
}

input GameManager_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  poolId: BigInt
  poolId_not: BigInt
  poolId_gt: BigInt
  poolId_lt: BigInt
  poolId_gte: BigInt
  poolId_lte: BigInt
  poolId_in: [BigInt!]
  poolId_not_in: [BigInt!]
  gameFacilitatorId: BigInt
  gameFacilitatorId_not: BigInt
  gameFacilitatorId_gt: BigInt
  gameFacilitatorId_lt: BigInt
  gameFacilitatorId_gte: BigInt
  gameFacilitatorId_lte: BigInt
  gameFacilitatorId_in: [BigInt!]
  gameFacilitatorId_not_in: [BigInt!]
  rootAccount: Bytes
  rootAccount_not: Bytes
  rootAccount_gt: Bytes
  rootAccount_lt: Bytes
  rootAccount_gte: Bytes
  rootAccount_lte: Bytes
  rootAccount_in: [Bytes!]
  rootAccount_not_in: [Bytes!]
  rootAccount_contains: Bytes
  rootAccount_not_contains: Bytes
  tokenAddress: Bytes
  tokenAddress_not: Bytes
  tokenAddress_gt: Bytes
  tokenAddress_lt: Bytes
  tokenAddress_gte: Bytes
  tokenAddress_lte: Bytes
  tokenAddress_in: [Bytes!]
  tokenAddress_not_in: [Bytes!]
  tokenAddress_contains: Bytes
  tokenAddress_not_contains: Bytes
  currentRoundId: BigInt
  currentRoundId_not: BigInt
  currentRoundId_gt: BigInt
  currentRoundId_lt: BigInt
  currentRoundId_gte: BigInt
  currentRoundId_lte: BigInt
  currentRoundId_in: [BigInt!]
  currentRoundId_not_in: [BigInt!]
  currentRound: String
  currentRound_not: String
  currentRound_gt: String
  currentRound_lt: String
  currentRound_gte: String
  currentRound_lte: String
  currentRound_in: [String!]
  currentRound_not_in: [String!]
  currentRound_contains: String
  currentRound_contains_nocase: String
  currentRound_not_contains: String
  currentRound_not_contains_nocase: String
  currentRound_starts_with: String
  currentRound_starts_with_nocase: String
  currentRound_not_starts_with: String
  currentRound_not_starts_with_nocase: String
  currentRound_ends_with: String
  currentRound_ends_with_nocase: String
  currentRound_not_ends_with: String
  currentRound_not_ends_with_nocase: String
  currentRound_: GameRound_filter
  poolFunds: BigInt
  poolFunds_not: BigInt
  poolFunds_gt: BigInt
  poolFunds_lt: BigInt
  poolFunds_gte: BigInt
  poolFunds_lte: BigInt
  poolFunds_in: [BigInt!]
  poolFunds_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GameManager_filter]
  or: [GameManager_filter]
}

enum GameManager_orderBy {
  id
  poolId
  gameFacilitatorId
  rootAccount
  tokenAddress
  currentRoundId
  currentRound
  currentRound__id
  currentRound__startTime
  currentRound__endTime
  currentRound__totalRoundAmount
  currentRound__totalAllocatedAmount
  currentRound__totalDistributedAmount
  currentRound__gameStatus
  currentRound__isGameActive
  currentRound__realStartTime
  currentRound__realEndTime
  poolFunds
}

type GameRound {
  id: ID!
  startTime: BigInt!
  endTime: BigInt!
  totalRoundAmount: BigInt!
  totalAllocatedAmount: BigInt!
  totalDistributedAmount: BigInt!
  gameStatus: Int!
  ships(skip: Int = 0, first: Int = 100, orderBy: GrantShip_orderBy, orderDirection: OrderDirection, where: GrantShip_filter): [GrantShip!]!
  isGameActive: Boolean!
  realStartTime: BigInt
  realEndTime: BigInt
}

input GameRound_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  startTime: BigInt
  startTime_not: BigInt
  startTime_gt: BigInt
  startTime_lt: BigInt
  startTime_gte: BigInt
  startTime_lte: BigInt
  startTime_in: [BigInt!]
  startTime_not_in: [BigInt!]
  endTime: BigInt
  endTime_not: BigInt
  endTime_gt: BigInt
  endTime_lt: BigInt
  endTime_gte: BigInt
  endTime_lte: BigInt
  endTime_in: [BigInt!]
  endTime_not_in: [BigInt!]
  totalRoundAmount: BigInt
  totalRoundAmount_not: BigInt
  totalRoundAmount_gt: BigInt
  totalRoundAmount_lt: BigInt
  totalRoundAmount_gte: BigInt
  totalRoundAmount_lte: BigInt
  totalRoundAmount_in: [BigInt!]
  totalRoundAmount_not_in: [BigInt!]
  totalAllocatedAmount: BigInt
  totalAllocatedAmount_not: BigInt
  totalAllocatedAmount_gt: BigInt
  totalAllocatedAmount_lt: BigInt
  totalAllocatedAmount_gte: BigInt
  totalAllocatedAmount_lte: BigInt
  totalAllocatedAmount_in: [BigInt!]
  totalAllocatedAmount_not_in: [BigInt!]
  totalDistributedAmount: BigInt
  totalDistributedAmount_not: BigInt
  totalDistributedAmount_gt: BigInt
  totalDistributedAmount_lt: BigInt
  totalDistributedAmount_gte: BigInt
  totalDistributedAmount_lte: BigInt
  totalDistributedAmount_in: [BigInt!]
  totalDistributedAmount_not_in: [BigInt!]
  gameStatus: Int
  gameStatus_not: Int
  gameStatus_gt: Int
  gameStatus_lt: Int
  gameStatus_gte: Int
  gameStatus_lte: Int
  gameStatus_in: [Int!]
  gameStatus_not_in: [Int!]
  ships: [String!]
  ships_not: [String!]
  ships_contains: [String!]
  ships_contains_nocase: [String!]
  ships_not_contains: [String!]
  ships_not_contains_nocase: [String!]
  ships_: GrantShip_filter
  isGameActive: Boolean
  isGameActive_not: Boolean
  isGameActive_in: [Boolean!]
  isGameActive_not_in: [Boolean!]
  realStartTime: BigInt
  realStartTime_not: BigInt
  realStartTime_gt: BigInt
  realStartTime_lt: BigInt
  realStartTime_gte: BigInt
  realStartTime_lte: BigInt
  realStartTime_in: [BigInt!]
  realStartTime_not_in: [BigInt!]
  realEndTime: BigInt
  realEndTime_not: BigInt
  realEndTime_gt: BigInt
  realEndTime_lt: BigInt
  realEndTime_gte: BigInt
  realEndTime_lte: BigInt
  realEndTime_in: [BigInt!]
  realEndTime_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GameRound_filter]
  or: [GameRound_filter]
}

enum GameRound_orderBy {
  id
  startTime
  endTime
  totalRoundAmount
  totalAllocatedAmount
  totalDistributedAmount
  gameStatus
  ships
  isGameActive
  realStartTime
  realEndTime
}

type Grant {
  id: ID!
  projectId: Project!
  shipId: GrantShip!
  lastUpdated: BigInt!
  grantStatus: Int!
  grantApplicationBytes: Bytes!
  currentMilestoneIndex: BigInt!
  milestonesAmount: BigInt!
  milestones(skip: Int = 0, first: Int = 100, orderBy: Milestone_orderBy, orderDirection: OrderDirection, where: Milestone_filter): [Milestone!]
  shipApprovalReason: RawMetadata
  hasShipApproved: Boolean
  amtAllocated: BigInt!
  amtDistributed: BigInt!
  allocatedBy: Bytes
  facilitatorReason: RawMetadata
  hasFacilitatorApproved: Boolean
  milestonesApproved: Boolean
  milestonesApprovedReason: RawMetadata
  currentMilestoneRejectedReason: RawMetadata
}

type GrantShip {
  id: Bytes!
  profileId: Bytes!
  nonce: BigInt!
  name: String!
  profileMetadata: RawMetadata!
  owner: Bytes!
  anchor: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  status: Int!
  poolFunded: Boolean!
  balance: BigInt!
  totalAvailableFunds: BigInt!
  totalAllocated: BigInt!
  totalDistributed: BigInt!
  grants(skip: Int = 0, first: Int = 100, orderBy: Grant_orderBy, orderDirection: OrderDirection, where: Grant_filter): [Grant!]!
  alloProfileMembers: ProfileMemberGroup
  shipApplicationBytesData: Bytes
  applicationSubmittedTime: BigInt
  isAwaitingApproval: Boolean
  hasSubmittedApplication: Boolean
  isApproved: Boolean
  approvedTime: BigInt
  isRejected: Boolean
  rejectedTime: BigInt
  applicationReviewReason: RawMetadata
  poolId: BigInt
  hatId: BigInt
  shipContractAddress: Bytes
  shipLaunched: Boolean
  poolActive: Boolean
  isAllocated: Boolean
  isDistributed: Boolean
}

input GrantShip_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  profileId: Bytes
  profileId_not: Bytes
  profileId_gt: Bytes
  profileId_lt: Bytes
  profileId_gte: Bytes
  profileId_lte: Bytes
  profileId_in: [Bytes!]
  profileId_not_in: [Bytes!]
  profileId_contains: Bytes
  profileId_not_contains: Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  profileMetadata: String
  profileMetadata_not: String
  profileMetadata_gt: String
  profileMetadata_lt: String
  profileMetadata_gte: String
  profileMetadata_lte: String
  profileMetadata_in: [String!]
  profileMetadata_not_in: [String!]
  profileMetadata_contains: String
  profileMetadata_contains_nocase: String
  profileMetadata_not_contains: String
  profileMetadata_not_contains_nocase: String
  profileMetadata_starts_with: String
  profileMetadata_starts_with_nocase: String
  profileMetadata_not_starts_with: String
  profileMetadata_not_starts_with_nocase: String
  profileMetadata_ends_with: String
  profileMetadata_ends_with_nocase: String
  profileMetadata_not_ends_with: String
  profileMetadata_not_ends_with_nocase: String
  profileMetadata_: RawMetadata_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  anchor: Bytes
  anchor_not: Bytes
  anchor_gt: Bytes
  anchor_lt: Bytes
  anchor_gte: Bytes
  anchor_lte: Bytes
  anchor_in: [Bytes!]
  anchor_not_in: [Bytes!]
  anchor_contains: Bytes
  anchor_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  poolFunded: Boolean
  poolFunded_not: Boolean
  poolFunded_in: [Boolean!]
  poolFunded_not_in: [Boolean!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  totalAvailableFunds: BigInt
  totalAvailableFunds_not: BigInt
  totalAvailableFunds_gt: BigInt
  totalAvailableFunds_lt: BigInt
  totalAvailableFunds_gte: BigInt
  totalAvailableFunds_lte: BigInt
  totalAvailableFunds_in: [BigInt!]
  totalAvailableFunds_not_in: [BigInt!]
  totalAllocated: BigInt
  totalAllocated_not: BigInt
  totalAllocated_gt: BigInt
  totalAllocated_lt: BigInt
  totalAllocated_gte: BigInt
  totalAllocated_lte: BigInt
  totalAllocated_in: [BigInt!]
  totalAllocated_not_in: [BigInt!]
  totalDistributed: BigInt
  totalDistributed_not: BigInt
  totalDistributed_gt: BigInt
  totalDistributed_lt: BigInt
  totalDistributed_gte: BigInt
  totalDistributed_lte: BigInt
  totalDistributed_in: [BigInt!]
  totalDistributed_not_in: [BigInt!]
  grants_: Grant_filter
  alloProfileMembers: String
  alloProfileMembers_not: String
  alloProfileMembers_gt: String
  alloProfileMembers_lt: String
  alloProfileMembers_gte: String
  alloProfileMembers_lte: String
  alloProfileMembers_in: [String!]
  alloProfileMembers_not_in: [String!]
  alloProfileMembers_contains: String
  alloProfileMembers_contains_nocase: String
  alloProfileMembers_not_contains: String
  alloProfileMembers_not_contains_nocase: String
  alloProfileMembers_starts_with: String
  alloProfileMembers_starts_with_nocase: String
  alloProfileMembers_not_starts_with: String
  alloProfileMembers_not_starts_with_nocase: String
  alloProfileMembers_ends_with: String
  alloProfileMembers_ends_with_nocase: String
  alloProfileMembers_not_ends_with: String
  alloProfileMembers_not_ends_with_nocase: String
  alloProfileMembers_: ProfileMemberGroup_filter
  shipApplicationBytesData: Bytes
  shipApplicationBytesData_not: Bytes
  shipApplicationBytesData_gt: Bytes
  shipApplicationBytesData_lt: Bytes
  shipApplicationBytesData_gte: Bytes
  shipApplicationBytesData_lte: Bytes
  shipApplicationBytesData_in: [Bytes!]
  shipApplicationBytesData_not_in: [Bytes!]
  shipApplicationBytesData_contains: Bytes
  shipApplicationBytesData_not_contains: Bytes
  applicationSubmittedTime: BigInt
  applicationSubmittedTime_not: BigInt
  applicationSubmittedTime_gt: BigInt
  applicationSubmittedTime_lt: BigInt
  applicationSubmittedTime_gte: BigInt
  applicationSubmittedTime_lte: BigInt
  applicationSubmittedTime_in: [BigInt!]
  applicationSubmittedTime_not_in: [BigInt!]
  isAwaitingApproval: Boolean
  isAwaitingApproval_not: Boolean
  isAwaitingApproval_in: [Boolean!]
  isAwaitingApproval_not_in: [Boolean!]
  hasSubmittedApplication: Boolean
  hasSubmittedApplication_not: Boolean
  hasSubmittedApplication_in: [Boolean!]
  hasSubmittedApplication_not_in: [Boolean!]
  isApproved: Boolean
  isApproved_not: Boolean
  isApproved_in: [Boolean!]
  isApproved_not_in: [Boolean!]
  approvedTime: BigInt
  approvedTime_not: BigInt
  approvedTime_gt: BigInt
  approvedTime_lt: BigInt
  approvedTime_gte: BigInt
  approvedTime_lte: BigInt
  approvedTime_in: [BigInt!]
  approvedTime_not_in: [BigInt!]
  isRejected: Boolean
  isRejected_not: Boolean
  isRejected_in: [Boolean!]
  isRejected_not_in: [Boolean!]
  rejectedTime: BigInt
  rejectedTime_not: BigInt
  rejectedTime_gt: BigInt
  rejectedTime_lt: BigInt
  rejectedTime_gte: BigInt
  rejectedTime_lte: BigInt
  rejectedTime_in: [BigInt!]
  rejectedTime_not_in: [BigInt!]
  applicationReviewReason: String
  applicationReviewReason_not: String
  applicationReviewReason_gt: String
  applicationReviewReason_lt: String
  applicationReviewReason_gte: String
  applicationReviewReason_lte: String
  applicationReviewReason_in: [String!]
  applicationReviewReason_not_in: [String!]
  applicationReviewReason_contains: String
  applicationReviewReason_contains_nocase: String
  applicationReviewReason_not_contains: String
  applicationReviewReason_not_contains_nocase: String
  applicationReviewReason_starts_with: String
  applicationReviewReason_starts_with_nocase: String
  applicationReviewReason_not_starts_with: String
  applicationReviewReason_not_starts_with_nocase: String
  applicationReviewReason_ends_with: String
  applicationReviewReason_ends_with_nocase: String
  applicationReviewReason_not_ends_with: String
  applicationReviewReason_not_ends_with_nocase: String
  applicationReviewReason_: RawMetadata_filter
  poolId: BigInt
  poolId_not: BigInt
  poolId_gt: BigInt
  poolId_lt: BigInt
  poolId_gte: BigInt
  poolId_lte: BigInt
  poolId_in: [BigInt!]
  poolId_not_in: [BigInt!]
  hatId: BigInt
  hatId_not: BigInt
  hatId_gt: BigInt
  hatId_lt: BigInt
  hatId_gte: BigInt
  hatId_lte: BigInt
  hatId_in: [BigInt!]
  hatId_not_in: [BigInt!]
  shipContractAddress: Bytes
  shipContractAddress_not: Bytes
  shipContractAddress_gt: Bytes
  shipContractAddress_lt: Bytes
  shipContractAddress_gte: Bytes
  shipContractAddress_lte: Bytes
  shipContractAddress_in: [Bytes!]
  shipContractAddress_not_in: [Bytes!]
  shipContractAddress_contains: Bytes
  shipContractAddress_not_contains: Bytes
  shipLaunched: Boolean
  shipLaunched_not: Boolean
  shipLaunched_in: [Boolean!]
  shipLaunched_not_in: [Boolean!]
  poolActive: Boolean
  poolActive_not: Boolean
  poolActive_in: [Boolean!]
  poolActive_not_in: [Boolean!]
  isAllocated: Boolean
  isAllocated_not: Boolean
  isAllocated_in: [Boolean!]
  isAllocated_not_in: [Boolean!]
  isDistributed: Boolean
  isDistributed_not: Boolean
  isDistributed_in: [Boolean!]
  isDistributed_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GrantShip_filter]
  or: [GrantShip_filter]
}

enum GrantShip_orderBy {
  id
  profileId
  nonce
  name
  profileMetadata
  profileMetadata__id
  profileMetadata__protocol
  profileMetadata__pointer
  owner
  anchor
  blockNumber
  blockTimestamp
  transactionHash
  status
  poolFunded
  balance
  totalAvailableFunds
  totalAllocated
  totalDistributed
  grants
  alloProfileMembers
  alloProfileMembers__id
  shipApplicationBytesData
  applicationSubmittedTime
  isAwaitingApproval
  hasSubmittedApplication
  isApproved
  approvedTime
  isRejected
  rejectedTime
  applicationReviewReason
  applicationReviewReason__id
  applicationReviewReason__protocol
  applicationReviewReason__pointer
  poolId
  hatId
  shipContractAddress
  shipLaunched
  poolActive
  isAllocated
  isDistributed
}

input Grant_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  projectId: String
  projectId_not: String
  projectId_gt: String
  projectId_lt: String
  projectId_gte: String
  projectId_lte: String
  projectId_in: [String!]
  projectId_not_in: [String!]
  projectId_contains: String
  projectId_contains_nocase: String
  projectId_not_contains: String
  projectId_not_contains_nocase: String
  projectId_starts_with: String
  projectId_starts_with_nocase: String
  projectId_not_starts_with: String
  projectId_not_starts_with_nocase: String
  projectId_ends_with: String
  projectId_ends_with_nocase: String
  projectId_not_ends_with: String
  projectId_not_ends_with_nocase: String
  projectId_: Project_filter
  shipId: String
  shipId_not: String
  shipId_gt: String
  shipId_lt: String
  shipId_gte: String
  shipId_lte: String
  shipId_in: [String!]
  shipId_not_in: [String!]
  shipId_contains: String
  shipId_contains_nocase: String
  shipId_not_contains: String
  shipId_not_contains_nocase: String
  shipId_starts_with: String
  shipId_starts_with_nocase: String
  shipId_not_starts_with: String
  shipId_not_starts_with_nocase: String
  shipId_ends_with: String
  shipId_ends_with_nocase: String
  shipId_not_ends_with: String
  shipId_not_ends_with_nocase: String
  shipId_: GrantShip_filter
  lastUpdated: BigInt
  lastUpdated_not: BigInt
  lastUpdated_gt: BigInt
  lastUpdated_lt: BigInt
  lastUpdated_gte: BigInt
  lastUpdated_lte: BigInt
  lastUpdated_in: [BigInt!]
  lastUpdated_not_in: [BigInt!]
  grantStatus: Int
  grantStatus_not: Int
  grantStatus_gt: Int
  grantStatus_lt: Int
  grantStatus_gte: Int
  grantStatus_lte: Int
  grantStatus_in: [Int!]
  grantStatus_not_in: [Int!]
  grantApplicationBytes: Bytes
  grantApplicationBytes_not: Bytes
  grantApplicationBytes_gt: Bytes
  grantApplicationBytes_lt: Bytes
  grantApplicationBytes_gte: Bytes
  grantApplicationBytes_lte: Bytes
  grantApplicationBytes_in: [Bytes!]
  grantApplicationBytes_not_in: [Bytes!]
  grantApplicationBytes_contains: Bytes
  grantApplicationBytes_not_contains: Bytes
  currentMilestoneIndex: BigInt
  currentMilestoneIndex_not: BigInt
  currentMilestoneIndex_gt: BigInt
  currentMilestoneIndex_lt: BigInt
  currentMilestoneIndex_gte: BigInt
  currentMilestoneIndex_lte: BigInt
  currentMilestoneIndex_in: [BigInt!]
  currentMilestoneIndex_not_in: [BigInt!]
  milestonesAmount: BigInt
  milestonesAmount_not: BigInt
  milestonesAmount_gt: BigInt
  milestonesAmount_lt: BigInt
  milestonesAmount_gte: BigInt
  milestonesAmount_lte: BigInt
  milestonesAmount_in: [BigInt!]
  milestonesAmount_not_in: [BigInt!]
  milestones: [String!]
  milestones_not: [String!]
  milestones_contains: [String!]
  milestones_contains_nocase: [String!]
  milestones_not_contains: [String!]
  milestones_not_contains_nocase: [String!]
  milestones_: Milestone_filter
  shipApprovalReason: String
  shipApprovalReason_not: String
  shipApprovalReason_gt: String
  shipApprovalReason_lt: String
  shipApprovalReason_gte: String
  shipApprovalReason_lte: String
  shipApprovalReason_in: [String!]
  shipApprovalReason_not_in: [String!]
  shipApprovalReason_contains: String
  shipApprovalReason_contains_nocase: String
  shipApprovalReason_not_contains: String
  shipApprovalReason_not_contains_nocase: String
  shipApprovalReason_starts_with: String
  shipApprovalReason_starts_with_nocase: String
  shipApprovalReason_not_starts_with: String
  shipApprovalReason_not_starts_with_nocase: String
  shipApprovalReason_ends_with: String
  shipApprovalReason_ends_with_nocase: String
  shipApprovalReason_not_ends_with: String
  shipApprovalReason_not_ends_with_nocase: String
  shipApprovalReason_: RawMetadata_filter
  hasShipApproved: Boolean
  hasShipApproved_not: Boolean
  hasShipApproved_in: [Boolean!]
  hasShipApproved_not_in: [Boolean!]
  amtAllocated: BigInt
  amtAllocated_not: BigInt
  amtAllocated_gt: BigInt
  amtAllocated_lt: BigInt
  amtAllocated_gte: BigInt
  amtAllocated_lte: BigInt
  amtAllocated_in: [BigInt!]
  amtAllocated_not_in: [BigInt!]
  amtDistributed: BigInt
  amtDistributed_not: BigInt
  amtDistributed_gt: BigInt
  amtDistributed_lt: BigInt
  amtDistributed_gte: BigInt
  amtDistributed_lte: BigInt
  amtDistributed_in: [BigInt!]
  amtDistributed_not_in: [BigInt!]
  allocatedBy: Bytes
  allocatedBy_not: Bytes
  allocatedBy_gt: Bytes
  allocatedBy_lt: Bytes
  allocatedBy_gte: Bytes
  allocatedBy_lte: Bytes
  allocatedBy_in: [Bytes!]
  allocatedBy_not_in: [Bytes!]
  allocatedBy_contains: Bytes
  allocatedBy_not_contains: Bytes
  facilitatorReason: String
  facilitatorReason_not: String
  facilitatorReason_gt: String
  facilitatorReason_lt: String
  facilitatorReason_gte: String
  facilitatorReason_lte: String
  facilitatorReason_in: [String!]
  facilitatorReason_not_in: [String!]
  facilitatorReason_contains: String
  facilitatorReason_contains_nocase: String
  facilitatorReason_not_contains: String
  facilitatorReason_not_contains_nocase: String
  facilitatorReason_starts_with: String
  facilitatorReason_starts_with_nocase: String
  facilitatorReason_not_starts_with: String
  facilitatorReason_not_starts_with_nocase: String
  facilitatorReason_ends_with: String
  facilitatorReason_ends_with_nocase: String
  facilitatorReason_not_ends_with: String
  facilitatorReason_not_ends_with_nocase: String
  facilitatorReason_: RawMetadata_filter
  hasFacilitatorApproved: Boolean
  hasFacilitatorApproved_not: Boolean
  hasFacilitatorApproved_in: [Boolean!]
  hasFacilitatorApproved_not_in: [Boolean!]
  milestonesApproved: Boolean
  milestonesApproved_not: Boolean
  milestonesApproved_in: [Boolean!]
  milestonesApproved_not_in: [Boolean!]
  milestonesApprovedReason: String
  milestonesApprovedReason_not: String
  milestonesApprovedReason_gt: String
  milestonesApprovedReason_lt: String
  milestonesApprovedReason_gte: String
  milestonesApprovedReason_lte: String
  milestonesApprovedReason_in: [String!]
  milestonesApprovedReason_not_in: [String!]
  milestonesApprovedReason_contains: String
  milestonesApprovedReason_contains_nocase: String
  milestonesApprovedReason_not_contains: String
  milestonesApprovedReason_not_contains_nocase: String
  milestonesApprovedReason_starts_with: String
  milestonesApprovedReason_starts_with_nocase: String
  milestonesApprovedReason_not_starts_with: String
  milestonesApprovedReason_not_starts_with_nocase: String
  milestonesApprovedReason_ends_with: String
  milestonesApprovedReason_ends_with_nocase: String
  milestonesApprovedReason_not_ends_with: String
  milestonesApprovedReason_not_ends_with_nocase: String
  milestonesApprovedReason_: RawMetadata_filter
  currentMilestoneRejectedReason: String
  currentMilestoneRejectedReason_not: String
  currentMilestoneRejectedReason_gt: String
  currentMilestoneRejectedReason_lt: String
  currentMilestoneRejectedReason_gte: String
  currentMilestoneRejectedReason_lte: String
  currentMilestoneRejectedReason_in: [String!]
  currentMilestoneRejectedReason_not_in: [String!]
  currentMilestoneRejectedReason_contains: String
  currentMilestoneRejectedReason_contains_nocase: String
  currentMilestoneRejectedReason_not_contains: String
  currentMilestoneRejectedReason_not_contains_nocase: String
  currentMilestoneRejectedReason_starts_with: String
  currentMilestoneRejectedReason_starts_with_nocase: String
  currentMilestoneRejectedReason_not_starts_with: String
  currentMilestoneRejectedReason_not_starts_with_nocase: String
  currentMilestoneRejectedReason_ends_with: String
  currentMilestoneRejectedReason_ends_with_nocase: String
  currentMilestoneRejectedReason_not_ends_with: String
  currentMilestoneRejectedReason_not_ends_with_nocase: String
  currentMilestoneRejectedReason_: RawMetadata_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Grant_filter]
  or: [Grant_filter]
}

enum Grant_orderBy {
  id
  projectId
  projectId__id
  projectId__profileId
  projectId__status
  projectId__nonce
  projectId__name
  projectId__owner
  projectId__anchor
  projectId__blockNumber
  projectId__blockTimestamp
  projectId__transactionHash
  projectId__totalAmountReceived
  shipId
  shipId__id
  shipId__profileId
  shipId__nonce
  shipId__name
  shipId__owner
  shipId__anchor
  shipId__blockNumber
  shipId__blockTimestamp
  shipId__transactionHash
  shipId__status
  shipId__poolFunded
  shipId__balance
  shipId__totalAvailableFunds
  shipId__totalAllocated
  shipId__totalDistributed
  shipId__shipApplicationBytesData
  shipId__applicationSubmittedTime
  shipId__isAwaitingApproval
  shipId__hasSubmittedApplication
  shipId__isApproved
  shipId__approvedTime
  shipId__isRejected
  shipId__rejectedTime
  shipId__poolId
  shipId__hatId
  shipId__shipContractAddress
  shipId__shipLaunched
  shipId__poolActive
  shipId__isAllocated
  shipId__isDistributed
  lastUpdated
  grantStatus
  grantApplicationBytes
  currentMilestoneIndex
  milestonesAmount
  milestones
  shipApprovalReason
  shipApprovalReason__id
  shipApprovalReason__protocol
  shipApprovalReason__pointer
  hasShipApproved
  amtAllocated
  amtDistributed
  allocatedBy
  facilitatorReason
  facilitatorReason__id
  facilitatorReason__protocol
  facilitatorReason__pointer
  hasFacilitatorApproved
  milestonesApproved
  milestonesApprovedReason
  milestonesApprovedReason__id
  milestonesApprovedReason__protocol
  milestonesApprovedReason__pointer
  currentMilestoneRejectedReason
  currentMilestoneRejectedReason__id
  currentMilestoneRejectedReason__protocol
  currentMilestoneRejectedReason__pointer
}

"""
8 bytes signed integer

"""
scalar Int8

type Log {
  id: ID!
  message: String!
  description: String
  type: String!
}

input Log_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Log_filter]
  or: [Log_filter]
}

enum Log_orderBy {
  id
  message
  description
  type
}

type Milestone {
  id: ID!
  amountPercentage: Bytes!
  mmetadata: BigInt!
  amount: BigInt!
  status: Int!
  lastUpdated: BigInt!
}

input Milestone_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amountPercentage: Bytes
  amountPercentage_not: Bytes
  amountPercentage_gt: Bytes
  amountPercentage_lt: Bytes
  amountPercentage_gte: Bytes
  amountPercentage_lte: Bytes
  amountPercentage_in: [Bytes!]
  amountPercentage_not_in: [Bytes!]
  amountPercentage_contains: Bytes
  amountPercentage_not_contains: Bytes
  mmetadata: BigInt
  mmetadata_not: BigInt
  mmetadata_gt: BigInt
  mmetadata_lt: BigInt
  mmetadata_gte: BigInt
  mmetadata_lte: BigInt
  mmetadata_in: [BigInt!]
  mmetadata_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  lastUpdated: BigInt
  lastUpdated_not: BigInt
  lastUpdated_gt: BigInt
  lastUpdated_lt: BigInt
  lastUpdated_gte: BigInt
  lastUpdated_lte: BigInt
  lastUpdated_in: [BigInt!]
  lastUpdated_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Milestone_filter]
  or: [Milestone_filter]
}

enum Milestone_orderBy {
  id
  amountPercentage
  mmetadata
  amount
  status
  lastUpdated
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PoolIdLookup {
  id: ID!
  entityId: Bytes!
}

input PoolIdLookup_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  entityId: Bytes
  entityId_not: Bytes
  entityId_gt: Bytes
  entityId_lt: Bytes
  entityId_gte: Bytes
  entityId_lte: Bytes
  entityId_in: [Bytes!]
  entityId_not_in: [Bytes!]
  entityId_contains: Bytes
  entityId_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolIdLookup_filter]
  or: [PoolIdLookup_filter]
}

enum PoolIdLookup_orderBy {
  id
  entityId
}

type ProfileMemberGroup {
  id: Bytes!
  addresses: [Bytes!]
}

input ProfileMemberGroup_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  addresses: [Bytes!]
  addresses_not: [Bytes!]
  addresses_contains: [Bytes!]
  addresses_contains_nocase: [Bytes!]
  addresses_not_contains: [Bytes!]
  addresses_not_contains_nocase: [Bytes!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProfileMemberGroup_filter]
  or: [ProfileMemberGroup_filter]
}

enum ProfileMemberGroup_orderBy {
  id
  addresses
}

type Project {
  id: Bytes!
  profileId: Bytes!
  status: Int!
  nonce: BigInt!
  name: String!
  metadata: RawMetadata!
  owner: Bytes!
  anchor: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  grants(skip: Int = 0, first: Int = 100, orderBy: Grant_orderBy, orderDirection: OrderDirection, where: Grant_filter): [Grant!]!
  members: ProfileMemberGroup
  totalAmountReceived: BigInt!
}

input Project_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  profileId: Bytes
  profileId_not: Bytes
  profileId_gt: Bytes
  profileId_lt: Bytes
  profileId_gte: Bytes
  profileId_lte: Bytes
  profileId_in: [Bytes!]
  profileId_not_in: [Bytes!]
  profileId_contains: Bytes
  profileId_not_contains: Bytes
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  metadata: String
  metadata_not: String
  metadata_gt: String
  metadata_lt: String
  metadata_gte: String
  metadata_lte: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  metadata_: RawMetadata_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  anchor: Bytes
  anchor_not: Bytes
  anchor_gt: Bytes
  anchor_lt: Bytes
  anchor_gte: Bytes
  anchor_lte: Bytes
  anchor_in: [Bytes!]
  anchor_not_in: [Bytes!]
  anchor_contains: Bytes
  anchor_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  grants_: Grant_filter
  members: String
  members_not: String
  members_gt: String
  members_lt: String
  members_gte: String
  members_lte: String
  members_in: [String!]
  members_not_in: [String!]
  members_contains: String
  members_contains_nocase: String
  members_not_contains: String
  members_not_contains_nocase: String
  members_starts_with: String
  members_starts_with_nocase: String
  members_not_starts_with: String
  members_not_starts_with_nocase: String
  members_ends_with: String
  members_ends_with_nocase: String
  members_not_ends_with: String
  members_not_ends_with_nocase: String
  members_: ProfileMemberGroup_filter
  totalAmountReceived: BigInt
  totalAmountReceived_not: BigInt
  totalAmountReceived_gt: BigInt
  totalAmountReceived_lt: BigInt
  totalAmountReceived_gte: BigInt
  totalAmountReceived_lte: BigInt
  totalAmountReceived_in: [BigInt!]
  totalAmountReceived_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Project_filter]
  or: [Project_filter]
}

enum Project_orderBy {
  id
  profileId
  status
  nonce
  name
  metadata
  metadata__id
  metadata__protocol
  metadata__pointer
  owner
  anchor
  blockNumber
  blockTimestamp
  transactionHash
  grants
  members
  members__id
  totalAmountReceived
}

type Query {
  project(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Project
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: Project_orderBy
    orderDirection: OrderDirection
    where: Project_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  feedItem(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedItem
  feedItems(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedItem_orderBy
    orderDirection: OrderDirection
    where: FeedItem_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedItem!]!
  feedItemEntity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedItemEntity
  feedItemEntities(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedItemEntity_orderBy
    orderDirection: OrderDirection
    where: FeedItemEntity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedItemEntity!]!
  feedItemEmbed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedItemEmbed
  feedItemEmbeds(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedItemEmbed_orderBy
    orderDirection: OrderDirection
    where: FeedItemEmbed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedItemEmbed!]!
  grantShip(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GrantShip
  grantShips(
    skip: Int = 0
    first: Int = 100
    orderBy: GrantShip_orderBy
    orderDirection: OrderDirection
    where: GrantShip_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GrantShip!]!
  poolIdLookup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolIdLookup
  poolIdLookups(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolIdLookup_orderBy
    orderDirection: OrderDirection
    where: PoolIdLookup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolIdLookup!]!
  gameManager(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameManager
  gameManagers(
    skip: Int = 0
    first: Int = 100
    orderBy: GameManager_orderBy
    orderDirection: OrderDirection
    where: GameManager_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameManager!]!
  gameRound(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameRound
  gameRounds(
    skip: Int = 0
    first: Int = 100
    orderBy: GameRound_orderBy
    orderDirection: OrderDirection
    where: GameRound_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameRound!]!
  grant(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Grant
  grants(
    skip: Int = 0
    first: Int = 100
    orderBy: Grant_orderBy
    orderDirection: OrderDirection
    where: Grant_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Grant!]!
  milestone(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Milestone
  milestones(
    skip: Int = 0
    first: Int = 100
    orderBy: Milestone_orderBy
    orderDirection: OrderDirection
    where: Milestone_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Milestone!]!
  profileMemberGroup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProfileMemberGroup
  profileMemberGroups(
    skip: Int = 0
    first: Int = 100
    orderBy: ProfileMemberGroup_orderBy
    orderDirection: OrderDirection
    where: ProfileMemberGroup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProfileMemberGroup!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  rawMetadata(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RawMetadata
  rawMetadata_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: RawMetadata_orderBy
    orderDirection: OrderDirection
    where: RawMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RawMetadata!]!
  log(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Log
  logs(
    skip: Int = 0
    first: Int = 100
    orderBy: Log_orderBy
    orderDirection: OrderDirection
    where: Log_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Log!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RawMetadata {
  id: String!
  protocol: BigInt!
  pointer: String!
}

input RawMetadata_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  protocol: BigInt
  protocol_not: BigInt
  protocol_gt: BigInt
  protocol_lt: BigInt
  protocol_gte: BigInt
  protocol_lte: BigInt
  protocol_in: [BigInt!]
  protocol_not_in: [BigInt!]
  pointer: String
  pointer_not: String
  pointer_gt: String
  pointer_lt: String
  pointer_gte: String
  pointer_lte: String
  pointer_in: [String!]
  pointer_not_in: [String!]
  pointer_contains: String
  pointer_contains_nocase: String
  pointer_not_contains: String
  pointer_not_contains_nocase: String
  pointer_starts_with: String
  pointer_starts_with_nocase: String
  pointer_not_starts_with: String
  pointer_not_starts_with_nocase: String
  pointer_ends_with: String
  pointer_ends_with_nocase: String
  pointer_not_ends_with: String
  pointer_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RawMetadata_filter]
  or: [RawMetadata_filter]
}

enum RawMetadata_orderBy {
  id
  protocol
  pointer
}

type Subscription {
  project(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Project
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: Project_orderBy
    orderDirection: OrderDirection
    where: Project_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  feedItem(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedItem
  feedItems(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedItem_orderBy
    orderDirection: OrderDirection
    where: FeedItem_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedItem!]!
  feedItemEntity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedItemEntity
  feedItemEntities(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedItemEntity_orderBy
    orderDirection: OrderDirection
    where: FeedItemEntity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedItemEntity!]!
  feedItemEmbed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedItemEmbed
  feedItemEmbeds(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedItemEmbed_orderBy
    orderDirection: OrderDirection
    where: FeedItemEmbed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedItemEmbed!]!
  grantShip(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GrantShip
  grantShips(
    skip: Int = 0
    first: Int = 100
    orderBy: GrantShip_orderBy
    orderDirection: OrderDirection
    where: GrantShip_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GrantShip!]!
  poolIdLookup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolIdLookup
  poolIdLookups(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolIdLookup_orderBy
    orderDirection: OrderDirection
    where: PoolIdLookup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolIdLookup!]!
  gameManager(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameManager
  gameManagers(
    skip: Int = 0
    first: Int = 100
    orderBy: GameManager_orderBy
    orderDirection: OrderDirection
    where: GameManager_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameManager!]!
  gameRound(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameRound
  gameRounds(
    skip: Int = 0
    first: Int = 100
    orderBy: GameRound_orderBy
    orderDirection: OrderDirection
    where: GameRound_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameRound!]!
  grant(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Grant
  grants(
    skip: Int = 0
    first: Int = 100
    orderBy: Grant_orderBy
    orderDirection: OrderDirection
    where: Grant_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Grant!]!
  milestone(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Milestone
  milestones(
    skip: Int = 0
    first: Int = 100
    orderBy: Milestone_orderBy
    orderDirection: OrderDirection
    where: Milestone_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Milestone!]!
  profileMemberGroup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProfileMemberGroup
  profileMemberGroups(
    skip: Int = 0
    first: Int = 100
    orderBy: ProfileMemberGroup_orderBy
    orderDirection: OrderDirection
    where: ProfileMemberGroup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProfileMemberGroup!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  rawMetadata(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RawMetadata
  rawMetadata_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: RawMetadata_orderBy
    orderDirection: OrderDirection
    where: RawMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RawMetadata!]!
  log(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Log
  logs(
    skip: Int = 0
    first: Int = 100
    orderBy: Log_orderBy
    orderDirection: OrderDirection
    where: Log_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Log!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Transaction {
  id: ID!
  blockNumber: BigInt!
  sender: Bytes!
  txHash: Bytes!
}

input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transaction_filter]
  or: [Transaction_filter]
}

enum Transaction_orderBy {
  id
  blockNumber
  sender
  txHash
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}