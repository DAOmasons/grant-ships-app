schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60
  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

type Query {
  project(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Project
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: Project_orderBy
    orderDirection: OrderDirection
    where: Project_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  feedItem(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedItem
  feedItems(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedItem_orderBy
    orderDirection: OrderDirection
    where: FeedItem_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedItem!]!
  feedItemEntity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedItemEntity
  feedItemEntities(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedItemEntity_orderBy
    orderDirection: OrderDirection
    where: FeedItemEntity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedItemEntity!]!
  feedItemEmbed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedItemEmbed
  feedItemEmbeds(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedItemEmbed_orderBy
    orderDirection: OrderDirection
    where: FeedItemEmbed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedItemEmbed!]!
  update(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Update
  updates(
    skip: Int = 0
    first: Int = 100
    orderBy: Update_orderBy
    orderDirection: OrderDirection
    where: Update_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Update!]!
  grantShip(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GrantShip
  grantShips(
    skip: Int = 0
    first: Int = 100
    orderBy: GrantShip_orderBy
    orderDirection: OrderDirection
    where: GrantShip_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GrantShip!]!
  poolIdLookup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolIdLookup
  poolIdLookups(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolIdLookup_orderBy
    orderDirection: OrderDirection
    where: PoolIdLookup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolIdLookup!]!
  gameManager(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameManager
  gameManagers(
    skip: Int = 0
    first: Int = 100
    orderBy: GameManager_orderBy
    orderDirection: OrderDirection
    where: GameManager_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameManager!]!
  gameRound(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameRound
  gameRounds(
    skip: Int = 0
    first: Int = 100
    orderBy: GameRound_orderBy
    orderDirection: OrderDirection
    where: GameRound_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameRound!]!
  applicationHistory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ApplicationHistory
  applicationHistories(
    skip: Int = 0
    first: Int = 100
    orderBy: ApplicationHistory_orderBy
    orderDirection: OrderDirection
    where: ApplicationHistory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ApplicationHistory!]!
  grant(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Grant
  grants(
    skip: Int = 0
    first: Int = 100
    orderBy: Grant_orderBy
    orderDirection: OrderDirection
    where: Grant_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Grant!]!
  milestone(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Milestone
  milestones(
    skip: Int = 0
    first: Int = 100
    orderBy: Milestone_orderBy
    orderDirection: OrderDirection
    where: Milestone_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Milestone!]!
  profileIdToAnchor(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProfileIdToAnchor
  profileIdToAnchors(
    skip: Int = 0
    first: Int = 100
    orderBy: ProfileIdToAnchor_orderBy
    orderDirection: OrderDirection
    where: ProfileIdToAnchor_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProfileIdToAnchor!]!
  profileMemberGroup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProfileMemberGroup
  profileMemberGroups(
    skip: Int = 0
    first: Int = 100
    orderBy: ProfileMemberGroup_orderBy
    orderDirection: OrderDirection
    where: ProfileMemberGroup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProfileMemberGroup!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  rawMetadata(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RawMetadata
  rawMetadata_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: RawMetadata_orderBy
    orderDirection: OrderDirection
    where: RawMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RawMetadata!]!
  log(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Log
  logs(
    skip: Int = 0
    first: Int = 100
    orderBy: Log_orderBy
    orderDirection: OrderDirection
    where: Log_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Log!]!
  gmVersion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GmVersion
  gmVersions(
    skip: Int = 0
    first: Int = 100
    orderBy: GmVersion_orderBy
    orderDirection: OrderDirection
    where: GmVersion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GmVersion!]!
  gmDeployment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GmDeployment
  gmDeployments(
    skip: Int = 0
    first: Int = 100
    orderBy: GmDeployment_orderBy
    orderDirection: OrderDirection
    where: GmDeployment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GmDeployment!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  """
  fetch data from the table: "Contest"
  """
  Contest(
    """distinct select on columns"""
    distinct_on: [Contest_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Contest_order_by!]
    """filter the rows returned"""
    where: Contest_bool_exp
  ): [Contest!]!
  """
  fetch data from the table: "ContestClone"
  """
  ContestClone(
    """distinct select on columns"""
    distinct_on: [ContestClone_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ContestClone_order_by!]
    """filter the rows returned"""
    where: ContestClone_bool_exp
  ): [ContestClone!]!
  """fetch data from the table: "ContestClone" using primary key columns"""
  ContestClone_by_pk(id: String!): ContestClone
  """
  fetch data from the table: "ContestTemplate"
  """
  ContestTemplate(
    """distinct select on columns"""
    distinct_on: [ContestTemplate_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ContestTemplate_order_by!]
    """filter the rows returned"""
    where: ContestTemplate_bool_exp
  ): [ContestTemplate!]!
  """fetch data from the table: "ContestTemplate" using primary key columns"""
  ContestTemplate_by_pk(id: String!): ContestTemplate
  """fetch data from the table: "Contest" using primary key columns"""
  Contest_by_pk(id: String!): Contest
  """
  fetch data from the table: "ERCPointParams"
  """
  ERCPointParams(
    """distinct select on columns"""
    distinct_on: [ERCPointParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ERCPointParams_order_by!]
    """filter the rows returned"""
    where: ERCPointParams_bool_exp
  ): [ERCPointParams!]!
  """fetch data from the table: "ERCPointParams" using primary key columns"""
  ERCPointParams_by_pk(id: String!): ERCPointParams
  """
  fetch data from the table: "EnvioTX"
  """
  EnvioTX(
    """distinct select on columns"""
    distinct_on: [EnvioTX_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [EnvioTX_order_by!]
    """filter the rows returned"""
    where: EnvioTX_bool_exp
  ): [EnvioTX!]!
  """fetch data from the table: "EnvioTX" using primary key columns"""
  EnvioTX_by_pk(id: String!): EnvioTX
  """
  fetch data from the table: "EventPost"
  """
  EventPost(
    """distinct select on columns"""
    distinct_on: [EventPost_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [EventPost_order_by!]
    """filter the rows returned"""
    where: EventPost_bool_exp
  ): [EventPost!]!
  """fetch data from the table: "EventPost" using primary key columns"""
  EventPost_by_pk(id: String!): EventPost
  """
  fetch data from the table: "FactoryEventsSummary"
  """
  FactoryEventsSummary(
    """distinct select on columns"""
    distinct_on: [FactoryEventsSummary_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FactoryEventsSummary_order_by!]
    """filter the rows returned"""
    where: FactoryEventsSummary_bool_exp
  ): [FactoryEventsSummary!]!
  """
  fetch data from the table: "FactoryEventsSummary" using primary key columns
  """
  FactoryEventsSummary_by_pk(id: String!): FactoryEventsSummary
  """
  fetch data from the table: "GrantShipsVoting"
  """
  GrantShipsVoting(
    """distinct select on columns"""
    distinct_on: [GrantShipsVoting_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GrantShipsVoting_order_by!]
    """filter the rows returned"""
    where: GrantShipsVoting_bool_exp
  ): [GrantShipsVoting!]!
  """
  fetch data from the table: "GrantShipsVoting" using primary key columns
  """
  GrantShipsVoting_by_pk(id: String!): GrantShipsVoting
  """
  fetch data from the table: "HALParams"
  """
  HALParams(
    """distinct select on columns"""
    distinct_on: [HALParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [HALParams_order_by!]
    """filter the rows returned"""
    where: HALParams_bool_exp
  ): [HALParams!]!
  """fetch data from the table: "HALParams" using primary key columns"""
  HALParams_by_pk(id: String!): HALParams
  """
  fetch data from the table: "HatsPoster"
  """
  HatsPoster(
    """distinct select on columns"""
    distinct_on: [HatsPoster_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [HatsPoster_order_by!]
    """filter the rows returned"""
    where: HatsPoster_bool_exp
  ): [HatsPoster!]!
  """fetch data from the table: "HatsPoster" using primary key columns"""
  HatsPoster_by_pk(id: String!): HatsPoster
  """
  fetch data from the table: "LocalLog"
  """
  LocalLog(
    """distinct select on columns"""
    distinct_on: [LocalLog_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [LocalLog_order_by!]
    """filter the rows returned"""
    where: LocalLog_bool_exp
  ): [LocalLog!]!
  """fetch data from the table: "LocalLog" using primary key columns"""
  LocalLog_by_pk(id: String!): LocalLog
  """
  fetch data from the table: "ModuleTemplate"
  """
  ModuleTemplate(
    """distinct select on columns"""
    distinct_on: [ModuleTemplate_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ModuleTemplate_order_by!]
    """filter the rows returned"""
    where: ModuleTemplate_bool_exp
  ): [ModuleTemplate!]!
  """fetch data from the table: "ModuleTemplate" using primary key columns"""
  ModuleTemplate_by_pk(id: String!): ModuleTemplate
  """
  fetch data from the table: "Record"
  """
  Record(
    """distinct select on columns"""
    distinct_on: [Record_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Record_order_by!]
    """filter the rows returned"""
    where: Record_bool_exp
  ): [Record!]!
  """fetch data from the table: "Record" using primary key columns"""
  Record_by_pk(id: String!): Record
  """
  fetch data from the table: "ShipChoice"
  """
  ShipChoice(
    """distinct select on columns"""
    distinct_on: [ShipChoice_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipChoice_order_by!]
    """filter the rows returned"""
    where: ShipChoice_bool_exp
  ): [ShipChoice!]!
  """fetch data from the table: "ShipChoice" using primary key columns"""
  ShipChoice_by_pk(id: String!): ShipChoice
  """
  fetch data from the table: "ShipVote"
  """
  ShipVote(
    """distinct select on columns"""
    distinct_on: [ShipVote_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipVote_order_by!]
    """filter the rows returned"""
    where: ShipVote_bool_exp
  ): [ShipVote!]!
  """fetch data from the table: "ShipVote" using primary key columns"""
  ShipVote_by_pk(id: String!): ShipVote
  """
  fetch data from the table: "StemModule"
  """
  StemModule(
    """distinct select on columns"""
    distinct_on: [StemModule_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [StemModule_order_by!]
    """filter the rows returned"""
    where: StemModule_bool_exp
  ): [StemModule!]!
  """fetch data from the table: "StemModule" using primary key columns"""
  StemModule_by_pk(id: String!): StemModule
  """
  fetch data from the table: "TVParams"
  """
  TVParams(
    """distinct select on columns"""
    distinct_on: [TVParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [TVParams_order_by!]
    """filter the rows returned"""
    where: TVParams_bool_exp
  ): [TVParams!]!
  """fetch data from the table: "TVParams" using primary key columns"""
  TVParams_by_pk(id: String!): TVParams
  """
  fetch data from the table: "chain_metadata"
  """
  chain_metadata(
    """distinct select on columns"""
    distinct_on: [chain_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [chain_metadata_order_by!]
    """filter the rows returned"""
    where: chain_metadata_bool_exp
  ): [chain_metadata!]!
  """fetch data from the table: "chain_metadata" using primary key columns"""
  chain_metadata_by_pk(chain_id: Int!): chain_metadata
  """
  fetch data from the table: "dynamic_contract_registry"
  """
  dynamic_contract_registry(
    """distinct select on columns"""
    distinct_on: [dynamic_contract_registry_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [dynamic_contract_registry_order_by!]
    """filter the rows returned"""
    where: dynamic_contract_registry_bool_exp
  ): [dynamic_contract_registry!]!
  """
  fetch data from the table: "dynamic_contract_registry" using primary key columns
  """
  dynamic_contract_registry_by_pk(chain_id: Int!, contract_address: String!): dynamic_contract_registry
  """
  fetch data from the table: "entity_history"
  """
  entity_history(
    """distinct select on columns"""
    distinct_on: [entity_history_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_order_by!]
    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  """fetch data from the table: "entity_history" using primary key columns"""
  entity_history_by_pk(block_number: Int!, block_timestamp: Int!, chain_id: Int!, entity_id: String!, entity_type: entity_type!, log_index: Int!): entity_history
  """
  fetch data from the table: "entity_history_filter"
  """
  entity_history_filter(
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table: "entity_history_filter" using primary key columns
  """
  entity_history_filter_by_pk(block_number: Int!, chain_id: Int!, entity_id: String!, log_index: Int!, previous_block_number: Int!, previous_log_index: Int!): entity_history_filter
  """
  fetch data from the table: "event_sync_state"
  """
  event_sync_state(
    """distinct select on columns"""
    distinct_on: [event_sync_state_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [event_sync_state_order_by!]
    """filter the rows returned"""
    where: event_sync_state_bool_exp
  ): [event_sync_state!]!
  """
  fetch data from the table: "event_sync_state" using primary key columns
  """
  event_sync_state_by_pk(chain_id: Int!): event_sync_state
  """This function helps search for articles"""
  get_entity_history_filter(
    """
    input parameters for function "get_entity_history_filter"
    """
    args: get_entity_history_filter_args!
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table: "persisted_state"
  """
  persisted_state(
    """distinct select on columns"""
    distinct_on: [persisted_state_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [persisted_state_order_by!]
    """filter the rows returned"""
    where: persisted_state_bool_exp
  ): [persisted_state!]!
  """fetch data from the table: "persisted_state" using primary key columns"""
  persisted_state_by_pk(id: Int!): persisted_state
  """
  fetch data from the table: "raw_events"
  """
  raw_events(
    """distinct select on columns"""
    distinct_on: [raw_events_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [raw_events_order_by!]
    """filter the rows returned"""
    where: raw_events_bool_exp
  ): [raw_events!]!
  """fetch data from the table: "raw_events" using primary key columns"""
  raw_events_by_pk(chain_id: Int!, event_id: numeric!): raw_events
}

type Subscription {
  project(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Project
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: Project_orderBy
    orderDirection: OrderDirection
    where: Project_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  feedItem(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedItem
  feedItems(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedItem_orderBy
    orderDirection: OrderDirection
    where: FeedItem_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedItem!]!
  feedItemEntity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedItemEntity
  feedItemEntities(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedItemEntity_orderBy
    orderDirection: OrderDirection
    where: FeedItemEntity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedItemEntity!]!
  feedItemEmbed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeedItemEmbed
  feedItemEmbeds(
    skip: Int = 0
    first: Int = 100
    orderBy: FeedItemEmbed_orderBy
    orderDirection: OrderDirection
    where: FeedItemEmbed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeedItemEmbed!]!
  update(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Update
  updates(
    skip: Int = 0
    first: Int = 100
    orderBy: Update_orderBy
    orderDirection: OrderDirection
    where: Update_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Update!]!
  grantShip(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GrantShip
  grantShips(
    skip: Int = 0
    first: Int = 100
    orderBy: GrantShip_orderBy
    orderDirection: OrderDirection
    where: GrantShip_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GrantShip!]!
  poolIdLookup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolIdLookup
  poolIdLookups(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolIdLookup_orderBy
    orderDirection: OrderDirection
    where: PoolIdLookup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolIdLookup!]!
  gameManager(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameManager
  gameManagers(
    skip: Int = 0
    first: Int = 100
    orderBy: GameManager_orderBy
    orderDirection: OrderDirection
    where: GameManager_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameManager!]!
  gameRound(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameRound
  gameRounds(
    skip: Int = 0
    first: Int = 100
    orderBy: GameRound_orderBy
    orderDirection: OrderDirection
    where: GameRound_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameRound!]!
  applicationHistory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ApplicationHistory
  applicationHistories(
    skip: Int = 0
    first: Int = 100
    orderBy: ApplicationHistory_orderBy
    orderDirection: OrderDirection
    where: ApplicationHistory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ApplicationHistory!]!
  grant(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Grant
  grants(
    skip: Int = 0
    first: Int = 100
    orderBy: Grant_orderBy
    orderDirection: OrderDirection
    where: Grant_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Grant!]!
  milestone(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Milestone
  milestones(
    skip: Int = 0
    first: Int = 100
    orderBy: Milestone_orderBy
    orderDirection: OrderDirection
    where: Milestone_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Milestone!]!
  profileIdToAnchor(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProfileIdToAnchor
  profileIdToAnchors(
    skip: Int = 0
    first: Int = 100
    orderBy: ProfileIdToAnchor_orderBy
    orderDirection: OrderDirection
    where: ProfileIdToAnchor_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProfileIdToAnchor!]!
  profileMemberGroup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProfileMemberGroup
  profileMemberGroups(
    skip: Int = 0
    first: Int = 100
    orderBy: ProfileMemberGroup_orderBy
    orderDirection: OrderDirection
    where: ProfileMemberGroup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProfileMemberGroup!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  rawMetadata(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RawMetadata
  rawMetadata_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: RawMetadata_orderBy
    orderDirection: OrderDirection
    where: RawMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RawMetadata!]!
  log(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Log
  logs(
    skip: Int = 0
    first: Int = 100
    orderBy: Log_orderBy
    orderDirection: OrderDirection
    where: Log_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Log!]!
  gmVersion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GmVersion
  gmVersions(
    skip: Int = 0
    first: Int = 100
    orderBy: GmVersion_orderBy
    orderDirection: OrderDirection
    where: GmVersion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GmVersion!]!
  gmDeployment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GmDeployment
  gmDeployments(
    skip: Int = 0
    first: Int = 100
    orderBy: GmDeployment_orderBy
    orderDirection: OrderDirection
    where: GmDeployment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GmDeployment!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  """
  fetch data from the table: "Contest"
  """
  Contest(
    """distinct select on columns"""
    distinct_on: [Contest_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Contest_order_by!]
    """filter the rows returned"""
    where: Contest_bool_exp
  ): [Contest!]!
  """
  fetch data from the table: "ContestClone"
  """
  ContestClone(
    """distinct select on columns"""
    distinct_on: [ContestClone_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ContestClone_order_by!]
    """filter the rows returned"""
    where: ContestClone_bool_exp
  ): [ContestClone!]!
  """fetch data from the table: "ContestClone" using primary key columns"""
  ContestClone_by_pk(id: String!): ContestClone
  """
  fetch data from the table in a streaming manner: "ContestClone"
  """
  ContestClone_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ContestClone_stream_cursor_input]!
    """filter the rows returned"""
    where: ContestClone_bool_exp
  ): [ContestClone!]!
  """
  fetch data from the table: "ContestTemplate"
  """
  ContestTemplate(
    """distinct select on columns"""
    distinct_on: [ContestTemplate_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ContestTemplate_order_by!]
    """filter the rows returned"""
    where: ContestTemplate_bool_exp
  ): [ContestTemplate!]!
  """fetch data from the table: "ContestTemplate" using primary key columns"""
  ContestTemplate_by_pk(id: String!): ContestTemplate
  """
  fetch data from the table in a streaming manner: "ContestTemplate"
  """
  ContestTemplate_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ContestTemplate_stream_cursor_input]!
    """filter the rows returned"""
    where: ContestTemplate_bool_exp
  ): [ContestTemplate!]!
  """fetch data from the table: "Contest" using primary key columns"""
  Contest_by_pk(id: String!): Contest
  """
  fetch data from the table in a streaming manner: "Contest"
  """
  Contest_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Contest_stream_cursor_input]!
    """filter the rows returned"""
    where: Contest_bool_exp
  ): [Contest!]!
  """
  fetch data from the table: "ERCPointParams"
  """
  ERCPointParams(
    """distinct select on columns"""
    distinct_on: [ERCPointParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ERCPointParams_order_by!]
    """filter the rows returned"""
    where: ERCPointParams_bool_exp
  ): [ERCPointParams!]!
  """fetch data from the table: "ERCPointParams" using primary key columns"""
  ERCPointParams_by_pk(id: String!): ERCPointParams
  """
  fetch data from the table in a streaming manner: "ERCPointParams"
  """
  ERCPointParams_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ERCPointParams_stream_cursor_input]!
    """filter the rows returned"""
    where: ERCPointParams_bool_exp
  ): [ERCPointParams!]!
  """
  fetch data from the table: "EnvioTX"
  """
  EnvioTX(
    """distinct select on columns"""
    distinct_on: [EnvioTX_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [EnvioTX_order_by!]
    """filter the rows returned"""
    where: EnvioTX_bool_exp
  ): [EnvioTX!]!
  """fetch data from the table: "EnvioTX" using primary key columns"""
  EnvioTX_by_pk(id: String!): EnvioTX
  """
  fetch data from the table in a streaming manner: "EnvioTX"
  """
  EnvioTX_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [EnvioTX_stream_cursor_input]!
    """filter the rows returned"""
    where: EnvioTX_bool_exp
  ): [EnvioTX!]!
  """
  fetch data from the table: "EventPost"
  """
  EventPost(
    """distinct select on columns"""
    distinct_on: [EventPost_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [EventPost_order_by!]
    """filter the rows returned"""
    where: EventPost_bool_exp
  ): [EventPost!]!
  """fetch data from the table: "EventPost" using primary key columns"""
  EventPost_by_pk(id: String!): EventPost
  """
  fetch data from the table in a streaming manner: "EventPost"
  """
  EventPost_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [EventPost_stream_cursor_input]!
    """filter the rows returned"""
    where: EventPost_bool_exp
  ): [EventPost!]!
  """
  fetch data from the table: "FactoryEventsSummary"
  """
  FactoryEventsSummary(
    """distinct select on columns"""
    distinct_on: [FactoryEventsSummary_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [FactoryEventsSummary_order_by!]
    """filter the rows returned"""
    where: FactoryEventsSummary_bool_exp
  ): [FactoryEventsSummary!]!
  """
  fetch data from the table: "FactoryEventsSummary" using primary key columns
  """
  FactoryEventsSummary_by_pk(id: String!): FactoryEventsSummary
  """
  fetch data from the table in a streaming manner: "FactoryEventsSummary"
  """
  FactoryEventsSummary_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [FactoryEventsSummary_stream_cursor_input]!
    """filter the rows returned"""
    where: FactoryEventsSummary_bool_exp
  ): [FactoryEventsSummary!]!
  """
  fetch data from the table: "GrantShipsVoting"
  """
  GrantShipsVoting(
    """distinct select on columns"""
    distinct_on: [GrantShipsVoting_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [GrantShipsVoting_order_by!]
    """filter the rows returned"""
    where: GrantShipsVoting_bool_exp
  ): [GrantShipsVoting!]!
  """
  fetch data from the table: "GrantShipsVoting" using primary key columns
  """
  GrantShipsVoting_by_pk(id: String!): GrantShipsVoting
  """
  fetch data from the table in a streaming manner: "GrantShipsVoting"
  """
  GrantShipsVoting_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [GrantShipsVoting_stream_cursor_input]!
    """filter the rows returned"""
    where: GrantShipsVoting_bool_exp
  ): [GrantShipsVoting!]!
  """
  fetch data from the table: "HALParams"
  """
  HALParams(
    """distinct select on columns"""
    distinct_on: [HALParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [HALParams_order_by!]
    """filter the rows returned"""
    where: HALParams_bool_exp
  ): [HALParams!]!
  """fetch data from the table: "HALParams" using primary key columns"""
  HALParams_by_pk(id: String!): HALParams
  """
  fetch data from the table in a streaming manner: "HALParams"
  """
  HALParams_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [HALParams_stream_cursor_input]!
    """filter the rows returned"""
    where: HALParams_bool_exp
  ): [HALParams!]!
  """
  fetch data from the table: "HatsPoster"
  """
  HatsPoster(
    """distinct select on columns"""
    distinct_on: [HatsPoster_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [HatsPoster_order_by!]
    """filter the rows returned"""
    where: HatsPoster_bool_exp
  ): [HatsPoster!]!
  """fetch data from the table: "HatsPoster" using primary key columns"""
  HatsPoster_by_pk(id: String!): HatsPoster
  """
  fetch data from the table in a streaming manner: "HatsPoster"
  """
  HatsPoster_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [HatsPoster_stream_cursor_input]!
    """filter the rows returned"""
    where: HatsPoster_bool_exp
  ): [HatsPoster!]!
  """
  fetch data from the table: "LocalLog"
  """
  LocalLog(
    """distinct select on columns"""
    distinct_on: [LocalLog_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [LocalLog_order_by!]
    """filter the rows returned"""
    where: LocalLog_bool_exp
  ): [LocalLog!]!
  """fetch data from the table: "LocalLog" using primary key columns"""
  LocalLog_by_pk(id: String!): LocalLog
  """
  fetch data from the table in a streaming manner: "LocalLog"
  """
  LocalLog_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [LocalLog_stream_cursor_input]!
    """filter the rows returned"""
    where: LocalLog_bool_exp
  ): [LocalLog!]!
  """
  fetch data from the table: "ModuleTemplate"
  """
  ModuleTemplate(
    """distinct select on columns"""
    distinct_on: [ModuleTemplate_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ModuleTemplate_order_by!]
    """filter the rows returned"""
    where: ModuleTemplate_bool_exp
  ): [ModuleTemplate!]!
  """fetch data from the table: "ModuleTemplate" using primary key columns"""
  ModuleTemplate_by_pk(id: String!): ModuleTemplate
  """
  fetch data from the table in a streaming manner: "ModuleTemplate"
  """
  ModuleTemplate_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ModuleTemplate_stream_cursor_input]!
    """filter the rows returned"""
    where: ModuleTemplate_bool_exp
  ): [ModuleTemplate!]!
  """
  fetch data from the table: "Record"
  """
  Record(
    """distinct select on columns"""
    distinct_on: [Record_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Record_order_by!]
    """filter the rows returned"""
    where: Record_bool_exp
  ): [Record!]!
  """fetch data from the table: "Record" using primary key columns"""
  Record_by_pk(id: String!): Record
  """
  fetch data from the table in a streaming manner: "Record"
  """
  Record_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [Record_stream_cursor_input]!
    """filter the rows returned"""
    where: Record_bool_exp
  ): [Record!]!
  """
  fetch data from the table: "ShipChoice"
  """
  ShipChoice(
    """distinct select on columns"""
    distinct_on: [ShipChoice_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipChoice_order_by!]
    """filter the rows returned"""
    where: ShipChoice_bool_exp
  ): [ShipChoice!]!
  """fetch data from the table: "ShipChoice" using primary key columns"""
  ShipChoice_by_pk(id: String!): ShipChoice
  """
  fetch data from the table in a streaming manner: "ShipChoice"
  """
  ShipChoice_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ShipChoice_stream_cursor_input]!
    """filter the rows returned"""
    where: ShipChoice_bool_exp
  ): [ShipChoice!]!
  """
  fetch data from the table: "ShipVote"
  """
  ShipVote(
    """distinct select on columns"""
    distinct_on: [ShipVote_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipVote_order_by!]
    """filter the rows returned"""
    where: ShipVote_bool_exp
  ): [ShipVote!]!
  """fetch data from the table: "ShipVote" using primary key columns"""
  ShipVote_by_pk(id: String!): ShipVote
  """
  fetch data from the table in a streaming manner: "ShipVote"
  """
  ShipVote_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [ShipVote_stream_cursor_input]!
    """filter the rows returned"""
    where: ShipVote_bool_exp
  ): [ShipVote!]!
  """
  fetch data from the table: "StemModule"
  """
  StemModule(
    """distinct select on columns"""
    distinct_on: [StemModule_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [StemModule_order_by!]
    """filter the rows returned"""
    where: StemModule_bool_exp
  ): [StemModule!]!
  """fetch data from the table: "StemModule" using primary key columns"""
  StemModule_by_pk(id: String!): StemModule
  """
  fetch data from the table in a streaming manner: "StemModule"
  """
  StemModule_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [StemModule_stream_cursor_input]!
    """filter the rows returned"""
    where: StemModule_bool_exp
  ): [StemModule!]!
  """
  fetch data from the table: "TVParams"
  """
  TVParams(
    """distinct select on columns"""
    distinct_on: [TVParams_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [TVParams_order_by!]
    """filter the rows returned"""
    where: TVParams_bool_exp
  ): [TVParams!]!
  """fetch data from the table: "TVParams" using primary key columns"""
  TVParams_by_pk(id: String!): TVParams
  """
  fetch data from the table in a streaming manner: "TVParams"
  """
  TVParams_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [TVParams_stream_cursor_input]!
    """filter the rows returned"""
    where: TVParams_bool_exp
  ): [TVParams!]!
  """
  fetch data from the table: "chain_metadata"
  """
  chain_metadata(
    """distinct select on columns"""
    distinct_on: [chain_metadata_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [chain_metadata_order_by!]
    """filter the rows returned"""
    where: chain_metadata_bool_exp
  ): [chain_metadata!]!
  """fetch data from the table: "chain_metadata" using primary key columns"""
  chain_metadata_by_pk(chain_id: Int!): chain_metadata
  """
  fetch data from the table in a streaming manner: "chain_metadata"
  """
  chain_metadata_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [chain_metadata_stream_cursor_input]!
    """filter the rows returned"""
    where: chain_metadata_bool_exp
  ): [chain_metadata!]!
  """
  fetch data from the table: "dynamic_contract_registry"
  """
  dynamic_contract_registry(
    """distinct select on columns"""
    distinct_on: [dynamic_contract_registry_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [dynamic_contract_registry_order_by!]
    """filter the rows returned"""
    where: dynamic_contract_registry_bool_exp
  ): [dynamic_contract_registry!]!
  """
  fetch data from the table: "dynamic_contract_registry" using primary key columns
  """
  dynamic_contract_registry_by_pk(chain_id: Int!, contract_address: String!): dynamic_contract_registry
  """
  fetch data from the table in a streaming manner: "dynamic_contract_registry"
  """
  dynamic_contract_registry_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [dynamic_contract_registry_stream_cursor_input]!
    """filter the rows returned"""
    where: dynamic_contract_registry_bool_exp
  ): [dynamic_contract_registry!]!
  """
  fetch data from the table: "entity_history"
  """
  entity_history(
    """distinct select on columns"""
    distinct_on: [entity_history_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_order_by!]
    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  """fetch data from the table: "entity_history" using primary key columns"""
  entity_history_by_pk(block_number: Int!, block_timestamp: Int!, chain_id: Int!, entity_id: String!, entity_type: entity_type!, log_index: Int!): entity_history
  """
  fetch data from the table: "entity_history_filter"
  """
  entity_history_filter(
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table: "entity_history_filter" using primary key columns
  """
  entity_history_filter_by_pk(block_number: Int!, chain_id: Int!, entity_id: String!, log_index: Int!, previous_block_number: Int!, previous_log_index: Int!): entity_history_filter
  """
  fetch data from the table in a streaming manner: "entity_history_filter"
  """
  entity_history_filter_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [entity_history_filter_stream_cursor_input]!
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table in a streaming manner: "entity_history"
  """
  entity_history_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [entity_history_stream_cursor_input]!
    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  """
  fetch data from the table: "event_sync_state"
  """
  event_sync_state(
    """distinct select on columns"""
    distinct_on: [event_sync_state_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [event_sync_state_order_by!]
    """filter the rows returned"""
    where: event_sync_state_bool_exp
  ): [event_sync_state!]!
  """
  fetch data from the table: "event_sync_state" using primary key columns
  """
  event_sync_state_by_pk(chain_id: Int!): event_sync_state
  """
  fetch data from the table in a streaming manner: "event_sync_state"
  """
  event_sync_state_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [event_sync_state_stream_cursor_input]!
    """filter the rows returned"""
    where: event_sync_state_bool_exp
  ): [event_sync_state!]!
  """This function helps search for articles"""
  get_entity_history_filter(
    """
    input parameters for function "get_entity_history_filter"
    """
    args: get_entity_history_filter_args!
    """distinct select on columns"""
    distinct_on: [entity_history_filter_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_filter_order_by!]
    """filter the rows returned"""
    where: entity_history_filter_bool_exp
  ): [entity_history_filter!]!
  """
  fetch data from the table: "persisted_state"
  """
  persisted_state(
    """distinct select on columns"""
    distinct_on: [persisted_state_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [persisted_state_order_by!]
    """filter the rows returned"""
    where: persisted_state_bool_exp
  ): [persisted_state!]!
  """fetch data from the table: "persisted_state" using primary key columns"""
  persisted_state_by_pk(id: Int!): persisted_state
  """
  fetch data from the table in a streaming manner: "persisted_state"
  """
  persisted_state_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [persisted_state_stream_cursor_input]!
    """filter the rows returned"""
    where: persisted_state_bool_exp
  ): [persisted_state!]!
  """
  fetch data from the table: "raw_events"
  """
  raw_events(
    """distinct select on columns"""
    distinct_on: [raw_events_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [raw_events_order_by!]
    """filter the rows returned"""
    where: raw_events_bool_exp
  ): [raw_events!]!
  """fetch data from the table: "raw_events" using primary key columns"""
  raw_events_by_pk(chain_id: Int!, event_id: numeric!): raw_events
  """
  fetch data from the table in a streaming manner: "raw_events"
  """
  raw_events_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [raw_events_stream_cursor_input]!
    """filter the rows returned"""
    where: raw_events_bool_exp
  ): [raw_events!]!
}

enum Aggregation_interval {
  hour
  day
}

type ApplicationHistory {
  id: ID!
  grantApplicationBytes: Bytes!
  applicationSubmitted: BigInt!
}

input ApplicationHistory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  grantApplicationBytes: Bytes
  grantApplicationBytes_not: Bytes
  grantApplicationBytes_gt: Bytes
  grantApplicationBytes_lt: Bytes
  grantApplicationBytes_gte: Bytes
  grantApplicationBytes_lte: Bytes
  grantApplicationBytes_in: [Bytes!]
  grantApplicationBytes_not_in: [Bytes!]
  grantApplicationBytes_contains: Bytes
  grantApplicationBytes_not_contains: Bytes
  applicationSubmitted: BigInt
  applicationSubmitted_not: BigInt
  applicationSubmitted_gt: BigInt
  applicationSubmitted_lt: BigInt
  applicationSubmitted_gte: BigInt
  applicationSubmitted_lte: BigInt
  applicationSubmitted_in: [BigInt!]
  applicationSubmitted_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ApplicationHistory_filter]
  or: [ApplicationHistory_filter]
}

enum ApplicationHistory_orderBy {
  id
  grantApplicationBytes
  applicationSubmitted
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type FeedItem {
  id: ID!
  timestamp: BigInt
  content: String!
  sender: Bytes!
  tag: String!
  subjectMetadataPointer: String!
  subjectId: ID!
  objectId: ID
  subject: FeedItemEntity!
  object: FeedItemEntity
  embed: FeedItemEmbed
  details: String
}

type FeedItemEmbed {
  id: ID!
  key: String
  pointer: String
  protocol: BigInt
  content: String
}

input FeedItemEmbed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  pointer: String
  pointer_not: String
  pointer_gt: String
  pointer_lt: String
  pointer_gte: String
  pointer_lte: String
  pointer_in: [String!]
  pointer_not_in: [String!]
  pointer_contains: String
  pointer_contains_nocase: String
  pointer_not_contains: String
  pointer_not_contains_nocase: String
  pointer_starts_with: String
  pointer_starts_with_nocase: String
  pointer_not_starts_with: String
  pointer_not_starts_with_nocase: String
  pointer_ends_with: String
  pointer_ends_with_nocase: String
  pointer_not_ends_with: String
  pointer_not_ends_with_nocase: String
  protocol: BigInt
  protocol_not: BigInt
  protocol_gt: BigInt
  protocol_lt: BigInt
  protocol_gte: BigInt
  protocol_lte: BigInt
  protocol_in: [BigInt!]
  protocol_not_in: [BigInt!]
  content: String
  content_not: String
  content_gt: String
  content_lt: String
  content_gte: String
  content_lte: String
  content_in: [String!]
  content_not_in: [String!]
  content_contains: String
  content_contains_nocase: String
  content_not_contains: String
  content_not_contains_nocase: String
  content_starts_with: String
  content_starts_with_nocase: String
  content_not_starts_with: String
  content_not_starts_with_nocase: String
  content_ends_with: String
  content_ends_with_nocase: String
  content_not_ends_with: String
  content_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeedItemEmbed_filter]
  or: [FeedItemEmbed_filter]
}

enum FeedItemEmbed_orderBy {
  id
  key
  pointer
  protocol
  content
}

type FeedItemEntity {
  id: ID!
  name: String!
  type: String!
}

input FeedItemEntity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeedItemEntity_filter]
  or: [FeedItemEntity_filter]
}

enum FeedItemEntity_orderBy {
  id
  name
  type
}

input FeedItem_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  content: String
  content_not: String
  content_gt: String
  content_lt: String
  content_gte: String
  content_lte: String
  content_in: [String!]
  content_not_in: [String!]
  content_contains: String
  content_contains_nocase: String
  content_not_contains: String
  content_not_contains_nocase: String
  content_starts_with: String
  content_starts_with_nocase: String
  content_not_starts_with: String
  content_not_starts_with_nocase: String
  content_ends_with: String
  content_ends_with_nocase: String
  content_not_ends_with: String
  content_not_ends_with_nocase: String
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  tag: String
  tag_not: String
  tag_gt: String
  tag_lt: String
  tag_gte: String
  tag_lte: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_contains: String
  tag_contains_nocase: String
  tag_not_contains: String
  tag_not_contains_nocase: String
  tag_starts_with: String
  tag_starts_with_nocase: String
  tag_not_starts_with: String
  tag_not_starts_with_nocase: String
  tag_ends_with: String
  tag_ends_with_nocase: String
  tag_not_ends_with: String
  tag_not_ends_with_nocase: String
  subjectMetadataPointer: String
  subjectMetadataPointer_not: String
  subjectMetadataPointer_gt: String
  subjectMetadataPointer_lt: String
  subjectMetadataPointer_gte: String
  subjectMetadataPointer_lte: String
  subjectMetadataPointer_in: [String!]
  subjectMetadataPointer_not_in: [String!]
  subjectMetadataPointer_contains: String
  subjectMetadataPointer_contains_nocase: String
  subjectMetadataPointer_not_contains: String
  subjectMetadataPointer_not_contains_nocase: String
  subjectMetadataPointer_starts_with: String
  subjectMetadataPointer_starts_with_nocase: String
  subjectMetadataPointer_not_starts_with: String
  subjectMetadataPointer_not_starts_with_nocase: String
  subjectMetadataPointer_ends_with: String
  subjectMetadataPointer_ends_with_nocase: String
  subjectMetadataPointer_not_ends_with: String
  subjectMetadataPointer_not_ends_with_nocase: String
  subjectId: ID
  subjectId_not: ID
  subjectId_gt: ID
  subjectId_lt: ID
  subjectId_gte: ID
  subjectId_lte: ID
  subjectId_in: [ID!]
  subjectId_not_in: [ID!]
  objectId: ID
  objectId_not: ID
  objectId_gt: ID
  objectId_lt: ID
  objectId_gte: ID
  objectId_lte: ID
  objectId_in: [ID!]
  objectId_not_in: [ID!]
  subject: String
  subject_not: String
  subject_gt: String
  subject_lt: String
  subject_gte: String
  subject_lte: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_contains: String
  subject_contains_nocase: String
  subject_not_contains: String
  subject_not_contains_nocase: String
  subject_starts_with: String
  subject_starts_with_nocase: String
  subject_not_starts_with: String
  subject_not_starts_with_nocase: String
  subject_ends_with: String
  subject_ends_with_nocase: String
  subject_not_ends_with: String
  subject_not_ends_with_nocase: String
  subject_: FeedItemEntity_filter
  object: String
  object_not: String
  object_gt: String
  object_lt: String
  object_gte: String
  object_lte: String
  object_in: [String!]
  object_not_in: [String!]
  object_contains: String
  object_contains_nocase: String
  object_not_contains: String
  object_not_contains_nocase: String
  object_starts_with: String
  object_starts_with_nocase: String
  object_not_starts_with: String
  object_not_starts_with_nocase: String
  object_ends_with: String
  object_ends_with_nocase: String
  object_not_ends_with: String
  object_not_ends_with_nocase: String
  object_: FeedItemEntity_filter
  embed: String
  embed_not: String
  embed_gt: String
  embed_lt: String
  embed_gte: String
  embed_lte: String
  embed_in: [String!]
  embed_not_in: [String!]
  embed_contains: String
  embed_contains_nocase: String
  embed_not_contains: String
  embed_not_contains_nocase: String
  embed_starts_with: String
  embed_starts_with_nocase: String
  embed_not_starts_with: String
  embed_not_starts_with_nocase: String
  embed_ends_with: String
  embed_ends_with_nocase: String
  embed_not_ends_with: String
  embed_not_ends_with_nocase: String
  embed_: FeedItemEmbed_filter
  details: String
  details_not: String
  details_gt: String
  details_lt: String
  details_gte: String
  details_lte: String
  details_in: [String!]
  details_not_in: [String!]
  details_contains: String
  details_contains_nocase: String
  details_not_contains: String
  details_not_contains_nocase: String
  details_starts_with: String
  details_starts_with_nocase: String
  details_not_starts_with: String
  details_not_starts_with_nocase: String
  details_ends_with: String
  details_ends_with_nocase: String
  details_not_ends_with: String
  details_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeedItem_filter]
  or: [FeedItem_filter]
}

enum FeedItem_orderBy {
  id
  timestamp
  content
  sender
  tag
  subjectMetadataPointer
  subjectId
  objectId
  subject
  subject__id
  subject__name
  subject__type
  object
  object__id
  object__name
  object__type
  embed
  embed__id
  embed__key
  embed__pointer
  embed__protocol
  embed__content
  details
}

type GameManager {
  id: Bytes!
  poolId: BigInt!
  gameFacilitatorId: BigInt!
  rootAccount: Bytes!
  tokenAddress: Bytes!
  currentRoundId: BigInt!
  currentRound: GameRound
  poolFunds: BigInt!
}

input GameManager_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  poolId: BigInt
  poolId_not: BigInt
  poolId_gt: BigInt
  poolId_lt: BigInt
  poolId_gte: BigInt
  poolId_lte: BigInt
  poolId_in: [BigInt!]
  poolId_not_in: [BigInt!]
  gameFacilitatorId: BigInt
  gameFacilitatorId_not: BigInt
  gameFacilitatorId_gt: BigInt
  gameFacilitatorId_lt: BigInt
  gameFacilitatorId_gte: BigInt
  gameFacilitatorId_lte: BigInt
  gameFacilitatorId_in: [BigInt!]
  gameFacilitatorId_not_in: [BigInt!]
  rootAccount: Bytes
  rootAccount_not: Bytes
  rootAccount_gt: Bytes
  rootAccount_lt: Bytes
  rootAccount_gte: Bytes
  rootAccount_lte: Bytes
  rootAccount_in: [Bytes!]
  rootAccount_not_in: [Bytes!]
  rootAccount_contains: Bytes
  rootAccount_not_contains: Bytes
  tokenAddress: Bytes
  tokenAddress_not: Bytes
  tokenAddress_gt: Bytes
  tokenAddress_lt: Bytes
  tokenAddress_gte: Bytes
  tokenAddress_lte: Bytes
  tokenAddress_in: [Bytes!]
  tokenAddress_not_in: [Bytes!]
  tokenAddress_contains: Bytes
  tokenAddress_not_contains: Bytes
  currentRoundId: BigInt
  currentRoundId_not: BigInt
  currentRoundId_gt: BigInt
  currentRoundId_lt: BigInt
  currentRoundId_gte: BigInt
  currentRoundId_lte: BigInt
  currentRoundId_in: [BigInt!]
  currentRoundId_not_in: [BigInt!]
  currentRound: String
  currentRound_not: String
  currentRound_gt: String
  currentRound_lt: String
  currentRound_gte: String
  currentRound_lte: String
  currentRound_in: [String!]
  currentRound_not_in: [String!]
  currentRound_contains: String
  currentRound_contains_nocase: String
  currentRound_not_contains: String
  currentRound_not_contains_nocase: String
  currentRound_starts_with: String
  currentRound_starts_with_nocase: String
  currentRound_not_starts_with: String
  currentRound_not_starts_with_nocase: String
  currentRound_ends_with: String
  currentRound_ends_with_nocase: String
  currentRound_not_ends_with: String
  currentRound_not_ends_with_nocase: String
  currentRound_: GameRound_filter
  poolFunds: BigInt
  poolFunds_not: BigInt
  poolFunds_gt: BigInt
  poolFunds_lt: BigInt
  poolFunds_gte: BigInt
  poolFunds_lte: BigInt
  poolFunds_in: [BigInt!]
  poolFunds_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GameManager_filter]
  or: [GameManager_filter]
}

enum GameManager_orderBy {
  id
  poolId
  gameFacilitatorId
  rootAccount
  tokenAddress
  currentRoundId
  currentRound
  currentRound__id
  currentRound__startTime
  currentRound__endTime
  currentRound__totalRoundAmount
  currentRound__totalAllocatedAmount
  currentRound__totalDistributedAmount
  currentRound__gameStatus
  currentRound__isGameActive
  currentRound__realStartTime
  currentRound__realEndTime
  poolFunds
}

type GameRound {
  id: ID!
  startTime: BigInt!
  endTime: BigInt!
  totalRoundAmount: BigInt!
  totalAllocatedAmount: BigInt!
  totalDistributedAmount: BigInt!
  gameStatus: Int!
  ships(skip: Int = 0, first: Int = 100, orderBy: GrantShip_orderBy, orderDirection: OrderDirection, where: GrantShip_filter): [GrantShip!]!
  isGameActive: Boolean!
  realStartTime: BigInt
  realEndTime: BigInt
}

input GameRound_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  startTime: BigInt
  startTime_not: BigInt
  startTime_gt: BigInt
  startTime_lt: BigInt
  startTime_gte: BigInt
  startTime_lte: BigInt
  startTime_in: [BigInt!]
  startTime_not_in: [BigInt!]
  endTime: BigInt
  endTime_not: BigInt
  endTime_gt: BigInt
  endTime_lt: BigInt
  endTime_gte: BigInt
  endTime_lte: BigInt
  endTime_in: [BigInt!]
  endTime_not_in: [BigInt!]
  totalRoundAmount: BigInt
  totalRoundAmount_not: BigInt
  totalRoundAmount_gt: BigInt
  totalRoundAmount_lt: BigInt
  totalRoundAmount_gte: BigInt
  totalRoundAmount_lte: BigInt
  totalRoundAmount_in: [BigInt!]
  totalRoundAmount_not_in: [BigInt!]
  totalAllocatedAmount: BigInt
  totalAllocatedAmount_not: BigInt
  totalAllocatedAmount_gt: BigInt
  totalAllocatedAmount_lt: BigInt
  totalAllocatedAmount_gte: BigInt
  totalAllocatedAmount_lte: BigInt
  totalAllocatedAmount_in: [BigInt!]
  totalAllocatedAmount_not_in: [BigInt!]
  totalDistributedAmount: BigInt
  totalDistributedAmount_not: BigInt
  totalDistributedAmount_gt: BigInt
  totalDistributedAmount_lt: BigInt
  totalDistributedAmount_gte: BigInt
  totalDistributedAmount_lte: BigInt
  totalDistributedAmount_in: [BigInt!]
  totalDistributedAmount_not_in: [BigInt!]
  gameStatus: Int
  gameStatus_not: Int
  gameStatus_gt: Int
  gameStatus_lt: Int
  gameStatus_gte: Int
  gameStatus_lte: Int
  gameStatus_in: [Int!]
  gameStatus_not_in: [Int!]
  ships: [String!]
  ships_not: [String!]
  ships_contains: [String!]
  ships_contains_nocase: [String!]
  ships_not_contains: [String!]
  ships_not_contains_nocase: [String!]
  ships_: GrantShip_filter
  isGameActive: Boolean
  isGameActive_not: Boolean
  isGameActive_in: [Boolean!]
  isGameActive_not_in: [Boolean!]
  realStartTime: BigInt
  realStartTime_not: BigInt
  realStartTime_gt: BigInt
  realStartTime_lt: BigInt
  realStartTime_gte: BigInt
  realStartTime_lte: BigInt
  realStartTime_in: [BigInt!]
  realStartTime_not_in: [BigInt!]
  realEndTime: BigInt
  realEndTime_not: BigInt
  realEndTime_gt: BigInt
  realEndTime_lt: BigInt
  realEndTime_gte: BigInt
  realEndTime_lte: BigInt
  realEndTime_in: [BigInt!]
  realEndTime_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GameRound_filter]
  or: [GameRound_filter]
}

enum GameRound_orderBy {
  id
  startTime
  endTime
  totalRoundAmount
  totalAllocatedAmount
  totalDistributedAmount
  gameStatus
  ships
  isGameActive
  realStartTime
  realEndTime
}

type GmDeployment {
  id: ID!
  address: Bytes!
  version: GmVersion!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
  hasPool: Boolean!
  poolId: BigInt
  profileId: Bytes!
  poolMetadata: RawMetadata!
  poolProfileMetadata: RawMetadata!
}

input GmDeployment_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  version: String
  version_not: String
  version_gt: String
  version_lt: String
  version_gte: String
  version_lte: String
  version_in: [String!]
  version_not_in: [String!]
  version_contains: String
  version_contains_nocase: String
  version_not_contains: String
  version_not_contains_nocase: String
  version_starts_with: String
  version_starts_with_nocase: String
  version_not_starts_with: String
  version_not_starts_with_nocase: String
  version_ends_with: String
  version_ends_with_nocase: String
  version_not_ends_with: String
  version_not_ends_with_nocase: String
  version_: GmVersion_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  hasPool: Boolean
  hasPool_not: Boolean
  hasPool_in: [Boolean!]
  hasPool_not_in: [Boolean!]
  poolId: BigInt
  poolId_not: BigInt
  poolId_gt: BigInt
  poolId_lt: BigInt
  poolId_gte: BigInt
  poolId_lte: BigInt
  poolId_in: [BigInt!]
  poolId_not_in: [BigInt!]
  profileId: Bytes
  profileId_not: Bytes
  profileId_gt: Bytes
  profileId_lt: Bytes
  profileId_gte: Bytes
  profileId_lte: Bytes
  profileId_in: [Bytes!]
  profileId_not_in: [Bytes!]
  profileId_contains: Bytes
  profileId_not_contains: Bytes
  poolMetadata: String
  poolMetadata_not: String
  poolMetadata_gt: String
  poolMetadata_lt: String
  poolMetadata_gte: String
  poolMetadata_lte: String
  poolMetadata_in: [String!]
  poolMetadata_not_in: [String!]
  poolMetadata_contains: String
  poolMetadata_contains_nocase: String
  poolMetadata_not_contains: String
  poolMetadata_not_contains_nocase: String
  poolMetadata_starts_with: String
  poolMetadata_starts_with_nocase: String
  poolMetadata_not_starts_with: String
  poolMetadata_not_starts_with_nocase: String
  poolMetadata_ends_with: String
  poolMetadata_ends_with_nocase: String
  poolMetadata_not_ends_with: String
  poolMetadata_not_ends_with_nocase: String
  poolMetadata_: RawMetadata_filter
  poolProfileMetadata: String
  poolProfileMetadata_not: String
  poolProfileMetadata_gt: String
  poolProfileMetadata_lt: String
  poolProfileMetadata_gte: String
  poolProfileMetadata_lte: String
  poolProfileMetadata_in: [String!]
  poolProfileMetadata_not_in: [String!]
  poolProfileMetadata_contains: String
  poolProfileMetadata_contains_nocase: String
  poolProfileMetadata_not_contains: String
  poolProfileMetadata_not_contains_nocase: String
  poolProfileMetadata_starts_with: String
  poolProfileMetadata_starts_with_nocase: String
  poolProfileMetadata_not_starts_with: String
  poolProfileMetadata_not_starts_with_nocase: String
  poolProfileMetadata_ends_with: String
  poolProfileMetadata_ends_with_nocase: String
  poolProfileMetadata_not_ends_with: String
  poolProfileMetadata_not_ends_with_nocase: String
  poolProfileMetadata_: RawMetadata_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GmDeployment_filter]
  or: [GmDeployment_filter]
}

enum GmDeployment_orderBy {
  id
  address
  version
  version__id
  version__name
  version__address
  blockNumber
  transactionHash
  timestamp
  hasPool
  poolId
  profileId
  poolMetadata
  poolMetadata__id
  poolMetadata__protocol
  poolMetadata__pointer
  poolProfileMetadata
  poolProfileMetadata__id
  poolProfileMetadata__protocol
  poolProfileMetadata__pointer
}

type GmVersion {
  id: ID!
  name: String!
  address: Bytes!
}

input GmVersion_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GmVersion_filter]
  or: [GmVersion_filter]
}

enum GmVersion_orderBy {
  id
  name
  address
}

type Grant {
  id: ID!
  projectId: Project!
  shipId: GrantShip!
  lastUpdated: BigInt!
  hasResubmitted: Boolean!
  grantStatus: Int!
  grantApplicationBytes: Bytes!
  applicationSubmitted: BigInt!
  currentMilestoneIndex: BigInt!
  milestonesAmount: BigInt!
  milestones(skip: Int = 0, first: Int = 100, orderBy: Milestone_orderBy, orderDirection: OrderDirection, where: Milestone_filter): [Milestone!]
  shipApprovalReason: RawMetadata
  hasShipApproved: Boolean
  amtAllocated: BigInt!
  amtDistributed: BigInt!
  allocatedBy: Bytes
  facilitatorReason: RawMetadata
  hasFacilitatorApproved: Boolean
  milestonesApproved: Boolean
  milestonesApprovedReason: RawMetadata
  currentMilestoneRejectedReason: RawMetadata
  resubmitHistory(skip: Int = 0, first: Int = 100, orderBy: ApplicationHistory_orderBy, orderDirection: OrderDirection, where: ApplicationHistory_filter): [ApplicationHistory!]!
}

type GrantShip {
  id: Bytes!
  profileId: Bytes!
  nonce: BigInt!
  name: String!
  profileMetadata: RawMetadata!
  owner: Bytes!
  anchor: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  status: Int!
  poolFunded: Boolean!
  balance: BigInt!
  shipAllocation: BigInt!
  totalAvailableFunds: BigInt!
  totalRoundAmount: BigInt!
  totalAllocated: BigInt!
  totalDistributed: BigInt!
  grants(skip: Int = 0, first: Int = 100, orderBy: Grant_orderBy, orderDirection: OrderDirection, where: Grant_filter): [Grant!]!
  alloProfileMembers: ProfileMemberGroup
  shipApplicationBytesData: Bytes
  applicationSubmittedTime: BigInt
  isAwaitingApproval: Boolean
  hasSubmittedApplication: Boolean
  isApproved: Boolean
  approvedTime: BigInt
  isRejected: Boolean
  rejectedTime: BigInt
  applicationReviewReason: RawMetadata
  poolId: BigInt
  hatId: String
  shipContractAddress: Bytes
  shipLaunched: Boolean
  poolActive: Boolean
  isAllocated: Boolean
  isDistributed: Boolean
}

input GrantShip_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  profileId: Bytes
  profileId_not: Bytes
  profileId_gt: Bytes
  profileId_lt: Bytes
  profileId_gte: Bytes
  profileId_lte: Bytes
  profileId_in: [Bytes!]
  profileId_not_in: [Bytes!]
  profileId_contains: Bytes
  profileId_not_contains: Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  profileMetadata: String
  profileMetadata_not: String
  profileMetadata_gt: String
  profileMetadata_lt: String
  profileMetadata_gte: String
  profileMetadata_lte: String
  profileMetadata_in: [String!]
  profileMetadata_not_in: [String!]
  profileMetadata_contains: String
  profileMetadata_contains_nocase: String
  profileMetadata_not_contains: String
  profileMetadata_not_contains_nocase: String
  profileMetadata_starts_with: String
  profileMetadata_starts_with_nocase: String
  profileMetadata_not_starts_with: String
  profileMetadata_not_starts_with_nocase: String
  profileMetadata_ends_with: String
  profileMetadata_ends_with_nocase: String
  profileMetadata_not_ends_with: String
  profileMetadata_not_ends_with_nocase: String
  profileMetadata_: RawMetadata_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  anchor: Bytes
  anchor_not: Bytes
  anchor_gt: Bytes
  anchor_lt: Bytes
  anchor_gte: Bytes
  anchor_lte: Bytes
  anchor_in: [Bytes!]
  anchor_not_in: [Bytes!]
  anchor_contains: Bytes
  anchor_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  poolFunded: Boolean
  poolFunded_not: Boolean
  poolFunded_in: [Boolean!]
  poolFunded_not_in: [Boolean!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  shipAllocation: BigInt
  shipAllocation_not: BigInt
  shipAllocation_gt: BigInt
  shipAllocation_lt: BigInt
  shipAllocation_gte: BigInt
  shipAllocation_lte: BigInt
  shipAllocation_in: [BigInt!]
  shipAllocation_not_in: [BigInt!]
  totalAvailableFunds: BigInt
  totalAvailableFunds_not: BigInt
  totalAvailableFunds_gt: BigInt
  totalAvailableFunds_lt: BigInt
  totalAvailableFunds_gte: BigInt
  totalAvailableFunds_lte: BigInt
  totalAvailableFunds_in: [BigInt!]
  totalAvailableFunds_not_in: [BigInt!]
  totalRoundAmount: BigInt
  totalRoundAmount_not: BigInt
  totalRoundAmount_gt: BigInt
  totalRoundAmount_lt: BigInt
  totalRoundAmount_gte: BigInt
  totalRoundAmount_lte: BigInt
  totalRoundAmount_in: [BigInt!]
  totalRoundAmount_not_in: [BigInt!]
  totalAllocated: BigInt
  totalAllocated_not: BigInt
  totalAllocated_gt: BigInt
  totalAllocated_lt: BigInt
  totalAllocated_gte: BigInt
  totalAllocated_lte: BigInt
  totalAllocated_in: [BigInt!]
  totalAllocated_not_in: [BigInt!]
  totalDistributed: BigInt
  totalDistributed_not: BigInt
  totalDistributed_gt: BigInt
  totalDistributed_lt: BigInt
  totalDistributed_gte: BigInt
  totalDistributed_lte: BigInt
  totalDistributed_in: [BigInt!]
  totalDistributed_not_in: [BigInt!]
  grants_: Grant_filter
  alloProfileMembers: String
  alloProfileMembers_not: String
  alloProfileMembers_gt: String
  alloProfileMembers_lt: String
  alloProfileMembers_gte: String
  alloProfileMembers_lte: String
  alloProfileMembers_in: [String!]
  alloProfileMembers_not_in: [String!]
  alloProfileMembers_contains: String
  alloProfileMembers_contains_nocase: String
  alloProfileMembers_not_contains: String
  alloProfileMembers_not_contains_nocase: String
  alloProfileMembers_starts_with: String
  alloProfileMembers_starts_with_nocase: String
  alloProfileMembers_not_starts_with: String
  alloProfileMembers_not_starts_with_nocase: String
  alloProfileMembers_ends_with: String
  alloProfileMembers_ends_with_nocase: String
  alloProfileMembers_not_ends_with: String
  alloProfileMembers_not_ends_with_nocase: String
  alloProfileMembers_: ProfileMemberGroup_filter
  shipApplicationBytesData: Bytes
  shipApplicationBytesData_not: Bytes
  shipApplicationBytesData_gt: Bytes
  shipApplicationBytesData_lt: Bytes
  shipApplicationBytesData_gte: Bytes
  shipApplicationBytesData_lte: Bytes
  shipApplicationBytesData_in: [Bytes!]
  shipApplicationBytesData_not_in: [Bytes!]
  shipApplicationBytesData_contains: Bytes
  shipApplicationBytesData_not_contains: Bytes
  applicationSubmittedTime: BigInt
  applicationSubmittedTime_not: BigInt
  applicationSubmittedTime_gt: BigInt
  applicationSubmittedTime_lt: BigInt
  applicationSubmittedTime_gte: BigInt
  applicationSubmittedTime_lte: BigInt
  applicationSubmittedTime_in: [BigInt!]
  applicationSubmittedTime_not_in: [BigInt!]
  isAwaitingApproval: Boolean
  isAwaitingApproval_not: Boolean
  isAwaitingApproval_in: [Boolean!]
  isAwaitingApproval_not_in: [Boolean!]
  hasSubmittedApplication: Boolean
  hasSubmittedApplication_not: Boolean
  hasSubmittedApplication_in: [Boolean!]
  hasSubmittedApplication_not_in: [Boolean!]
  isApproved: Boolean
  isApproved_not: Boolean
  isApproved_in: [Boolean!]
  isApproved_not_in: [Boolean!]
  approvedTime: BigInt
  approvedTime_not: BigInt
  approvedTime_gt: BigInt
  approvedTime_lt: BigInt
  approvedTime_gte: BigInt
  approvedTime_lte: BigInt
  approvedTime_in: [BigInt!]
  approvedTime_not_in: [BigInt!]
  isRejected: Boolean
  isRejected_not: Boolean
  isRejected_in: [Boolean!]
  isRejected_not_in: [Boolean!]
  rejectedTime: BigInt
  rejectedTime_not: BigInt
  rejectedTime_gt: BigInt
  rejectedTime_lt: BigInt
  rejectedTime_gte: BigInt
  rejectedTime_lte: BigInt
  rejectedTime_in: [BigInt!]
  rejectedTime_not_in: [BigInt!]
  applicationReviewReason: String
  applicationReviewReason_not: String
  applicationReviewReason_gt: String
  applicationReviewReason_lt: String
  applicationReviewReason_gte: String
  applicationReviewReason_lte: String
  applicationReviewReason_in: [String!]
  applicationReviewReason_not_in: [String!]
  applicationReviewReason_contains: String
  applicationReviewReason_contains_nocase: String
  applicationReviewReason_not_contains: String
  applicationReviewReason_not_contains_nocase: String
  applicationReviewReason_starts_with: String
  applicationReviewReason_starts_with_nocase: String
  applicationReviewReason_not_starts_with: String
  applicationReviewReason_not_starts_with_nocase: String
  applicationReviewReason_ends_with: String
  applicationReviewReason_ends_with_nocase: String
  applicationReviewReason_not_ends_with: String
  applicationReviewReason_not_ends_with_nocase: String
  applicationReviewReason_: RawMetadata_filter
  poolId: BigInt
  poolId_not: BigInt
  poolId_gt: BigInt
  poolId_lt: BigInt
  poolId_gte: BigInt
  poolId_lte: BigInt
  poolId_in: [BigInt!]
  poolId_not_in: [BigInt!]
  hatId: String
  hatId_not: String
  hatId_gt: String
  hatId_lt: String
  hatId_gte: String
  hatId_lte: String
  hatId_in: [String!]
  hatId_not_in: [String!]
  hatId_contains: String
  hatId_contains_nocase: String
  hatId_not_contains: String
  hatId_not_contains_nocase: String
  hatId_starts_with: String
  hatId_starts_with_nocase: String
  hatId_not_starts_with: String
  hatId_not_starts_with_nocase: String
  hatId_ends_with: String
  hatId_ends_with_nocase: String
  hatId_not_ends_with: String
  hatId_not_ends_with_nocase: String
  shipContractAddress: Bytes
  shipContractAddress_not: Bytes
  shipContractAddress_gt: Bytes
  shipContractAddress_lt: Bytes
  shipContractAddress_gte: Bytes
  shipContractAddress_lte: Bytes
  shipContractAddress_in: [Bytes!]
  shipContractAddress_not_in: [Bytes!]
  shipContractAddress_contains: Bytes
  shipContractAddress_not_contains: Bytes
  shipLaunched: Boolean
  shipLaunched_not: Boolean
  shipLaunched_in: [Boolean!]
  shipLaunched_not_in: [Boolean!]
  poolActive: Boolean
  poolActive_not: Boolean
  poolActive_in: [Boolean!]
  poolActive_not_in: [Boolean!]
  isAllocated: Boolean
  isAllocated_not: Boolean
  isAllocated_in: [Boolean!]
  isAllocated_not_in: [Boolean!]
  isDistributed: Boolean
  isDistributed_not: Boolean
  isDistributed_in: [Boolean!]
  isDistributed_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GrantShip_filter]
  or: [GrantShip_filter]
}

enum GrantShip_orderBy {
  id
  profileId
  nonce
  name
  profileMetadata
  profileMetadata__id
  profileMetadata__protocol
  profileMetadata__pointer
  owner
  anchor
  blockNumber
  blockTimestamp
  transactionHash
  status
  poolFunded
  balance
  shipAllocation
  totalAvailableFunds
  totalRoundAmount
  totalAllocated
  totalDistributed
  grants
  alloProfileMembers
  alloProfileMembers__id
  shipApplicationBytesData
  applicationSubmittedTime
  isAwaitingApproval
  hasSubmittedApplication
  isApproved
  approvedTime
  isRejected
  rejectedTime
  applicationReviewReason
  applicationReviewReason__id
  applicationReviewReason__protocol
  applicationReviewReason__pointer
  poolId
  hatId
  shipContractAddress
  shipLaunched
  poolActive
  isAllocated
  isDistributed
}

input Grant_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  projectId: String
  projectId_not: String
  projectId_gt: String
  projectId_lt: String
  projectId_gte: String
  projectId_lte: String
  projectId_in: [String!]
  projectId_not_in: [String!]
  projectId_contains: String
  projectId_contains_nocase: String
  projectId_not_contains: String
  projectId_not_contains_nocase: String
  projectId_starts_with: String
  projectId_starts_with_nocase: String
  projectId_not_starts_with: String
  projectId_not_starts_with_nocase: String
  projectId_ends_with: String
  projectId_ends_with_nocase: String
  projectId_not_ends_with: String
  projectId_not_ends_with_nocase: String
  projectId_: Project_filter
  shipId: String
  shipId_not: String
  shipId_gt: String
  shipId_lt: String
  shipId_gte: String
  shipId_lte: String
  shipId_in: [String!]
  shipId_not_in: [String!]
  shipId_contains: String
  shipId_contains_nocase: String
  shipId_not_contains: String
  shipId_not_contains_nocase: String
  shipId_starts_with: String
  shipId_starts_with_nocase: String
  shipId_not_starts_with: String
  shipId_not_starts_with_nocase: String
  shipId_ends_with: String
  shipId_ends_with_nocase: String
  shipId_not_ends_with: String
  shipId_not_ends_with_nocase: String
  shipId_: GrantShip_filter
  lastUpdated: BigInt
  lastUpdated_not: BigInt
  lastUpdated_gt: BigInt
  lastUpdated_lt: BigInt
  lastUpdated_gte: BigInt
  lastUpdated_lte: BigInt
  lastUpdated_in: [BigInt!]
  lastUpdated_not_in: [BigInt!]
  hasResubmitted: Boolean
  hasResubmitted_not: Boolean
  hasResubmitted_in: [Boolean!]
  hasResubmitted_not_in: [Boolean!]
  grantStatus: Int
  grantStatus_not: Int
  grantStatus_gt: Int
  grantStatus_lt: Int
  grantStatus_gte: Int
  grantStatus_lte: Int
  grantStatus_in: [Int!]
  grantStatus_not_in: [Int!]
  grantApplicationBytes: Bytes
  grantApplicationBytes_not: Bytes
  grantApplicationBytes_gt: Bytes
  grantApplicationBytes_lt: Bytes
  grantApplicationBytes_gte: Bytes
  grantApplicationBytes_lte: Bytes
  grantApplicationBytes_in: [Bytes!]
  grantApplicationBytes_not_in: [Bytes!]
  grantApplicationBytes_contains: Bytes
  grantApplicationBytes_not_contains: Bytes
  applicationSubmitted: BigInt
  applicationSubmitted_not: BigInt
  applicationSubmitted_gt: BigInt
  applicationSubmitted_lt: BigInt
  applicationSubmitted_gte: BigInt
  applicationSubmitted_lte: BigInt
  applicationSubmitted_in: [BigInt!]
  applicationSubmitted_not_in: [BigInt!]
  currentMilestoneIndex: BigInt
  currentMilestoneIndex_not: BigInt
  currentMilestoneIndex_gt: BigInt
  currentMilestoneIndex_lt: BigInt
  currentMilestoneIndex_gte: BigInt
  currentMilestoneIndex_lte: BigInt
  currentMilestoneIndex_in: [BigInt!]
  currentMilestoneIndex_not_in: [BigInt!]
  milestonesAmount: BigInt
  milestonesAmount_not: BigInt
  milestonesAmount_gt: BigInt
  milestonesAmount_lt: BigInt
  milestonesAmount_gte: BigInt
  milestonesAmount_lte: BigInt
  milestonesAmount_in: [BigInt!]
  milestonesAmount_not_in: [BigInt!]
  milestones: [String!]
  milestones_not: [String!]
  milestones_contains: [String!]
  milestones_contains_nocase: [String!]
  milestones_not_contains: [String!]
  milestones_not_contains_nocase: [String!]
  milestones_: Milestone_filter
  shipApprovalReason: String
  shipApprovalReason_not: String
  shipApprovalReason_gt: String
  shipApprovalReason_lt: String
  shipApprovalReason_gte: String
  shipApprovalReason_lte: String
  shipApprovalReason_in: [String!]
  shipApprovalReason_not_in: [String!]
  shipApprovalReason_contains: String
  shipApprovalReason_contains_nocase: String
  shipApprovalReason_not_contains: String
  shipApprovalReason_not_contains_nocase: String
  shipApprovalReason_starts_with: String
  shipApprovalReason_starts_with_nocase: String
  shipApprovalReason_not_starts_with: String
  shipApprovalReason_not_starts_with_nocase: String
  shipApprovalReason_ends_with: String
  shipApprovalReason_ends_with_nocase: String
  shipApprovalReason_not_ends_with: String
  shipApprovalReason_not_ends_with_nocase: String
  shipApprovalReason_: RawMetadata_filter
  hasShipApproved: Boolean
  hasShipApproved_not: Boolean
  hasShipApproved_in: [Boolean!]
  hasShipApproved_not_in: [Boolean!]
  amtAllocated: BigInt
  amtAllocated_not: BigInt
  amtAllocated_gt: BigInt
  amtAllocated_lt: BigInt
  amtAllocated_gte: BigInt
  amtAllocated_lte: BigInt
  amtAllocated_in: [BigInt!]
  amtAllocated_not_in: [BigInt!]
  amtDistributed: BigInt
  amtDistributed_not: BigInt
  amtDistributed_gt: BigInt
  amtDistributed_lt: BigInt
  amtDistributed_gte: BigInt
  amtDistributed_lte: BigInt
  amtDistributed_in: [BigInt!]
  amtDistributed_not_in: [BigInt!]
  allocatedBy: Bytes
  allocatedBy_not: Bytes
  allocatedBy_gt: Bytes
  allocatedBy_lt: Bytes
  allocatedBy_gte: Bytes
  allocatedBy_lte: Bytes
  allocatedBy_in: [Bytes!]
  allocatedBy_not_in: [Bytes!]
  allocatedBy_contains: Bytes
  allocatedBy_not_contains: Bytes
  facilitatorReason: String
  facilitatorReason_not: String
  facilitatorReason_gt: String
  facilitatorReason_lt: String
  facilitatorReason_gte: String
  facilitatorReason_lte: String
  facilitatorReason_in: [String!]
  facilitatorReason_not_in: [String!]
  facilitatorReason_contains: String
  facilitatorReason_contains_nocase: String
  facilitatorReason_not_contains: String
  facilitatorReason_not_contains_nocase: String
  facilitatorReason_starts_with: String
  facilitatorReason_starts_with_nocase: String
  facilitatorReason_not_starts_with: String
  facilitatorReason_not_starts_with_nocase: String
  facilitatorReason_ends_with: String
  facilitatorReason_ends_with_nocase: String
  facilitatorReason_not_ends_with: String
  facilitatorReason_not_ends_with_nocase: String
  facilitatorReason_: RawMetadata_filter
  hasFacilitatorApproved: Boolean
  hasFacilitatorApproved_not: Boolean
  hasFacilitatorApproved_in: [Boolean!]
  hasFacilitatorApproved_not_in: [Boolean!]
  milestonesApproved: Boolean
  milestonesApproved_not: Boolean
  milestonesApproved_in: [Boolean!]
  milestonesApproved_not_in: [Boolean!]
  milestonesApprovedReason: String
  milestonesApprovedReason_not: String
  milestonesApprovedReason_gt: String
  milestonesApprovedReason_lt: String
  milestonesApprovedReason_gte: String
  milestonesApprovedReason_lte: String
  milestonesApprovedReason_in: [String!]
  milestonesApprovedReason_not_in: [String!]
  milestonesApprovedReason_contains: String
  milestonesApprovedReason_contains_nocase: String
  milestonesApprovedReason_not_contains: String
  milestonesApprovedReason_not_contains_nocase: String
  milestonesApprovedReason_starts_with: String
  milestonesApprovedReason_starts_with_nocase: String
  milestonesApprovedReason_not_starts_with: String
  milestonesApprovedReason_not_starts_with_nocase: String
  milestonesApprovedReason_ends_with: String
  milestonesApprovedReason_ends_with_nocase: String
  milestonesApprovedReason_not_ends_with: String
  milestonesApprovedReason_not_ends_with_nocase: String
  milestonesApprovedReason_: RawMetadata_filter
  currentMilestoneRejectedReason: String
  currentMilestoneRejectedReason_not: String
  currentMilestoneRejectedReason_gt: String
  currentMilestoneRejectedReason_lt: String
  currentMilestoneRejectedReason_gte: String
  currentMilestoneRejectedReason_lte: String
  currentMilestoneRejectedReason_in: [String!]
  currentMilestoneRejectedReason_not_in: [String!]
  currentMilestoneRejectedReason_contains: String
  currentMilestoneRejectedReason_contains_nocase: String
  currentMilestoneRejectedReason_not_contains: String
  currentMilestoneRejectedReason_not_contains_nocase: String
  currentMilestoneRejectedReason_starts_with: String
  currentMilestoneRejectedReason_starts_with_nocase: String
  currentMilestoneRejectedReason_not_starts_with: String
  currentMilestoneRejectedReason_not_starts_with_nocase: String
  currentMilestoneRejectedReason_ends_with: String
  currentMilestoneRejectedReason_ends_with_nocase: String
  currentMilestoneRejectedReason_not_ends_with: String
  currentMilestoneRejectedReason_not_ends_with_nocase: String
  currentMilestoneRejectedReason_: RawMetadata_filter
  resubmitHistory: [String!]
  resubmitHistory_not: [String!]
  resubmitHistory_contains: [String!]
  resubmitHistory_contains_nocase: [String!]
  resubmitHistory_not_contains: [String!]
  resubmitHistory_not_contains_nocase: [String!]
  resubmitHistory_: ApplicationHistory_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Grant_filter]
  or: [Grant_filter]
}

enum Grant_orderBy {
  id
  projectId
  projectId__id
  projectId__profileId
  projectId__status
  projectId__nonce
  projectId__name
  projectId__owner
  projectId__anchor
  projectId__blockNumber
  projectId__blockTimestamp
  projectId__transactionHash
  projectId__totalAmountReceived
  shipId
  shipId__id
  shipId__profileId
  shipId__nonce
  shipId__name
  shipId__owner
  shipId__anchor
  shipId__blockNumber
  shipId__blockTimestamp
  shipId__transactionHash
  shipId__status
  shipId__poolFunded
  shipId__balance
  shipId__shipAllocation
  shipId__totalAvailableFunds
  shipId__totalRoundAmount
  shipId__totalAllocated
  shipId__totalDistributed
  shipId__shipApplicationBytesData
  shipId__applicationSubmittedTime
  shipId__isAwaitingApproval
  shipId__hasSubmittedApplication
  shipId__isApproved
  shipId__approvedTime
  shipId__isRejected
  shipId__rejectedTime
  shipId__poolId
  shipId__hatId
  shipId__shipContractAddress
  shipId__shipLaunched
  shipId__poolActive
  shipId__isAllocated
  shipId__isDistributed
  lastUpdated
  hasResubmitted
  grantStatus
  grantApplicationBytes
  applicationSubmitted
  currentMilestoneIndex
  milestonesAmount
  milestones
  shipApprovalReason
  shipApprovalReason__id
  shipApprovalReason__protocol
  shipApprovalReason__pointer
  hasShipApproved
  amtAllocated
  amtDistributed
  allocatedBy
  facilitatorReason
  facilitatorReason__id
  facilitatorReason__protocol
  facilitatorReason__pointer
  hasFacilitatorApproved
  milestonesApproved
  milestonesApprovedReason
  milestonesApprovedReason__id
  milestonesApprovedReason__protocol
  milestonesApprovedReason__pointer
  currentMilestoneRejectedReason
  currentMilestoneRejectedReason__id
  currentMilestoneRejectedReason__protocol
  currentMilestoneRejectedReason__pointer
  resubmitHistory
}

"""
8 bytes signed integer

"""
scalar Int8

type Log {
  id: ID!
  message: String!
  description: String
  type: String
}

input Log_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Log_filter]
  or: [Log_filter]
}

enum Log_orderBy {
  id
  message
  description
  type
}

type Milestone {
  id: ID!
  amountPercentage: Bytes!
  mmetadata: BigInt!
  amount: BigInt!
  status: Int!
  lastUpdated: BigInt!
}

input Milestone_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amountPercentage: Bytes
  amountPercentage_not: Bytes
  amountPercentage_gt: Bytes
  amountPercentage_lt: Bytes
  amountPercentage_gte: Bytes
  amountPercentage_lte: Bytes
  amountPercentage_in: [Bytes!]
  amountPercentage_not_in: [Bytes!]
  amountPercentage_contains: Bytes
  amountPercentage_not_contains: Bytes
  mmetadata: BigInt
  mmetadata_not: BigInt
  mmetadata_gt: BigInt
  mmetadata_lt: BigInt
  mmetadata_gte: BigInt
  mmetadata_lte: BigInt
  mmetadata_in: [BigInt!]
  mmetadata_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  lastUpdated: BigInt
  lastUpdated_not: BigInt
  lastUpdated_gt: BigInt
  lastUpdated_lt: BigInt
  lastUpdated_gte: BigInt
  lastUpdated_lte: BigInt
  lastUpdated_in: [BigInt!]
  lastUpdated_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Milestone_filter]
  or: [Milestone_filter]
}

enum Milestone_orderBy {
  id
  amountPercentage
  mmetadata
  amount
  status
  lastUpdated
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PoolIdLookup {
  id: ID!
  entityId: Bytes!
}

input PoolIdLookup_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  entityId: Bytes
  entityId_not: Bytes
  entityId_gt: Bytes
  entityId_lt: Bytes
  entityId_gte: Bytes
  entityId_lte: Bytes
  entityId_in: [Bytes!]
  entityId_not_in: [Bytes!]
  entityId_contains: Bytes
  entityId_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolIdLookup_filter]
  or: [PoolIdLookup_filter]
}

enum PoolIdLookup_orderBy {
  id
  entityId
}

type ProfileIdToAnchor {
  id: ID!
  profileId: Bytes!
  anchor: Bytes!
}

input ProfileIdToAnchor_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  profileId: Bytes
  profileId_not: Bytes
  profileId_gt: Bytes
  profileId_lt: Bytes
  profileId_gte: Bytes
  profileId_lte: Bytes
  profileId_in: [Bytes!]
  profileId_not_in: [Bytes!]
  profileId_contains: Bytes
  profileId_not_contains: Bytes
  anchor: Bytes
  anchor_not: Bytes
  anchor_gt: Bytes
  anchor_lt: Bytes
  anchor_gte: Bytes
  anchor_lte: Bytes
  anchor_in: [Bytes!]
  anchor_not_in: [Bytes!]
  anchor_contains: Bytes
  anchor_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProfileIdToAnchor_filter]
  or: [ProfileIdToAnchor_filter]
}

enum ProfileIdToAnchor_orderBy {
  id
  profileId
  anchor
}

type ProfileMemberGroup {
  id: Bytes!
  addresses: [Bytes!]
}

input ProfileMemberGroup_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  addresses: [Bytes!]
  addresses_not: [Bytes!]
  addresses_contains: [Bytes!]
  addresses_contains_nocase: [Bytes!]
  addresses_not_contains: [Bytes!]
  addresses_not_contains_nocase: [Bytes!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProfileMemberGroup_filter]
  or: [ProfileMemberGroup_filter]
}

enum ProfileMemberGroup_orderBy {
  id
  addresses
}

type Project {
  id: Bytes!
  profileId: Bytes!
  status: Int!
  nonce: BigInt!
  name: String!
  metadata: RawMetadata!
  owner: Bytes!
  anchor: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  grants(skip: Int = 0, first: Int = 100, orderBy: Grant_orderBy, orderDirection: OrderDirection, where: Grant_filter): [Grant!]!
  members: ProfileMemberGroup
  totalAmountReceived: BigInt!
}

input Project_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  profileId: Bytes
  profileId_not: Bytes
  profileId_gt: Bytes
  profileId_lt: Bytes
  profileId_gte: Bytes
  profileId_lte: Bytes
  profileId_in: [Bytes!]
  profileId_not_in: [Bytes!]
  profileId_contains: Bytes
  profileId_not_contains: Bytes
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  metadata: String
  metadata_not: String
  metadata_gt: String
  metadata_lt: String
  metadata_gte: String
  metadata_lte: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  metadata_: RawMetadata_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  anchor: Bytes
  anchor_not: Bytes
  anchor_gt: Bytes
  anchor_lt: Bytes
  anchor_gte: Bytes
  anchor_lte: Bytes
  anchor_in: [Bytes!]
  anchor_not_in: [Bytes!]
  anchor_contains: Bytes
  anchor_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  grants_: Grant_filter
  members: String
  members_not: String
  members_gt: String
  members_lt: String
  members_gte: String
  members_lte: String
  members_in: [String!]
  members_not_in: [String!]
  members_contains: String
  members_contains_nocase: String
  members_not_contains: String
  members_not_contains_nocase: String
  members_starts_with: String
  members_starts_with_nocase: String
  members_not_starts_with: String
  members_not_starts_with_nocase: String
  members_ends_with: String
  members_ends_with_nocase: String
  members_not_ends_with: String
  members_not_ends_with_nocase: String
  members_: ProfileMemberGroup_filter
  totalAmountReceived: BigInt
  totalAmountReceived_not: BigInt
  totalAmountReceived_gt: BigInt
  totalAmountReceived_lt: BigInt
  totalAmountReceived_gte: BigInt
  totalAmountReceived_lte: BigInt
  totalAmountReceived_in: [BigInt!]
  totalAmountReceived_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Project_filter]
  or: [Project_filter]
}

enum Project_orderBy {
  id
  profileId
  status
  nonce
  name
  metadata
  metadata__id
  metadata__protocol
  metadata__pointer
  owner
  anchor
  blockNumber
  blockTimestamp
  transactionHash
  grants
  members
  members__id
  totalAmountReceived
}

type RawMetadata {
  id: String!
  protocol: BigInt!
  pointer: String!
}

input RawMetadata_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  protocol: BigInt
  protocol_not: BigInt
  protocol_gt: BigInt
  protocol_lt: BigInt
  protocol_gte: BigInt
  protocol_lte: BigInt
  protocol_in: [BigInt!]
  protocol_not_in: [BigInt!]
  pointer: String
  pointer_not: String
  pointer_gt: String
  pointer_lt: String
  pointer_gte: String
  pointer_lte: String
  pointer_in: [String!]
  pointer_not_in: [String!]
  pointer_contains: String
  pointer_contains_nocase: String
  pointer_not_contains: String
  pointer_not_contains_nocase: String
  pointer_starts_with: String
  pointer_starts_with_nocase: String
  pointer_not_starts_with: String
  pointer_not_starts_with_nocase: String
  pointer_ends_with: String
  pointer_ends_with_nocase: String
  pointer_not_ends_with: String
  pointer_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RawMetadata_filter]
  or: [RawMetadata_filter]
}

enum RawMetadata_orderBy {
  id
  protocol
  pointer
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Transaction {
  id: ID!
  blockNumber: BigInt!
  sender: Bytes!
  txHash: Bytes!
}

input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transaction_filter]
  or: [Transaction_filter]
}

enum Transaction_orderBy {
  id
  blockNumber
  sender
  txHash
}

type Update {
  id: ID!
  scope: Int!
  posterRole: Int!
  entityAddress: Bytes!
  postedBy: Bytes!
  content: RawMetadata!
  contentSchema: Int!
  postDecorator: Int!
  timestamp: BigInt!
}

input Update_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  scope: Int
  scope_not: Int
  scope_gt: Int
  scope_lt: Int
  scope_gte: Int
  scope_lte: Int
  scope_in: [Int!]
  scope_not_in: [Int!]
  posterRole: Int
  posterRole_not: Int
  posterRole_gt: Int
  posterRole_lt: Int
  posterRole_gte: Int
  posterRole_lte: Int
  posterRole_in: [Int!]
  posterRole_not_in: [Int!]
  entityAddress: Bytes
  entityAddress_not: Bytes
  entityAddress_gt: Bytes
  entityAddress_lt: Bytes
  entityAddress_gte: Bytes
  entityAddress_lte: Bytes
  entityAddress_in: [Bytes!]
  entityAddress_not_in: [Bytes!]
  entityAddress_contains: Bytes
  entityAddress_not_contains: Bytes
  postedBy: Bytes
  postedBy_not: Bytes
  postedBy_gt: Bytes
  postedBy_lt: Bytes
  postedBy_gte: Bytes
  postedBy_lte: Bytes
  postedBy_in: [Bytes!]
  postedBy_not_in: [Bytes!]
  postedBy_contains: Bytes
  postedBy_not_contains: Bytes
  content: String
  content_not: String
  content_gt: String
  content_lt: String
  content_gte: String
  content_lte: String
  content_in: [String!]
  content_not_in: [String!]
  content_contains: String
  content_contains_nocase: String
  content_not_contains: String
  content_not_contains_nocase: String
  content_starts_with: String
  content_starts_with_nocase: String
  content_not_starts_with: String
  content_not_starts_with_nocase: String
  content_ends_with: String
  content_ends_with_nocase: String
  content_not_ends_with: String
  content_not_ends_with_nocase: String
  content_: RawMetadata_filter
  contentSchema: Int
  contentSchema_not: Int
  contentSchema_gt: Int
  contentSchema_lt: Int
  contentSchema_gte: Int
  contentSchema_lte: Int
  contentSchema_in: [Int!]
  contentSchema_not_in: [Int!]
  postDecorator: Int
  postDecorator_not: Int
  postDecorator_gt: Int
  postDecorator_lt: Int
  postDecorator_gte: Int
  postDecorator_lte: Int
  postDecorator_in: [Int!]
  postDecorator_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Update_filter]
  or: [Update_filter]
}

enum Update_orderBy {
  id
  scope
  posterRole
  entityAddress
  postedBy
  content
  content__id
  content__protocol
  content__pointer
  contentSchema
  postDecorator
  timestamp
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "Contest"
"""
type Contest {
  """An object relationship"""
  choicesModule: StemModule
  choicesModule_id: String!
  contestAddress: String!
  contestStatus: numeric!
  contestVersion: String!
  db_write_timestamp: timestamp
  """An object relationship"""
  executionModule: StemModule
  executionModule_id: String!
  filterTag: String!
  id: String!
  isContinuous: Boolean!
  isRetractable: Boolean!
  """An object relationship"""
  pointsModule: StemModule
  pointsModule_id: String!
  """An object relationship"""
  votesModule: StemModule
  votesModule_id: String!
}

"""
columns and relationships of "ContestClone"
"""
type ContestClone {
  contestAddress: String!
  contestVersion: String!
  db_write_timestamp: timestamp
  filterTag: String!
  id: String!
}

"""
Boolean expression to filter rows from the table "ContestClone". All fields are combined with a logical 'AND'.
"""
input ContestClone_bool_exp {
  _and: [ContestClone_bool_exp!]
  _not: ContestClone_bool_exp
  _or: [ContestClone_bool_exp!]
  contestAddress: String_comparison_exp
  contestVersion: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  filterTag: String_comparison_exp
  id: String_comparison_exp
}

"""Ordering options when selecting data from "ContestClone"."""
input ContestClone_order_by {
  contestAddress: order_by
  contestVersion: order_by
  db_write_timestamp: order_by
  filterTag: order_by
  id: order_by
}

"""
select columns of table "ContestClone"
"""
enum ContestClone_select_column {
  """column name"""
  contestAddress
  """column name"""
  contestVersion
  """column name"""
  db_write_timestamp
  """column name"""
  filterTag
  """column name"""
  id
}

"""
Streaming cursor of the table "ContestClone"
"""
input ContestClone_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ContestClone_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ContestClone_stream_cursor_value_input {
  contestAddress: String
  contestVersion: String
  db_write_timestamp: timestamp
  filterTag: String
  id: String
}

"""
columns and relationships of "ContestTemplate"
"""
type ContestTemplate {
  active: Boolean!
  contestAddress: String!
  contestVersion: String!
  db_write_timestamp: timestamp
  id: String!
  mdPointer: String!
  mdProtocol: numeric!
}

"""
Boolean expression to filter rows from the table "ContestTemplate". All fields are combined with a logical 'AND'.
"""
input ContestTemplate_bool_exp {
  _and: [ContestTemplate_bool_exp!]
  _not: ContestTemplate_bool_exp
  _or: [ContestTemplate_bool_exp!]
  active: Boolean_comparison_exp
  contestAddress: String_comparison_exp
  contestVersion: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  mdPointer: String_comparison_exp
  mdProtocol: numeric_comparison_exp
}

"""Ordering options when selecting data from "ContestTemplate"."""
input ContestTemplate_order_by {
  active: order_by
  contestAddress: order_by
  contestVersion: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
}

"""
select columns of table "ContestTemplate"
"""
enum ContestTemplate_select_column {
  """column name"""
  active
  """column name"""
  contestAddress
  """column name"""
  contestVersion
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  mdPointer
  """column name"""
  mdProtocol
}

"""
Streaming cursor of the table "ContestTemplate"
"""
input ContestTemplate_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ContestTemplate_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ContestTemplate_stream_cursor_value_input {
  active: Boolean
  contestAddress: String
  contestVersion: String
  db_write_timestamp: timestamp
  id: String
  mdPointer: String
  mdProtocol: numeric
}

"""
Boolean expression to filter rows from the table "Contest". All fields are combined with a logical 'AND'.
"""
input Contest_bool_exp {
  _and: [Contest_bool_exp!]
  _not: Contest_bool_exp
  _or: [Contest_bool_exp!]
  choicesModule: StemModule_bool_exp
  choicesModule_id: String_comparison_exp
  contestAddress: String_comparison_exp
  contestStatus: numeric_comparison_exp
  contestVersion: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  executionModule: StemModule_bool_exp
  executionModule_id: String_comparison_exp
  filterTag: String_comparison_exp
  id: String_comparison_exp
  isContinuous: Boolean_comparison_exp
  isRetractable: Boolean_comparison_exp
  pointsModule: StemModule_bool_exp
  pointsModule_id: String_comparison_exp
  votesModule: StemModule_bool_exp
  votesModule_id: String_comparison_exp
}

"""Ordering options when selecting data from "Contest"."""
input Contest_order_by {
  choicesModule: StemModule_order_by
  choicesModule_id: order_by
  contestAddress: order_by
  contestStatus: order_by
  contestVersion: order_by
  db_write_timestamp: order_by
  executionModule: StemModule_order_by
  executionModule_id: order_by
  filterTag: order_by
  id: order_by
  isContinuous: order_by
  isRetractable: order_by
  pointsModule: StemModule_order_by
  pointsModule_id: order_by
  votesModule: StemModule_order_by
  votesModule_id: order_by
}

"""
select columns of table "Contest"
"""
enum Contest_select_column {
  """column name"""
  choicesModule_id
  """column name"""
  contestAddress
  """column name"""
  contestStatus
  """column name"""
  contestVersion
  """column name"""
  db_write_timestamp
  """column name"""
  executionModule_id
  """column name"""
  filterTag
  """column name"""
  id
  """column name"""
  isContinuous
  """column name"""
  isRetractable
  """column name"""
  pointsModule_id
  """column name"""
  votesModule_id
}

"""
Streaming cursor of the table "Contest"
"""
input Contest_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Contest_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Contest_stream_cursor_value_input {
  choicesModule_id: String
  contestAddress: String
  contestStatus: numeric
  contestVersion: String
  db_write_timestamp: timestamp
  executionModule_id: String
  filterTag: String
  id: String
  isContinuous: Boolean
  isRetractable: Boolean
  pointsModule_id: String
  votesModule_id: String
}

"""
columns and relationships of "ERCPointParams"
"""
type ERCPointParams {
  db_write_timestamp: timestamp
  id: String!
  voteTokenAddress: String!
  votingCheckpoint: numeric!
}

"""
Boolean expression to filter rows from the table "ERCPointParams". All fields are combined with a logical 'AND'.
"""
input ERCPointParams_bool_exp {
  _and: [ERCPointParams_bool_exp!]
  _not: ERCPointParams_bool_exp
  _or: [ERCPointParams_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  voteTokenAddress: String_comparison_exp
  votingCheckpoint: numeric_comparison_exp
}

"""Ordering options when selecting data from "ERCPointParams"."""
input ERCPointParams_order_by {
  db_write_timestamp: order_by
  id: order_by
  voteTokenAddress: order_by
  votingCheckpoint: order_by
}

"""
select columns of table "ERCPointParams"
"""
enum ERCPointParams_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  voteTokenAddress
  """column name"""
  votingCheckpoint
}

"""
Streaming cursor of the table "ERCPointParams"
"""
input ERCPointParams_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ERCPointParams_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ERCPointParams_stream_cursor_value_input {
  db_write_timestamp: timestamp
  id: String
  voteTokenAddress: String
  votingCheckpoint: numeric
}

"""
columns and relationships of "EnvioTX"
"""
type EnvioTX {
  blockNumber: numeric!
  db_write_timestamp: timestamp
  id: String!
  srcAddress: String!
  txHash: String!
  txOrigin: String
}

"""
Boolean expression to filter rows from the table "EnvioTX". All fields are combined with a logical 'AND'.
"""
input EnvioTX_bool_exp {
  _and: [EnvioTX_bool_exp!]
  _not: EnvioTX_bool_exp
  _or: [EnvioTX_bool_exp!]
  blockNumber: numeric_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  srcAddress: String_comparison_exp
  txHash: String_comparison_exp
  txOrigin: String_comparison_exp
}

"""Ordering options when selecting data from "EnvioTX"."""
input EnvioTX_order_by {
  blockNumber: order_by
  db_write_timestamp: order_by
  id: order_by
  srcAddress: order_by
  txHash: order_by
  txOrigin: order_by
}

"""
select columns of table "EnvioTX"
"""
enum EnvioTX_select_column {
  """column name"""
  blockNumber
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  srcAddress
  """column name"""
  txHash
  """column name"""
  txOrigin
}

"""
Streaming cursor of the table "EnvioTX"
"""
input EnvioTX_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: EnvioTX_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input EnvioTX_stream_cursor_value_input {
  blockNumber: numeric
  db_write_timestamp: timestamp
  id: String
  srcAddress: String
  txHash: String
  txOrigin: String
}

"""
columns and relationships of "EventPost"
"""
type EventPost {
  db_write_timestamp: timestamp
  hatId: numeric!
  """An object relationship"""
  hatsPoster: HatsPoster
  hatsPoster_id: String!
  id: String!
  mdPointer: String!
  mdProtocol: numeric!
  tag: String!
}

"""
order by aggregate values of table "EventPost"
"""
input EventPost_aggregate_order_by {
  avg: EventPost_avg_order_by
  count: order_by
  max: EventPost_max_order_by
  min: EventPost_min_order_by
  stddev: EventPost_stddev_order_by
  stddev_pop: EventPost_stddev_pop_order_by
  stddev_samp: EventPost_stddev_samp_order_by
  sum: EventPost_sum_order_by
  var_pop: EventPost_var_pop_order_by
  var_samp: EventPost_var_samp_order_by
  variance: EventPost_variance_order_by
}

"""
order by avg() on columns of table "EventPost"
"""
input EventPost_avg_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
Boolean expression to filter rows from the table "EventPost". All fields are combined with a logical 'AND'.
"""
input EventPost_bool_exp {
  _and: [EventPost_bool_exp!]
  _not: EventPost_bool_exp
  _or: [EventPost_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  hatId: numeric_comparison_exp
  hatsPoster: HatsPoster_bool_exp
  hatsPoster_id: String_comparison_exp
  id: String_comparison_exp
  mdPointer: String_comparison_exp
  mdProtocol: numeric_comparison_exp
  tag: String_comparison_exp
}

"""
order by max() on columns of table "EventPost"
"""
input EventPost_max_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsPoster_id: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  tag: order_by
}

"""
order by min() on columns of table "EventPost"
"""
input EventPost_min_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsPoster_id: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  tag: order_by
}

"""Ordering options when selecting data from "EventPost"."""
input EventPost_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsPoster: HatsPoster_order_by
  hatsPoster_id: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  tag: order_by
}

"""
select columns of table "EventPost"
"""
enum EventPost_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  hatId
  """column name"""
  hatsPoster_id
  """column name"""
  id
  """column name"""
  mdPointer
  """column name"""
  mdProtocol
  """column name"""
  tag
}

"""
order by stddev() on columns of table "EventPost"
"""
input EventPost_stddev_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by stddev_pop() on columns of table "EventPost"
"""
input EventPost_stddev_pop_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by stddev_samp() on columns of table "EventPost"
"""
input EventPost_stddev_samp_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
Streaming cursor of the table "EventPost"
"""
input EventPost_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: EventPost_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input EventPost_stream_cursor_value_input {
  db_write_timestamp: timestamp
  hatId: numeric
  hatsPoster_id: String
  id: String
  mdPointer: String
  mdProtocol: numeric
  tag: String
}

"""
order by sum() on columns of table "EventPost"
"""
input EventPost_sum_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by var_pop() on columns of table "EventPost"
"""
input EventPost_var_pop_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by var_samp() on columns of table "EventPost"
"""
input EventPost_var_samp_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by variance() on columns of table "EventPost"
"""
input EventPost_variance_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
columns and relationships of "FactoryEventsSummary"
"""
type FactoryEventsSummary {
  address: String!
  admins: [String!]!
  contestBuiltCount: numeric!
  contestCloneCount: numeric!
  contestTemplateCount: numeric!
  db_write_timestamp: timestamp
  id: String!
  moduleCloneCount: numeric!
  moduleTemplateCount: numeric!
}

"""
Boolean expression to filter rows from the table "FactoryEventsSummary". All fields are combined with a logical 'AND'.
"""
input FactoryEventsSummary_bool_exp {
  _and: [FactoryEventsSummary_bool_exp!]
  _not: FactoryEventsSummary_bool_exp
  _or: [FactoryEventsSummary_bool_exp!]
  address: String_comparison_exp
  admins: String_array_comparison_exp
  contestBuiltCount: numeric_comparison_exp
  contestCloneCount: numeric_comparison_exp
  contestTemplateCount: numeric_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  moduleCloneCount: numeric_comparison_exp
  moduleTemplateCount: numeric_comparison_exp
}

"""Ordering options when selecting data from "FactoryEventsSummary"."""
input FactoryEventsSummary_order_by {
  address: order_by
  admins: order_by
  contestBuiltCount: order_by
  contestCloneCount: order_by
  contestTemplateCount: order_by
  db_write_timestamp: order_by
  id: order_by
  moduleCloneCount: order_by
  moduleTemplateCount: order_by
}

"""
select columns of table "FactoryEventsSummary"
"""
enum FactoryEventsSummary_select_column {
  """column name"""
  address
  """column name"""
  admins
  """column name"""
  contestBuiltCount
  """column name"""
  contestCloneCount
  """column name"""
  contestTemplateCount
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  moduleCloneCount
  """column name"""
  moduleTemplateCount
}

"""
Streaming cursor of the table "FactoryEventsSummary"
"""
input FactoryEventsSummary_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: FactoryEventsSummary_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input FactoryEventsSummary_stream_cursor_value_input {
  address: String
  admins: [String!]
  contestBuiltCount: numeric
  contestCloneCount: numeric
  contestTemplateCount: numeric
  db_write_timestamp: timestamp
  id: String
  moduleCloneCount: numeric
  moduleTemplateCount: numeric
}

"""
columns and relationships of "GrantShipsVoting"
"""
type GrantShipsVoting {
  """An array relationship"""
  choices(
    """distinct select on columns"""
    distinct_on: [ShipChoice_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipChoice_order_by!]
    """filter the rows returned"""
    where: ShipChoice_bool_exp
  ): [ShipChoice!]!
  """An object relationship"""
  contest: Contest
  contest_id: String!
  db_write_timestamp: timestamp
  endTime: numeric
  hatId: numeric!
  hatsAddress: String!
  id: String!
  isVotingActive: Boolean!
  startTime: numeric
  totalVotes: numeric!
  voteDuration: numeric!
  voteTokenAddress: String!
  """An array relationship"""
  votes(
    """distinct select on columns"""
    distinct_on: [ShipVote_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipVote_order_by!]
    """filter the rows returned"""
    where: ShipVote_bool_exp
  ): [ShipVote!]!
  votingCheckpoint: numeric!
}

"""
Boolean expression to filter rows from the table "GrantShipsVoting". All fields are combined with a logical 'AND'.
"""
input GrantShipsVoting_bool_exp {
  _and: [GrantShipsVoting_bool_exp!]
  _not: GrantShipsVoting_bool_exp
  _or: [GrantShipsVoting_bool_exp!]
  choices: ShipChoice_bool_exp
  contest: Contest_bool_exp
  contest_id: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  endTime: numeric_comparison_exp
  hatId: numeric_comparison_exp
  hatsAddress: String_comparison_exp
  id: String_comparison_exp
  isVotingActive: Boolean_comparison_exp
  startTime: numeric_comparison_exp
  totalVotes: numeric_comparison_exp
  voteDuration: numeric_comparison_exp
  voteTokenAddress: String_comparison_exp
  votes: ShipVote_bool_exp
  votingCheckpoint: numeric_comparison_exp
}

"""Ordering options when selecting data from "GrantShipsVoting"."""
input GrantShipsVoting_order_by {
  choices_aggregate: ShipChoice_aggregate_order_by
  contest: Contest_order_by
  contest_id: order_by
  db_write_timestamp: order_by
  endTime: order_by
  hatId: order_by
  hatsAddress: order_by
  id: order_by
  isVotingActive: order_by
  startTime: order_by
  totalVotes: order_by
  voteDuration: order_by
  voteTokenAddress: order_by
  votes_aggregate: ShipVote_aggregate_order_by
  votingCheckpoint: order_by
}

"""
select columns of table "GrantShipsVoting"
"""
enum GrantShipsVoting_select_column {
  """column name"""
  contest_id
  """column name"""
  db_write_timestamp
  """column name"""
  endTime
  """column name"""
  hatId
  """column name"""
  hatsAddress
  """column name"""
  id
  """column name"""
  isVotingActive
  """column name"""
  startTime
  """column name"""
  totalVotes
  """column name"""
  voteDuration
  """column name"""
  voteTokenAddress
  """column name"""
  votingCheckpoint
}

"""
Streaming cursor of the table "GrantShipsVoting"
"""
input GrantShipsVoting_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: GrantShipsVoting_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input GrantShipsVoting_stream_cursor_value_input {
  contest_id: String
  db_write_timestamp: timestamp
  endTime: numeric
  hatId: numeric
  hatsAddress: String
  id: String
  isVotingActive: Boolean
  startTime: numeric
  totalVotes: numeric
  voteDuration: numeric
  voteTokenAddress: String
  votingCheckpoint: numeric
}

"""
columns and relationships of "HALParams"
"""
type HALParams {
  db_write_timestamp: timestamp
  hatId: numeric!
  hatsAddress: String!
  id: String!
}

"""
Boolean expression to filter rows from the table "HALParams". All fields are combined with a logical 'AND'.
"""
input HALParams_bool_exp {
  _and: [HALParams_bool_exp!]
  _not: HALParams_bool_exp
  _or: [HALParams_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  hatId: numeric_comparison_exp
  hatsAddress: String_comparison_exp
  id: String_comparison_exp
}

"""Ordering options when selecting data from "HALParams"."""
input HALParams_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsAddress: order_by
  id: order_by
}

"""
select columns of table "HALParams"
"""
enum HALParams_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  hatId
  """column name"""
  hatsAddress
  """column name"""
  id
}

"""
Streaming cursor of the table "HALParams"
"""
input HALParams_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: HALParams_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input HALParams_stream_cursor_value_input {
  db_write_timestamp: timestamp
  hatId: numeric
  hatsAddress: String
  id: String
}

"""
columns and relationships of "HatsPoster"
"""
type HatsPoster {
  db_write_timestamp: timestamp
  """An array relationship"""
  eventPosts(
    """distinct select on columns"""
    distinct_on: [EventPost_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [EventPost_order_by!]
    """filter the rows returned"""
    where: EventPost_bool_exp
  ): [EventPost!]!
  hatIds: [numeric!]!
  hatsAddress: String!
  id: String!
  """An array relationship"""
  record(
    """distinct select on columns"""
    distinct_on: [Record_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [Record_order_by!]
    """filter the rows returned"""
    where: Record_bool_exp
  ): [Record!]!
}

"""
Boolean expression to filter rows from the table "HatsPoster". All fields are combined with a logical 'AND'.
"""
input HatsPoster_bool_exp {
  _and: [HatsPoster_bool_exp!]
  _not: HatsPoster_bool_exp
  _or: [HatsPoster_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  eventPosts: EventPost_bool_exp
  hatIds: numeric_array_comparison_exp
  hatsAddress: String_comparison_exp
  id: String_comparison_exp
  record: Record_bool_exp
}

"""Ordering options when selecting data from "HatsPoster"."""
input HatsPoster_order_by {
  db_write_timestamp: order_by
  eventPosts_aggregate: EventPost_aggregate_order_by
  hatIds: order_by
  hatsAddress: order_by
  id: order_by
  record_aggregate: Record_aggregate_order_by
}

"""
select columns of table "HatsPoster"
"""
enum HatsPoster_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  hatIds
  """column name"""
  hatsAddress
  """column name"""
  id
}

"""
Streaming cursor of the table "HatsPoster"
"""
input HatsPoster_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: HatsPoster_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input HatsPoster_stream_cursor_value_input {
  db_write_timestamp: timestamp
  hatIds: [numeric!]
  hatsAddress: String
  id: String
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "LocalLog"
"""
type LocalLog {
  db_write_timestamp: timestamp
  id: String!
  message: String
}

"""
Boolean expression to filter rows from the table "LocalLog". All fields are combined with a logical 'AND'.
"""
input LocalLog_bool_exp {
  _and: [LocalLog_bool_exp!]
  _not: LocalLog_bool_exp
  _or: [LocalLog_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  message: String_comparison_exp
}

"""Ordering options when selecting data from "LocalLog"."""
input LocalLog_order_by {
  db_write_timestamp: order_by
  id: order_by
  message: order_by
}

"""
select columns of table "LocalLog"
"""
enum LocalLog_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  message
}

"""
Streaming cursor of the table "LocalLog"
"""
input LocalLog_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: LocalLog_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input LocalLog_stream_cursor_value_input {
  db_write_timestamp: timestamp
  id: String
  message: String
}

"""
columns and relationships of "ModuleTemplate"
"""
type ModuleTemplate {
  active: Boolean!
  db_write_timestamp: timestamp
  id: String!
  mdPointer: String!
  mdProtocol: numeric!
  moduleName: String!
  templateAddress: String!
}

"""
Boolean expression to filter rows from the table "ModuleTemplate". All fields are combined with a logical 'AND'.
"""
input ModuleTemplate_bool_exp {
  _and: [ModuleTemplate_bool_exp!]
  _not: ModuleTemplate_bool_exp
  _or: [ModuleTemplate_bool_exp!]
  active: Boolean_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  mdPointer: String_comparison_exp
  mdProtocol: numeric_comparison_exp
  moduleName: String_comparison_exp
  templateAddress: String_comparison_exp
}

"""Ordering options when selecting data from "ModuleTemplate"."""
input ModuleTemplate_order_by {
  active: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  moduleName: order_by
  templateAddress: order_by
}

"""
select columns of table "ModuleTemplate"
"""
enum ModuleTemplate_select_column {
  """column name"""
  active
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  mdPointer
  """column name"""
  mdProtocol
  """column name"""
  moduleName
  """column name"""
  templateAddress
}

"""
Streaming cursor of the table "ModuleTemplate"
"""
input ModuleTemplate_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ModuleTemplate_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ModuleTemplate_stream_cursor_value_input {
  active: Boolean
  db_write_timestamp: timestamp
  id: String
  mdPointer: String
  mdProtocol: numeric
  moduleName: String
  templateAddress: String
}

"""
columns and relationships of "Record"
"""
type Record {
  db_write_timestamp: timestamp
  hatId: numeric!
  """An object relationship"""
  hatsPoster: HatsPoster
  hatsPoster_id: String!
  id: String!
  mdPointer: String!
  mdProtocol: numeric!
  nonce: String!
  tag: String!
}

"""
order by aggregate values of table "Record"
"""
input Record_aggregate_order_by {
  avg: Record_avg_order_by
  count: order_by
  max: Record_max_order_by
  min: Record_min_order_by
  stddev: Record_stddev_order_by
  stddev_pop: Record_stddev_pop_order_by
  stddev_samp: Record_stddev_samp_order_by
  sum: Record_sum_order_by
  var_pop: Record_var_pop_order_by
  var_samp: Record_var_samp_order_by
  variance: Record_variance_order_by
}

"""
order by avg() on columns of table "Record"
"""
input Record_avg_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
Boolean expression to filter rows from the table "Record". All fields are combined with a logical 'AND'.
"""
input Record_bool_exp {
  _and: [Record_bool_exp!]
  _not: Record_bool_exp
  _or: [Record_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  hatId: numeric_comparison_exp
  hatsPoster: HatsPoster_bool_exp
  hatsPoster_id: String_comparison_exp
  id: String_comparison_exp
  mdPointer: String_comparison_exp
  mdProtocol: numeric_comparison_exp
  nonce: String_comparison_exp
  tag: String_comparison_exp
}

"""
order by max() on columns of table "Record"
"""
input Record_max_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsPoster_id: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  nonce: order_by
  tag: order_by
}

"""
order by min() on columns of table "Record"
"""
input Record_min_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsPoster_id: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  nonce: order_by
  tag: order_by
}

"""Ordering options when selecting data from "Record"."""
input Record_order_by {
  db_write_timestamp: order_by
  hatId: order_by
  hatsPoster: HatsPoster_order_by
  hatsPoster_id: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  nonce: order_by
  tag: order_by
}

"""
select columns of table "Record"
"""
enum Record_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  hatId
  """column name"""
  hatsPoster_id
  """column name"""
  id
  """column name"""
  mdPointer
  """column name"""
  mdProtocol
  """column name"""
  nonce
  """column name"""
  tag
}

"""
order by stddev() on columns of table "Record"
"""
input Record_stddev_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by stddev_pop() on columns of table "Record"
"""
input Record_stddev_pop_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by stddev_samp() on columns of table "Record"
"""
input Record_stddev_samp_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
Streaming cursor of the table "Record"
"""
input Record_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Record_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Record_stream_cursor_value_input {
  db_write_timestamp: timestamp
  hatId: numeric
  hatsPoster_id: String
  id: String
  mdPointer: String
  mdProtocol: numeric
  nonce: String
  tag: String
}

"""
order by sum() on columns of table "Record"
"""
input Record_sum_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by var_pop() on columns of table "Record"
"""
input Record_var_pop_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by var_samp() on columns of table "Record"
"""
input Record_var_samp_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
order by variance() on columns of table "Record"
"""
input Record_variance_order_by {
  hatId: order_by
  mdProtocol: order_by
}

"""
columns and relationships of "ShipChoice"
"""
type ShipChoice {
  active: Boolean!
  choiceData: String!
  """An object relationship"""
  contest: GrantShipsVoting
  contest_id: String!
  db_write_timestamp: timestamp
  id: String!
  mdPointer: String!
  mdProtocol: numeric!
  voteTally: numeric!
  """An array relationship"""
  votes(
    """distinct select on columns"""
    distinct_on: [ShipVote_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [ShipVote_order_by!]
    """filter the rows returned"""
    where: ShipVote_bool_exp
  ): [ShipVote!]!
}

"""
order by aggregate values of table "ShipChoice"
"""
input ShipChoice_aggregate_order_by {
  avg: ShipChoice_avg_order_by
  count: order_by
  max: ShipChoice_max_order_by
  min: ShipChoice_min_order_by
  stddev: ShipChoice_stddev_order_by
  stddev_pop: ShipChoice_stddev_pop_order_by
  stddev_samp: ShipChoice_stddev_samp_order_by
  sum: ShipChoice_sum_order_by
  var_pop: ShipChoice_var_pop_order_by
  var_samp: ShipChoice_var_samp_order_by
  variance: ShipChoice_variance_order_by
}

"""
order by avg() on columns of table "ShipChoice"
"""
input ShipChoice_avg_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
Boolean expression to filter rows from the table "ShipChoice". All fields are combined with a logical 'AND'.
"""
input ShipChoice_bool_exp {
  _and: [ShipChoice_bool_exp!]
  _not: ShipChoice_bool_exp
  _or: [ShipChoice_bool_exp!]
  active: Boolean_comparison_exp
  choiceData: String_comparison_exp
  contest: GrantShipsVoting_bool_exp
  contest_id: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  mdPointer: String_comparison_exp
  mdProtocol: numeric_comparison_exp
  voteTally: numeric_comparison_exp
  votes: ShipVote_bool_exp
}

"""
order by max() on columns of table "ShipChoice"
"""
input ShipChoice_max_order_by {
  choiceData: order_by
  contest_id: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  voteTally: order_by
}

"""
order by min() on columns of table "ShipChoice"
"""
input ShipChoice_min_order_by {
  choiceData: order_by
  contest_id: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  voteTally: order_by
}

"""Ordering options when selecting data from "ShipChoice"."""
input ShipChoice_order_by {
  active: order_by
  choiceData: order_by
  contest: GrantShipsVoting_order_by
  contest_id: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  voteTally: order_by
  votes_aggregate: ShipVote_aggregate_order_by
}

"""
select columns of table "ShipChoice"
"""
enum ShipChoice_select_column {
  """column name"""
  active
  """column name"""
  choiceData
  """column name"""
  contest_id
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  mdPointer
  """column name"""
  mdProtocol
  """column name"""
  voteTally
}

"""
order by stddev() on columns of table "ShipChoice"
"""
input ShipChoice_stddev_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
order by stddev_pop() on columns of table "ShipChoice"
"""
input ShipChoice_stddev_pop_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
order by stddev_samp() on columns of table "ShipChoice"
"""
input ShipChoice_stddev_samp_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
Streaming cursor of the table "ShipChoice"
"""
input ShipChoice_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ShipChoice_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ShipChoice_stream_cursor_value_input {
  active: Boolean
  choiceData: String
  contest_id: String
  db_write_timestamp: timestamp
  id: String
  mdPointer: String
  mdProtocol: numeric
  voteTally: numeric
}

"""
order by sum() on columns of table "ShipChoice"
"""
input ShipChoice_sum_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
order by var_pop() on columns of table "ShipChoice"
"""
input ShipChoice_var_pop_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
order by var_samp() on columns of table "ShipChoice"
"""
input ShipChoice_var_samp_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
order by variance() on columns of table "ShipChoice"
"""
input ShipChoice_variance_order_by {
  mdProtocol: order_by
  voteTally: order_by
}

"""
columns and relationships of "ShipVote"
"""
type ShipVote {
  amount: numeric!
  """An object relationship"""
  choice: ShipChoice
  choice_id: String!
  """An object relationship"""
  contest: GrantShipsVoting
  contest_id: String!
  db_write_timestamp: timestamp
  id: String!
  isRectractVote: Boolean!
  mdPointer: String!
  mdProtocol: numeric!
  voter: String!
}

"""
order by aggregate values of table "ShipVote"
"""
input ShipVote_aggregate_order_by {
  avg: ShipVote_avg_order_by
  count: order_by
  max: ShipVote_max_order_by
  min: ShipVote_min_order_by
  stddev: ShipVote_stddev_order_by
  stddev_pop: ShipVote_stddev_pop_order_by
  stddev_samp: ShipVote_stddev_samp_order_by
  sum: ShipVote_sum_order_by
  var_pop: ShipVote_var_pop_order_by
  var_samp: ShipVote_var_samp_order_by
  variance: ShipVote_variance_order_by
}

"""
order by avg() on columns of table "ShipVote"
"""
input ShipVote_avg_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
Boolean expression to filter rows from the table "ShipVote". All fields are combined with a logical 'AND'.
"""
input ShipVote_bool_exp {
  _and: [ShipVote_bool_exp!]
  _not: ShipVote_bool_exp
  _or: [ShipVote_bool_exp!]
  amount: numeric_comparison_exp
  choice: ShipChoice_bool_exp
  choice_id: String_comparison_exp
  contest: GrantShipsVoting_bool_exp
  contest_id: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  isRectractVote: Boolean_comparison_exp
  mdPointer: String_comparison_exp
  mdProtocol: numeric_comparison_exp
  voter: String_comparison_exp
}

"""
order by max() on columns of table "ShipVote"
"""
input ShipVote_max_order_by {
  amount: order_by
  choice_id: order_by
  contest_id: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  voter: order_by
}

"""
order by min() on columns of table "ShipVote"
"""
input ShipVote_min_order_by {
  amount: order_by
  choice_id: order_by
  contest_id: order_by
  db_write_timestamp: order_by
  id: order_by
  mdPointer: order_by
  mdProtocol: order_by
  voter: order_by
}

"""Ordering options when selecting data from "ShipVote"."""
input ShipVote_order_by {
  amount: order_by
  choice: ShipChoice_order_by
  choice_id: order_by
  contest: GrantShipsVoting_order_by
  contest_id: order_by
  db_write_timestamp: order_by
  id: order_by
  isRectractVote: order_by
  mdPointer: order_by
  mdProtocol: order_by
  voter: order_by
}

"""
select columns of table "ShipVote"
"""
enum ShipVote_select_column {
  """column name"""
  amount
  """column name"""
  choice_id
  """column name"""
  contest_id
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  isRectractVote
  """column name"""
  mdPointer
  """column name"""
  mdProtocol
  """column name"""
  voter
}

"""
order by stddev() on columns of table "ShipVote"
"""
input ShipVote_stddev_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
order by stddev_pop() on columns of table "ShipVote"
"""
input ShipVote_stddev_pop_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
order by stddev_samp() on columns of table "ShipVote"
"""
input ShipVote_stddev_samp_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
Streaming cursor of the table "ShipVote"
"""
input ShipVote_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ShipVote_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ShipVote_stream_cursor_value_input {
  amount: numeric
  choice_id: String
  contest_id: String
  db_write_timestamp: timestamp
  id: String
  isRectractVote: Boolean
  mdPointer: String
  mdProtocol: numeric
  voter: String
}

"""
order by sum() on columns of table "ShipVote"
"""
input ShipVote_sum_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
order by var_pop() on columns of table "ShipVote"
"""
input ShipVote_var_pop_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
order by var_samp() on columns of table "ShipVote"
"""
input ShipVote_var_samp_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
order by variance() on columns of table "ShipVote"
"""
input ShipVote_variance_order_by {
  amount: order_by
  mdProtocol: order_by
}

"""
columns and relationships of "StemModule"
"""
type StemModule {
  """An object relationship"""
  contest: Contest
  contestAddress: String
  contest_id: String
  db_write_timestamp: timestamp
  filterTag: String!
  id: String!
  moduleAddress: String!
  moduleName: String!
  """An object relationship"""
  moduleTemplate: ModuleTemplate
  moduleTemplate_id: String!
}

"""
Boolean expression to filter rows from the table "StemModule". All fields are combined with a logical 'AND'.
"""
input StemModule_bool_exp {
  _and: [StemModule_bool_exp!]
  _not: StemModule_bool_exp
  _or: [StemModule_bool_exp!]
  contest: Contest_bool_exp
  contestAddress: String_comparison_exp
  contest_id: String_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  filterTag: String_comparison_exp
  id: String_comparison_exp
  moduleAddress: String_comparison_exp
  moduleName: String_comparison_exp
  moduleTemplate: ModuleTemplate_bool_exp
  moduleTemplate_id: String_comparison_exp
}

"""Ordering options when selecting data from "StemModule"."""
input StemModule_order_by {
  contest: Contest_order_by
  contestAddress: order_by
  contest_id: order_by
  db_write_timestamp: order_by
  filterTag: order_by
  id: order_by
  moduleAddress: order_by
  moduleName: order_by
  moduleTemplate: ModuleTemplate_order_by
  moduleTemplate_id: order_by
}

"""
select columns of table "StemModule"
"""
enum StemModule_select_column {
  """column name"""
  contestAddress
  """column name"""
  contest_id
  """column name"""
  db_write_timestamp
  """column name"""
  filterTag
  """column name"""
  id
  """column name"""
  moduleAddress
  """column name"""
  moduleName
  """column name"""
  moduleTemplate_id
}

"""
Streaming cursor of the table "StemModule"
"""
input StemModule_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: StemModule_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input StemModule_stream_cursor_value_input {
  contestAddress: String
  contest_id: String
  db_write_timestamp: timestamp
  filterTag: String
  id: String
  moduleAddress: String
  moduleName: String
  moduleTemplate_id: String
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [String!]
  """does the array contain the given value"""
  _contains: [String!]
  _eq: [String!]
  _gt: [String!]
  _gte: [String!]
  _in: [[String!]!]
  _is_null: Boolean
  _lt: [String!]
  _lte: [String!]
  _neq: [String!]
  _nin: [[String!]!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]
  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean
  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String
  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]
  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String
  """does the column NOT match the given pattern"""
  _nlike: String
  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String
  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String
  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String
  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "TVParams"
"""
type TVParams {
  db_write_timestamp: timestamp
  id: String!
  voteDuration: numeric!
}

"""
Boolean expression to filter rows from the table "TVParams". All fields are combined with a logical 'AND'.
"""
input TVParams_bool_exp {
  _and: [TVParams_bool_exp!]
  _not: TVParams_bool_exp
  _or: [TVParams_bool_exp!]
  db_write_timestamp: timestamp_comparison_exp
  id: String_comparison_exp
  voteDuration: numeric_comparison_exp
}

"""Ordering options when selecting data from "TVParams"."""
input TVParams_order_by {
  db_write_timestamp: order_by
  id: order_by
  voteDuration: order_by
}

"""
select columns of table "TVParams"
"""
enum TVParams_select_column {
  """column name"""
  db_write_timestamp
  """column name"""
  id
  """column name"""
  voteDuration
}

"""
Streaming cursor of the table "TVParams"
"""
input TVParams_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: TVParams_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input TVParams_stream_cursor_value_input {
  db_write_timestamp: timestamp
  id: String
  voteDuration: numeric
}

"""
columns and relationships of "chain_metadata"
"""
type chain_metadata {
  block_height: Int!
  chain_id: Int!
  end_block: Int
  first_event_block_number: Int
  is_hyper_sync: Boolean!
  latest_fetched_block_number: Int!
  latest_processed_block: Int
  num_batches_fetched: Int!
  num_events_processed: Int
  start_block: Int!
  timestamp_caught_up_to_head_or_endblock: timestamptz
}

"""
Boolean expression to filter rows from the table "chain_metadata". All fields are combined with a logical 'AND'.
"""
input chain_metadata_bool_exp {
  _and: [chain_metadata_bool_exp!]
  _not: chain_metadata_bool_exp
  _or: [chain_metadata_bool_exp!]
  block_height: Int_comparison_exp
  chain_id: Int_comparison_exp
  end_block: Int_comparison_exp
  first_event_block_number: Int_comparison_exp
  is_hyper_sync: Boolean_comparison_exp
  latest_fetched_block_number: Int_comparison_exp
  latest_processed_block: Int_comparison_exp
  num_batches_fetched: Int_comparison_exp
  num_events_processed: Int_comparison_exp
  start_block: Int_comparison_exp
  timestamp_caught_up_to_head_or_endblock: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "chain_metadata"."""
input chain_metadata_order_by {
  block_height: order_by
  chain_id: order_by
  end_block: order_by
  first_event_block_number: order_by
  is_hyper_sync: order_by
  latest_fetched_block_number: order_by
  latest_processed_block: order_by
  num_batches_fetched: order_by
  num_events_processed: order_by
  start_block: order_by
  timestamp_caught_up_to_head_or_endblock: order_by
}

"""
select columns of table "chain_metadata"
"""
enum chain_metadata_select_column {
  """column name"""
  block_height
  """column name"""
  chain_id
  """column name"""
  end_block
  """column name"""
  first_event_block_number
  """column name"""
  is_hyper_sync
  """column name"""
  latest_fetched_block_number
  """column name"""
  latest_processed_block
  """column name"""
  num_batches_fetched
  """column name"""
  num_events_processed
  """column name"""
  start_block
  """column name"""
  timestamp_caught_up_to_head_or_endblock
}

"""
Streaming cursor of the table "chain_metadata"
"""
input chain_metadata_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: chain_metadata_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input chain_metadata_stream_cursor_value_input {
  block_height: Int
  chain_id: Int
  end_block: Int
  first_event_block_number: Int
  is_hyper_sync: Boolean
  latest_fetched_block_number: Int
  latest_processed_block: Int
  num_batches_fetched: Int
  num_events_processed: Int
  start_block: Int
  timestamp_caught_up_to_head_or_endblock: timestamptz
}

scalar contract_type

"""
Boolean expression to compare columns of type "contract_type". All fields are combined with logical 'AND'.
"""
input contract_type_comparison_exp {
  _eq: contract_type
  _gt: contract_type
  _gte: contract_type
  _in: [contract_type!]
  _is_null: Boolean
  _lt: contract_type
  _lte: contract_type
  _neq: contract_type
  _nin: [contract_type!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC
  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "dynamic_contract_registry"
"""
type dynamic_contract_registry {
  block_timestamp: Int!
  chain_id: Int!
  contract_address: String!
  contract_type: contract_type!
  event_id: numeric!
}

"""
Boolean expression to filter rows from the table "dynamic_contract_registry". All fields are combined with a logical 'AND'.
"""
input dynamic_contract_registry_bool_exp {
  _and: [dynamic_contract_registry_bool_exp!]
  _not: dynamic_contract_registry_bool_exp
  _or: [dynamic_contract_registry_bool_exp!]
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  contract_address: String_comparison_exp
  contract_type: contract_type_comparison_exp
  event_id: numeric_comparison_exp
}

"""Ordering options when selecting data from "dynamic_contract_registry"."""
input dynamic_contract_registry_order_by {
  block_timestamp: order_by
  chain_id: order_by
  contract_address: order_by
  contract_type: order_by
  event_id: order_by
}

"""
select columns of table "dynamic_contract_registry"
"""
enum dynamic_contract_registry_select_column {
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  contract_address
  """column name"""
  contract_type
  """column name"""
  event_id
}

"""
Streaming cursor of the table "dynamic_contract_registry"
"""
input dynamic_contract_registry_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: dynamic_contract_registry_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input dynamic_contract_registry_stream_cursor_value_input {
  block_timestamp: Int
  chain_id: Int
  contract_address: String
  contract_type: contract_type
  event_id: numeric
}

"""
columns and relationships of "entity_history"
"""
type entity_history {
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  entity_id: String!
  entity_type: entity_type!
  """An object relationship"""
  event: raw_events
  log_index: Int!
  params(
    """JSON select path"""
    path: String
  ): json
  previous_block_number: Int
  previous_block_timestamp: Int
  previous_chain_id: Int
  previous_log_index: Int
}

"""
order by aggregate values of table "entity_history"
"""
input entity_history_aggregate_order_by {
  avg: entity_history_avg_order_by
  count: order_by
  max: entity_history_max_order_by
  min: entity_history_min_order_by
  stddev: entity_history_stddev_order_by
  stddev_pop: entity_history_stddev_pop_order_by
  stddev_samp: entity_history_stddev_samp_order_by
  sum: entity_history_sum_order_by
  var_pop: entity_history_var_pop_order_by
  var_samp: entity_history_var_samp_order_by
  variance: entity_history_variance_order_by
}

"""
order by avg() on columns of table "entity_history"
"""
input entity_history_avg_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
Boolean expression to filter rows from the table "entity_history". All fields are combined with a logical 'AND'.
"""
input entity_history_bool_exp {
  _and: [entity_history_bool_exp!]
  _not: entity_history_bool_exp
  _or: [entity_history_bool_exp!]
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  entity_id: String_comparison_exp
  entity_type: entity_type_comparison_exp
  event: raw_events_bool_exp
  log_index: Int_comparison_exp
  params: json_comparison_exp
  previous_block_number: Int_comparison_exp
  previous_block_timestamp: Int_comparison_exp
  previous_chain_id: Int_comparison_exp
  previous_log_index: Int_comparison_exp
}

"""
columns and relationships of "entity_history_filter"
"""
type entity_history_filter {
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  entity_id: String!
  entity_type: entity_type!
  """An object relationship"""
  event: raw_events
  log_index: Int!
  new_val(
    """JSON select path"""
    path: String
  ): json
  old_val(
    """JSON select path"""
    path: String
  ): json
  previous_block_number: Int!
  previous_log_index: Int!
}

"""
Boolean expression to filter rows from the table "entity_history_filter". All fields are combined with a logical 'AND'.
"""
input entity_history_filter_bool_exp {
  _and: [entity_history_filter_bool_exp!]
  _not: entity_history_filter_bool_exp
  _or: [entity_history_filter_bool_exp!]
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  entity_id: String_comparison_exp
  entity_type: entity_type_comparison_exp
  event: raw_events_bool_exp
  log_index: Int_comparison_exp
  new_val: json_comparison_exp
  old_val: json_comparison_exp
  previous_block_number: Int_comparison_exp
  previous_log_index: Int_comparison_exp
}

"""Ordering options when selecting data from "entity_history_filter"."""
input entity_history_filter_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  event: raw_events_order_by
  log_index: order_by
  new_val: order_by
  old_val: order_by
  previous_block_number: order_by
  previous_log_index: order_by
}

"""
select columns of table "entity_history_filter"
"""
enum entity_history_filter_select_column {
  """column name"""
  block_number
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  entity_id
  """column name"""
  entity_type
  """column name"""
  log_index
  """column name"""
  new_val
  """column name"""
  old_val
  """column name"""
  previous_block_number
  """column name"""
  previous_log_index
}

"""
Streaming cursor of the table "entity_history_filter"
"""
input entity_history_filter_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: entity_history_filter_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input entity_history_filter_stream_cursor_value_input {
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  entity_id: String
  entity_type: entity_type
  log_index: Int
  new_val: json
  old_val: json
  previous_block_number: Int
  previous_log_index: Int
}

"""
order by max() on columns of table "entity_history"
"""
input entity_history_max_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by min() on columns of table "entity_history"
"""
input entity_history_min_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""Ordering options when selecting data from "entity_history"."""
input entity_history_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  entity_id: order_by
  entity_type: order_by
  event: raw_events_order_by
  log_index: order_by
  params: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
select columns of table "entity_history"
"""
enum entity_history_select_column {
  """column name"""
  block_number
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  entity_id
  """column name"""
  entity_type
  """column name"""
  log_index
  """column name"""
  params
  """column name"""
  previous_block_number
  """column name"""
  previous_block_timestamp
  """column name"""
  previous_chain_id
  """column name"""
  previous_log_index
}

"""
order by stddev() on columns of table "entity_history"
"""
input entity_history_stddev_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by stddev_pop() on columns of table "entity_history"
"""
input entity_history_stddev_pop_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by stddev_samp() on columns of table "entity_history"
"""
input entity_history_stddev_samp_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
Streaming cursor of the table "entity_history"
"""
input entity_history_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: entity_history_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input entity_history_stream_cursor_value_input {
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  entity_id: String
  entity_type: entity_type
  log_index: Int
  params: json
  previous_block_number: Int
  previous_block_timestamp: Int
  previous_chain_id: Int
  previous_log_index: Int
}

"""
order by sum() on columns of table "entity_history"
"""
input entity_history_sum_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by var_pop() on columns of table "entity_history"
"""
input entity_history_var_pop_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by var_samp() on columns of table "entity_history"
"""
input entity_history_var_samp_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

"""
order by variance() on columns of table "entity_history"
"""
input entity_history_variance_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  previous_block_number: order_by
  previous_block_timestamp: order_by
  previous_chain_id: order_by
  previous_log_index: order_by
}

scalar entity_type

"""
Boolean expression to compare columns of type "entity_type". All fields are combined with logical 'AND'.
"""
input entity_type_comparison_exp {
  _eq: entity_type
  _gt: entity_type
  _gte: entity_type
  _in: [entity_type!]
  _is_null: Boolean
  _lt: entity_type
  _lte: entity_type
  _neq: entity_type
  _nin: [entity_type!]
}

"""
columns and relationships of "event_sync_state"
"""
type event_sync_state {
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  log_index: Int!
  transaction_index: Int!
}

"""
Boolean expression to filter rows from the table "event_sync_state". All fields are combined with a logical 'AND'.
"""
input event_sync_state_bool_exp {
  _and: [event_sync_state_bool_exp!]
  _not: event_sync_state_bool_exp
  _or: [event_sync_state_bool_exp!]
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  log_index: Int_comparison_exp
  transaction_index: Int_comparison_exp
}

"""Ordering options when selecting data from "event_sync_state"."""
input event_sync_state_order_by {
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  log_index: order_by
  transaction_index: order_by
}

"""
select columns of table "event_sync_state"
"""
enum event_sync_state_select_column {
  """column name"""
  block_number
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  log_index
  """column name"""
  transaction_index
}

"""
Streaming cursor of the table "event_sync_state"
"""
input event_sync_state_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: event_sync_state_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input event_sync_state_stream_cursor_value_input {
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  log_index: Int
  transaction_index: Int
}

scalar event_type

"""
Boolean expression to compare columns of type "event_type". All fields are combined with logical 'AND'.
"""
input event_type_comparison_exp {
  _eq: event_type
  _gt: event_type
  _gte: event_type
  _in: [event_type!]
  _is_null: Boolean
  _lt: event_type
  _lte: event_type
  _neq: event_type
  _nin: [event_type!]
}

input get_entity_history_filter_args {
  end_block: Int
  end_chain_id: Int
  end_log_index: Int
  end_timestamp: Int
  start_block: Int
  start_chain_id: Int
  start_log_index: Int
  start_timestamp: Int
}

scalar json

"""
Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [numeric!]
  """does the array contain the given value"""
  _contains: [numeric!]
  _eq: [numeric!]
  _gt: [numeric!]
  _gte: [numeric!]
  _in: [[numeric!]!]
  _is_null: Boolean
  _lt: [numeric!]
  _lte: [numeric!]
  _neq: [numeric!]
  _nin: [[numeric!]!]
}

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc
  """in ascending order, nulls first"""
  asc_nulls_first
  """in ascending order, nulls last"""
  asc_nulls_last
  """in descending order, nulls first"""
  desc
  """in descending order, nulls first"""
  desc_nulls_first
  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "persisted_state"
"""
type persisted_state {
  abi_files_hash: String!
  config_hash: String!
  envio_version: String!
  handler_files_hash: String!
  id: Int!
  schema_hash: String!
}

"""
Boolean expression to filter rows from the table "persisted_state". All fields are combined with a logical 'AND'.
"""
input persisted_state_bool_exp {
  _and: [persisted_state_bool_exp!]
  _not: persisted_state_bool_exp
  _or: [persisted_state_bool_exp!]
  abi_files_hash: String_comparison_exp
  config_hash: String_comparison_exp
  envio_version: String_comparison_exp
  handler_files_hash: String_comparison_exp
  id: Int_comparison_exp
  schema_hash: String_comparison_exp
}

"""Ordering options when selecting data from "persisted_state"."""
input persisted_state_order_by {
  abi_files_hash: order_by
  config_hash: order_by
  envio_version: order_by
  handler_files_hash: order_by
  id: order_by
  schema_hash: order_by
}

"""
select columns of table "persisted_state"
"""
enum persisted_state_select_column {
  """column name"""
  abi_files_hash
  """column name"""
  config_hash
  """column name"""
  envio_version
  """column name"""
  handler_files_hash
  """column name"""
  id
  """column name"""
  schema_hash
}

"""
Streaming cursor of the table "persisted_state"
"""
input persisted_state_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: persisted_state_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input persisted_state_stream_cursor_value_input {
  abi_files_hash: String
  config_hash: String
  envio_version: String
  handler_files_hash: String
  id: Int
  schema_hash: String
}

"""
columns and relationships of "raw_events"
"""
type raw_events {
  block_hash: String!
  block_number: Int!
  block_timestamp: Int!
  chain_id: Int!
  db_write_timestamp: timestamp
  """An array relationship"""
  event_history(
    """distinct select on columns"""
    distinct_on: [entity_history_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [entity_history_order_by!]
    """filter the rows returned"""
    where: entity_history_bool_exp
  ): [entity_history!]!
  event_id: numeric!
  event_type: event_type!
  log_index: Int!
  params(
    """JSON select path"""
    path: String
  ): json!
  src_address: String!
  transaction_hash: String!
  transaction_index: Int!
}

"""
Boolean expression to filter rows from the table "raw_events". All fields are combined with a logical 'AND'.
"""
input raw_events_bool_exp {
  _and: [raw_events_bool_exp!]
  _not: raw_events_bool_exp
  _or: [raw_events_bool_exp!]
  block_hash: String_comparison_exp
  block_number: Int_comparison_exp
  block_timestamp: Int_comparison_exp
  chain_id: Int_comparison_exp
  db_write_timestamp: timestamp_comparison_exp
  event_history: entity_history_bool_exp
  event_id: numeric_comparison_exp
  event_type: event_type_comparison_exp
  log_index: Int_comparison_exp
  params: json_comparison_exp
  src_address: String_comparison_exp
  transaction_hash: String_comparison_exp
  transaction_index: Int_comparison_exp
}

"""Ordering options when selecting data from "raw_events"."""
input raw_events_order_by {
  block_hash: order_by
  block_number: order_by
  block_timestamp: order_by
  chain_id: order_by
  db_write_timestamp: order_by
  event_history_aggregate: entity_history_aggregate_order_by
  event_id: order_by
  event_type: order_by
  log_index: order_by
  params: order_by
  src_address: order_by
  transaction_hash: order_by
  transaction_index: order_by
}

"""
select columns of table "raw_events"
"""
enum raw_events_select_column {
  """column name"""
  block_hash
  """column name"""
  block_number
  """column name"""
  block_timestamp
  """column name"""
  chain_id
  """column name"""
  db_write_timestamp
  """column name"""
  event_id
  """column name"""
  event_type
  """column name"""
  log_index
  """column name"""
  params
  """column name"""
  src_address
  """column name"""
  transaction_hash
  """column name"""
  transaction_index
}

"""
Streaming cursor of the table "raw_events"
"""
input raw_events_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: raw_events_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input raw_events_stream_cursor_value_input {
  block_hash: String
  block_number: Int
  block_timestamp: Int
  chain_id: Int
  db_write_timestamp: timestamp
  event_id: numeric
  event_type: event_type
  log_index: Int
  params: json
  src_address: String
  transaction_hash: String
  transaction_index: Int
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}