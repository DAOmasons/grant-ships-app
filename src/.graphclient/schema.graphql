schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type ProfileMemberGroup {
  id: Bytes!
  addresses: [Bytes!]
}

input ProfileMemberGroup_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  addresses: [Bytes!]
  addresses_not: [Bytes!]
  addresses_contains: [Bytes!]
  addresses_contains_nocase: [Bytes!]
  addresses_not_contains: [Bytes!]
  addresses_not_contains_nocase: [Bytes!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProfileMemberGroup_filter]
  or: [ProfileMemberGroup_filter]
}

enum ProfileMemberGroup_orderBy {
  id
  addresses
}

type Project {
  id: Bytes!
  profileId: Bytes!
  nonce: BigInt!
  name: String!
  metadata_protocol: BigInt!
  metadata_pointer: String!
  metadata: ProjectMetadata
  owner: Bytes!
  anchor: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  members: ProfileMemberGroup
}

type ProjectMetadata {
  id: String!
  name: String
  description: String
  avatarHash_IPFS: String
  email: String
  x: String
  github: String
  discord: String
  telegram: String
  website: String
}

input ProjectMetadata_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  avatarHash_IPFS: String
  avatarHash_IPFS_not: String
  avatarHash_IPFS_gt: String
  avatarHash_IPFS_lt: String
  avatarHash_IPFS_gte: String
  avatarHash_IPFS_lte: String
  avatarHash_IPFS_in: [String!]
  avatarHash_IPFS_not_in: [String!]
  avatarHash_IPFS_contains: String
  avatarHash_IPFS_contains_nocase: String
  avatarHash_IPFS_not_contains: String
  avatarHash_IPFS_not_contains_nocase: String
  avatarHash_IPFS_starts_with: String
  avatarHash_IPFS_starts_with_nocase: String
  avatarHash_IPFS_not_starts_with: String
  avatarHash_IPFS_not_starts_with_nocase: String
  avatarHash_IPFS_ends_with: String
  avatarHash_IPFS_ends_with_nocase: String
  avatarHash_IPFS_not_ends_with: String
  avatarHash_IPFS_not_ends_with_nocase: String
  email: String
  email_not: String
  email_gt: String
  email_lt: String
  email_gte: String
  email_lte: String
  email_in: [String!]
  email_not_in: [String!]
  email_contains: String
  email_contains_nocase: String
  email_not_contains: String
  email_not_contains_nocase: String
  email_starts_with: String
  email_starts_with_nocase: String
  email_not_starts_with: String
  email_not_starts_with_nocase: String
  email_ends_with: String
  email_ends_with_nocase: String
  email_not_ends_with: String
  email_not_ends_with_nocase: String
  x: String
  x_not: String
  x_gt: String
  x_lt: String
  x_gte: String
  x_lte: String
  x_in: [String!]
  x_not_in: [String!]
  x_contains: String
  x_contains_nocase: String
  x_not_contains: String
  x_not_contains_nocase: String
  x_starts_with: String
  x_starts_with_nocase: String
  x_not_starts_with: String
  x_not_starts_with_nocase: String
  x_ends_with: String
  x_ends_with_nocase: String
  x_not_ends_with: String
  x_not_ends_with_nocase: String
  github: String
  github_not: String
  github_gt: String
  github_lt: String
  github_gte: String
  github_lte: String
  github_in: [String!]
  github_not_in: [String!]
  github_contains: String
  github_contains_nocase: String
  github_not_contains: String
  github_not_contains_nocase: String
  github_starts_with: String
  github_starts_with_nocase: String
  github_not_starts_with: String
  github_not_starts_with_nocase: String
  github_ends_with: String
  github_ends_with_nocase: String
  github_not_ends_with: String
  github_not_ends_with_nocase: String
  discord: String
  discord_not: String
  discord_gt: String
  discord_lt: String
  discord_gte: String
  discord_lte: String
  discord_in: [String!]
  discord_not_in: [String!]
  discord_contains: String
  discord_contains_nocase: String
  discord_not_contains: String
  discord_not_contains_nocase: String
  discord_starts_with: String
  discord_starts_with_nocase: String
  discord_not_starts_with: String
  discord_not_starts_with_nocase: String
  discord_ends_with: String
  discord_ends_with_nocase: String
  discord_not_ends_with: String
  discord_not_ends_with_nocase: String
  telegram: String
  telegram_not: String
  telegram_gt: String
  telegram_lt: String
  telegram_gte: String
  telegram_lte: String
  telegram_in: [String!]
  telegram_not_in: [String!]
  telegram_contains: String
  telegram_contains_nocase: String
  telegram_not_contains: String
  telegram_not_contains_nocase: String
  telegram_starts_with: String
  telegram_starts_with_nocase: String
  telegram_not_starts_with: String
  telegram_not_starts_with_nocase: String
  telegram_ends_with: String
  telegram_ends_with_nocase: String
  telegram_not_ends_with: String
  telegram_not_ends_with_nocase: String
  website: String
  website_not: String
  website_gt: String
  website_lt: String
  website_gte: String
  website_lte: String
  website_in: [String!]
  website_not_in: [String!]
  website_contains: String
  website_contains_nocase: String
  website_not_contains: String
  website_not_contains_nocase: String
  website_starts_with: String
  website_starts_with_nocase: String
  website_not_starts_with: String
  website_not_starts_with_nocase: String
  website_ends_with: String
  website_ends_with_nocase: String
  website_not_ends_with: String
  website_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProjectMetadata_filter]
  or: [ProjectMetadata_filter]
}

enum ProjectMetadata_orderBy {
  id
  name
  description
  avatarHash_IPFS
  email
  x
  github
  discord
  telegram
  website
}

input Project_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  profileId: Bytes
  profileId_not: Bytes
  profileId_gt: Bytes
  profileId_lt: Bytes
  profileId_gte: Bytes
  profileId_lte: Bytes
  profileId_in: [Bytes!]
  profileId_not_in: [Bytes!]
  profileId_contains: Bytes
  profileId_not_contains: Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  metadata_protocol: BigInt
  metadata_protocol_not: BigInt
  metadata_protocol_gt: BigInt
  metadata_protocol_lt: BigInt
  metadata_protocol_gte: BigInt
  metadata_protocol_lte: BigInt
  metadata_protocol_in: [BigInt!]
  metadata_protocol_not_in: [BigInt!]
  metadata_pointer: String
  metadata_pointer_not: String
  metadata_pointer_gt: String
  metadata_pointer_lt: String
  metadata_pointer_gte: String
  metadata_pointer_lte: String
  metadata_pointer_in: [String!]
  metadata_pointer_not_in: [String!]
  metadata_pointer_contains: String
  metadata_pointer_contains_nocase: String
  metadata_pointer_not_contains: String
  metadata_pointer_not_contains_nocase: String
  metadata_pointer_starts_with: String
  metadata_pointer_starts_with_nocase: String
  metadata_pointer_not_starts_with: String
  metadata_pointer_not_starts_with_nocase: String
  metadata_pointer_ends_with: String
  metadata_pointer_ends_with_nocase: String
  metadata_pointer_not_ends_with: String
  metadata_pointer_not_ends_with_nocase: String
  metadata: String
  metadata_not: String
  metadata_gt: String
  metadata_lt: String
  metadata_gte: String
  metadata_lte: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  metadata_: ProjectMetadata_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  anchor: Bytes
  anchor_not: Bytes
  anchor_gt: Bytes
  anchor_lt: Bytes
  anchor_gte: Bytes
  anchor_lte: Bytes
  anchor_in: [Bytes!]
  anchor_not_in: [Bytes!]
  anchor_contains: Bytes
  anchor_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  members: String
  members_not: String
  members_gt: String
  members_lt: String
  members_gte: String
  members_lte: String
  members_in: [String!]
  members_not_in: [String!]
  members_contains: String
  members_contains_nocase: String
  members_not_contains: String
  members_not_contains_nocase: String
  members_starts_with: String
  members_starts_with_nocase: String
  members_not_starts_with: String
  members_not_starts_with_nocase: String
  members_ends_with: String
  members_ends_with_nocase: String
  members_not_ends_with: String
  members_not_ends_with_nocase: String
  members_: ProfileMemberGroup_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Project_filter]
  or: [Project_filter]
}

enum Project_orderBy {
  id
  profileId
  nonce
  name
  metadata_protocol
  metadata_pointer
  metadata
  metadata__id
  metadata__name
  metadata__description
  metadata__avatarHash_IPFS
  metadata__email
  metadata__x
  metadata__github
  metadata__discord
  metadata__telegram
  metadata__website
  owner
  anchor
  blockNumber
  blockTimestamp
  transactionHash
  members
  members__id
}

type Query {
  project(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Project
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: Project_orderBy
    orderDirection: OrderDirection
    where: Project_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  projectMetadata(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectMetadata_orderBy
    orderDirection: OrderDirection
    where: ProjectMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectMetadata!]!
  shipProfile(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ShipProfile
  shipProfiles(
    skip: Int = 0
    first: Int = 100
    orderBy: ShipProfile_orderBy
    orderDirection: OrderDirection
    where: ShipProfile_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ShipProfile!]!
  shipProfileMetadata(
    skip: Int = 0
    first: Int = 100
    orderBy: ShipProfileMetadata_orderBy
    orderDirection: OrderDirection
    where: ShipProfileMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ShipProfileMetadata!]!
  profileMemberGroup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProfileMemberGroup
  profileMemberGroups(
    skip: Int = 0
    first: Int = 100
    orderBy: ProfileMemberGroup_orderBy
    orderDirection: OrderDirection
    where: ProfileMemberGroup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProfileMemberGroup!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type ShipProfile {
  id: Bytes!
  profileId: Bytes!
  nonce: BigInt!
  name: String!
  metadata_protocol: BigInt!
  metadata_pointer: String!
  metadata: ShipProfileMetadata!
  owner: Bytes!
  anchor: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  alloProfileMembers: ProfileMemberGroup
}

type ShipProfileMetadata {
  id: String!
  name: String
  mission: String
  avatarHash_IPFS: String
  email: String
  x: String
  github: String
  discord: String
  telegram: String
  website: String
}

input ShipProfileMetadata_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  mission: String
  mission_not: String
  mission_gt: String
  mission_lt: String
  mission_gte: String
  mission_lte: String
  mission_in: [String!]
  mission_not_in: [String!]
  mission_contains: String
  mission_contains_nocase: String
  mission_not_contains: String
  mission_not_contains_nocase: String
  mission_starts_with: String
  mission_starts_with_nocase: String
  mission_not_starts_with: String
  mission_not_starts_with_nocase: String
  mission_ends_with: String
  mission_ends_with_nocase: String
  mission_not_ends_with: String
  mission_not_ends_with_nocase: String
  avatarHash_IPFS: String
  avatarHash_IPFS_not: String
  avatarHash_IPFS_gt: String
  avatarHash_IPFS_lt: String
  avatarHash_IPFS_gte: String
  avatarHash_IPFS_lte: String
  avatarHash_IPFS_in: [String!]
  avatarHash_IPFS_not_in: [String!]
  avatarHash_IPFS_contains: String
  avatarHash_IPFS_contains_nocase: String
  avatarHash_IPFS_not_contains: String
  avatarHash_IPFS_not_contains_nocase: String
  avatarHash_IPFS_starts_with: String
  avatarHash_IPFS_starts_with_nocase: String
  avatarHash_IPFS_not_starts_with: String
  avatarHash_IPFS_not_starts_with_nocase: String
  avatarHash_IPFS_ends_with: String
  avatarHash_IPFS_ends_with_nocase: String
  avatarHash_IPFS_not_ends_with: String
  avatarHash_IPFS_not_ends_with_nocase: String
  email: String
  email_not: String
  email_gt: String
  email_lt: String
  email_gte: String
  email_lte: String
  email_in: [String!]
  email_not_in: [String!]
  email_contains: String
  email_contains_nocase: String
  email_not_contains: String
  email_not_contains_nocase: String
  email_starts_with: String
  email_starts_with_nocase: String
  email_not_starts_with: String
  email_not_starts_with_nocase: String
  email_ends_with: String
  email_ends_with_nocase: String
  email_not_ends_with: String
  email_not_ends_with_nocase: String
  x: String
  x_not: String
  x_gt: String
  x_lt: String
  x_gte: String
  x_lte: String
  x_in: [String!]
  x_not_in: [String!]
  x_contains: String
  x_contains_nocase: String
  x_not_contains: String
  x_not_contains_nocase: String
  x_starts_with: String
  x_starts_with_nocase: String
  x_not_starts_with: String
  x_not_starts_with_nocase: String
  x_ends_with: String
  x_ends_with_nocase: String
  x_not_ends_with: String
  x_not_ends_with_nocase: String
  github: String
  github_not: String
  github_gt: String
  github_lt: String
  github_gte: String
  github_lte: String
  github_in: [String!]
  github_not_in: [String!]
  github_contains: String
  github_contains_nocase: String
  github_not_contains: String
  github_not_contains_nocase: String
  github_starts_with: String
  github_starts_with_nocase: String
  github_not_starts_with: String
  github_not_starts_with_nocase: String
  github_ends_with: String
  github_ends_with_nocase: String
  github_not_ends_with: String
  github_not_ends_with_nocase: String
  discord: String
  discord_not: String
  discord_gt: String
  discord_lt: String
  discord_gte: String
  discord_lte: String
  discord_in: [String!]
  discord_not_in: [String!]
  discord_contains: String
  discord_contains_nocase: String
  discord_not_contains: String
  discord_not_contains_nocase: String
  discord_starts_with: String
  discord_starts_with_nocase: String
  discord_not_starts_with: String
  discord_not_starts_with_nocase: String
  discord_ends_with: String
  discord_ends_with_nocase: String
  discord_not_ends_with: String
  discord_not_ends_with_nocase: String
  telegram: String
  telegram_not: String
  telegram_gt: String
  telegram_lt: String
  telegram_gte: String
  telegram_lte: String
  telegram_in: [String!]
  telegram_not_in: [String!]
  telegram_contains: String
  telegram_contains_nocase: String
  telegram_not_contains: String
  telegram_not_contains_nocase: String
  telegram_starts_with: String
  telegram_starts_with_nocase: String
  telegram_not_starts_with: String
  telegram_not_starts_with_nocase: String
  telegram_ends_with: String
  telegram_ends_with_nocase: String
  telegram_not_ends_with: String
  telegram_not_ends_with_nocase: String
  website: String
  website_not: String
  website_gt: String
  website_lt: String
  website_gte: String
  website_lte: String
  website_in: [String!]
  website_not_in: [String!]
  website_contains: String
  website_contains_nocase: String
  website_not_contains: String
  website_not_contains_nocase: String
  website_starts_with: String
  website_starts_with_nocase: String
  website_not_starts_with: String
  website_not_starts_with_nocase: String
  website_ends_with: String
  website_ends_with_nocase: String
  website_not_ends_with: String
  website_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ShipProfileMetadata_filter]
  or: [ShipProfileMetadata_filter]
}

enum ShipProfileMetadata_orderBy {
  id
  name
  mission
  avatarHash_IPFS
  email
  x
  github
  discord
  telegram
  website
}

input ShipProfile_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  profileId: Bytes
  profileId_not: Bytes
  profileId_gt: Bytes
  profileId_lt: Bytes
  profileId_gte: Bytes
  profileId_lte: Bytes
  profileId_in: [Bytes!]
  profileId_not_in: [Bytes!]
  profileId_contains: Bytes
  profileId_not_contains: Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  metadata_protocol: BigInt
  metadata_protocol_not: BigInt
  metadata_protocol_gt: BigInt
  metadata_protocol_lt: BigInt
  metadata_protocol_gte: BigInt
  metadata_protocol_lte: BigInt
  metadata_protocol_in: [BigInt!]
  metadata_protocol_not_in: [BigInt!]
  metadata_pointer: String
  metadata_pointer_not: String
  metadata_pointer_gt: String
  metadata_pointer_lt: String
  metadata_pointer_gte: String
  metadata_pointer_lte: String
  metadata_pointer_in: [String!]
  metadata_pointer_not_in: [String!]
  metadata_pointer_contains: String
  metadata_pointer_contains_nocase: String
  metadata_pointer_not_contains: String
  metadata_pointer_not_contains_nocase: String
  metadata_pointer_starts_with: String
  metadata_pointer_starts_with_nocase: String
  metadata_pointer_not_starts_with: String
  metadata_pointer_not_starts_with_nocase: String
  metadata_pointer_ends_with: String
  metadata_pointer_ends_with_nocase: String
  metadata_pointer_not_ends_with: String
  metadata_pointer_not_ends_with_nocase: String
  metadata: String
  metadata_not: String
  metadata_gt: String
  metadata_lt: String
  metadata_gte: String
  metadata_lte: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  metadata_: ShipProfileMetadata_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  anchor: Bytes
  anchor_not: Bytes
  anchor_gt: Bytes
  anchor_lt: Bytes
  anchor_gte: Bytes
  anchor_lte: Bytes
  anchor_in: [Bytes!]
  anchor_not_in: [Bytes!]
  anchor_contains: Bytes
  anchor_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  alloProfileMembers: String
  alloProfileMembers_not: String
  alloProfileMembers_gt: String
  alloProfileMembers_lt: String
  alloProfileMembers_gte: String
  alloProfileMembers_lte: String
  alloProfileMembers_in: [String!]
  alloProfileMembers_not_in: [String!]
  alloProfileMembers_contains: String
  alloProfileMembers_contains_nocase: String
  alloProfileMembers_not_contains: String
  alloProfileMembers_not_contains_nocase: String
  alloProfileMembers_starts_with: String
  alloProfileMembers_starts_with_nocase: String
  alloProfileMembers_not_starts_with: String
  alloProfileMembers_not_starts_with_nocase: String
  alloProfileMembers_ends_with: String
  alloProfileMembers_ends_with_nocase: String
  alloProfileMembers_not_ends_with: String
  alloProfileMembers_not_ends_with_nocase: String
  alloProfileMembers_: ProfileMemberGroup_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ShipProfile_filter]
  or: [ShipProfile_filter]
}

enum ShipProfile_orderBy {
  id
  profileId
  nonce
  name
  metadata_protocol
  metadata_pointer
  metadata
  metadata__id
  metadata__name
  metadata__mission
  metadata__avatarHash_IPFS
  metadata__email
  metadata__x
  metadata__github
  metadata__discord
  metadata__telegram
  metadata__website
  owner
  anchor
  blockNumber
  blockTimestamp
  transactionHash
  alloProfileMembers
  alloProfileMembers__id
}

type Subscription {
  project(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Project
  projects(
    skip: Int = 0
    first: Int = 100
    orderBy: Project_orderBy
    orderDirection: OrderDirection
    where: Project_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Project!]!
  projectMetadata(
    skip: Int = 0
    first: Int = 100
    orderBy: ProjectMetadata_orderBy
    orderDirection: OrderDirection
    where: ProjectMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProjectMetadata!]!
  shipProfile(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ShipProfile
  shipProfiles(
    skip: Int = 0
    first: Int = 100
    orderBy: ShipProfile_orderBy
    orderDirection: OrderDirection
    where: ShipProfile_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ShipProfile!]!
  shipProfileMetadata(
    skip: Int = 0
    first: Int = 100
    orderBy: ShipProfileMetadata_orderBy
    orderDirection: OrderDirection
    where: ShipProfileMetadata_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ShipProfileMetadata!]!
  profileMemberGroup(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProfileMemberGroup
  profileMemberGroups(
    skip: Int = 0
    first: Int = 100
    orderBy: ProfileMemberGroup_orderBy
    orderDirection: OrderDirection
    where: ProfileMemberGroup_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProfileMemberGroup!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}